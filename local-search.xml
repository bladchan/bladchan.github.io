<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于Linux IO多路复用那些事</title>
    <link href="/2023/07/10/%E5%85%B3%E4%BA%8ELinux%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2023/07/10/%E5%85%B3%E4%BA%8ELinux%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="关于I-x2F-O多路复用那些事"><a href="#关于I-x2F-O多路复用那些事" class="headerlink" title="关于I/O多路复用那些事"></a>关于I/O多路复用那些事</h1><p><strong>Q1：为什么需要I/O多路复用？</strong>[1]</p><p><strong>A1：</strong></p><ul><li><p>TCP Socket只能实现一对一通信 ==&gt; 同步<strong>阻塞</strong>（连接请求饥饿性）：read阻塞直到请求数据传送过来并write</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果没有I/O多路复用，那如何更好服务更多的用户？</p><ul><li>一个请求对应一个线程 ==&gt; 维护一个线程池</li><li>线程池的缺点：1）如何确定预先分配的线程池中线程的数量？如果分配少了，但连接数激增，可能会导致程序直接崩溃或者上下文切换的开销太大导致程序<strong>运行效率很低</strong>；如果分配过多，但连接数很少，会导致已分配的线程得不到利用而造成<strong>资源浪费</strong></li></ul></li><li><p>I/O（时分）多路复用：一个线程维护多个Socket</p></li></ul><hr><p><strong>Q2：如何进行I/O多路复用？</strong></p><p><strong>A2：</strong></p><ul><li><p>使用一个操作系统机制来轮询一组文件描述符，在Linux中，主要有三种操作：<strong>select</strong>、<strong>poll</strong>和<strong>epoll</strong></p></li><li><p>Linux（Unix）操作系统内核提供给用户态的多路复用<strong>系统调用</strong>（select、poll、epoll），进程可以通过一个系统调用函数从内核中获取多个事件</p></li></ul><hr><h2 id="E1：Select系统调用"><a href="#E1：Select系统调用" class="headerlink" title="E1：Select系统调用"></a><strong>E1：Select系统调用</strong></h2><ul><li><p>函数签名[3-4]：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">select</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">int</span> nfds, <span class="hljs-comment">// 所允许设置的最大文件描述符值+1</span></span><br><span class="hljs-params">    fd_set *readfds,<span class="hljs-comment">// 读文件描述符集合（select返回后，readfds仅保留那些准备读取的文件描述符）</span></span><br><span class="hljs-params">    fd_set *writefds,<span class="hljs-comment">// 写文件描述符集合（select返回后，readfds仅保留那些准备写的文件描述符）</span></span><br><span class="hljs-params">    fd_set *exceptfds,<span class="hljs-comment">// 监控异常条件（exceptional conditions）</span></span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> timeval *timeout<span class="hljs-comment">// timeval结构体，用来描述超时信息（全0表示立刻返回，为NULL表示无限等待）</span></span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> select()调用接触阻塞的条件：</p><ul><li>任意一个文件描述符准备好了</li><li>调用被一个信号处理器所中断</li><li>超时 [由参数timeout控制]</li></ul></li><li><p>与fd_set操作有关的宏：</p><ul><li>**FD_ZERO()**：清空set</li><li>**FD_SET()**：将fd添加到set中</li><li>**FD_CLR()**：将fd从set中移除</li><li>**FD_ISSET()**：可以在调用select()之后，检查某一个文件描述符是否仍然在一个集合中，返回非0表示该文件描述符在集合中，否则返回0</li></ul></li><li><p><strong>pselect()</strong></p><ul><li><p>函数签名：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pselect</span><span class="hljs-params">(<span class="hljs-type">int</span> nfds, fd_set *_Nullable <span class="hljs-keyword">restrict</span> readfds,</span><br><span class="hljs-params">                  fd_set *_Nullable <span class="hljs-keyword">restrict</span> writefds,</span><br><span class="hljs-params">                  fd_set *_Nullable <span class="hljs-keyword">restrict</span> exceptfds,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *_Nullable <span class="hljs-keyword">restrict</span> timeout,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *_Nullable <span class="hljs-keyword">restrict</span> sigmask)</span>;<br></code></pre></td></tr></tbody></table></figure></li><li><p>提供额外一个信号掩码操作，允许更安全的调用select</p></li><li><p>与select()的区别：</p><p>(1) 超时参数的结构体不一样：在<code>select()</code>中是<code>struct timeval</code>（秒+毫秒），而在<code>pselect()</code>中是<code>struct timespec</code>（秒+纳秒）</p><p>(2) 是否修改timeout值：<code>select()</code>可能会将timeout值更新为还剩下的时间，而<code>pselect()</code>则不会修改</p><p>(3) sigmask参数</p></li><li><p>与select()之间的等价表述：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">ready = pselect(nfds, &amp;readfds, &amp;writefds, &amp;exceptfds,<br>                           timeout, &amp;sigmask);<br><span class="hljs-comment">// Same as ---|:</span><br><span class="hljs-comment">//            v</span><br><span class="hljs-type">sigset_t</span> origmask;<br><br>pthread_sigmask(SIG_SETMASK, &amp;sigmask, &amp;origmask);<br>ready = select(nfds, &amp;readfds, &amp;writefds, &amp;exceptfds, timeout);<br>pthread_sigmask(SIG_SETMASK, &amp;origmask, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>[2]</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/select.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXBUF 256</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">child_process</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  sleep(<span class="hljs-number">2</span>); <span class="hljs-comment">// make sure that server is started</span><br>  <span class="hljs-type">char</span> msg[MAXBUF];<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span> =</span> {<span class="hljs-number">0</span>};<br>  <span class="hljs-type">int</span> n, sockfd, num=<span class="hljs-number">1</span>;<br>  srandom(getpid());<br>  <span class="hljs-comment">/* Create socket and connect to server */</span><br>  sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>  addr.sin_family = AF_INET;<br>  addr.sin_port = htons(<span class="hljs-number">2000</span>);<br>  addr.sin_addr.s_addr = inet_addr(<span class="hljs-string">"127.0.0.1"</span>);<br><br>  connect(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"child {%d} connected \n"</span>, getpid());<br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){  <span class="hljs-comment">// dead loop</span><br>        <span class="hljs-type">int</span> sl = (random() % <span class="hljs-number">10</span>) +  <span class="hljs-number">1</span>;<br>        num++;<br>     sleep(sl);<br>  <span class="hljs-built_in">sprintf</span> (msg, <span class="hljs-string">"Test message %d from client %d"</span>, num, getpid());<br>  n = write(sockfd, msg, <span class="hljs-built_in">strlen</span>(msg));<span class="hljs-comment">/* Send message */</span><br>  }<br><br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">char</span> buffer[MAXBUF];<br>  <span class="hljs-type">int</span> fds[<span class="hljs-number">5</span>];<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">addr</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client</span>;</span><br>  <span class="hljs-type">int</span> addrlen, n,i,max=<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> sockfd, commfd;<br>  fd_set rset;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>  {<br>  <span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>)<br>  {<br>  child_process();<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  }<br>  }<br><br>  sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (addr));<br>  addr.sin_family = AF_INET;<br>  addr.sin_port = htons(<span class="hljs-number">2000</span>);<br>  addr.sin_addr.s_addr = INADDR_ANY;<br>  bind(sockfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;addr, <span class="hljs-keyword">sizeof</span>(addr));<br>  listen (sockfd, <span class="hljs-number">5</span>); <br><br>  <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) <br>  {<br>    <span class="hljs-built_in">memset</span>(&amp;client, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (client));<br>    addrlen = <span class="hljs-keyword">sizeof</span>(client);<br>    fds[i] = accept(sockfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;client, &amp;addrlen);<br>    <span class="hljs-keyword">if</span>(fds[i] &gt; max)<br>    max = fds[i];<br>  }<br>  <br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){<br>FD_ZERO(&amp;rset);<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">5</span>; i++ ) {<br>  FD_SET(fds[i],&amp;rset);<br>  }<br><br>   <span class="hljs-built_in">puts</span>(<span class="hljs-string">"round again"</span>);<br>select(max+<span class="hljs-number">1</span>, &amp;rset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) {<br><span class="hljs-keyword">if</span> (FD_ISSET(fds[i], &amp;rset)){ <span class="hljs-comment">// 如果文件描述符在这个集合里，意味着该文件描述符可读</span><br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,MAXBUF);<br>read(fds[i], buffer, MAXBUF);<br><span class="hljs-built_in">puts</span>(buffer);<br>}<br>}<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 这里为什么需要传入nfds并告诉<code>select()</code>当前所有文件描述符中最大值+1？</p><p><strong>A:</strong> 与fd_set的实现有关：每个fd表示为一个比特，fd_set是一个32个整数的数组，共1024比特；我们进一步假设有5个文件描述符，但最高的文件描述符值是900，那么函数将会检查从0到900的比特而不需要检查到1024</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在每一次调用之前，需要构造每一个集合（三个集合）</li><li>函数逐位检查到最大文件描述符值 - 复杂度：O(n)</li><li>需要在select调用之后检查文件描述符是否在select返回的集合中，如果在，则进行相应的处理</li><li>select最多只能监听1024个文件描述符（底层使用BitsMap实现）</li></ul><h2 id="E2：Poll系统调用"><a href="#E2：Poll系统调用" class="headerlink" title="E2：Poll系统调用"></a>E2：Poll系统调用</h2><ul><li><p>函数签名[5]：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> pollfd *fds,</span><br><span class="hljs-params">    <span class="hljs-type">nfds_t</span> nfds,<span class="hljs-comment">// fds数组元素个数！（注意这里与select()函数的区别）</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span> timeout</span><br><span class="hljs-params">)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ppoll</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> pollfd *fds, <span class="hljs-type">nfds_t</span> nfds,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *_Nullable tmo_p,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *_Nullable sigmask</span><br><span class="hljs-params">)</span>;<br><span class="hljs-comment">/* struct pollfd */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> {</span><br>    <span class="hljs-type">int</span>   fd;         <span class="hljs-comment">/* file descriptor */</span><br>    <span class="hljs-type">short</span> events;     <span class="hljs-comment">/* requested events */</span><br>    <span class="hljs-type">short</span> revents;    <span class="hljs-comment">/* returned events */</span><br>};<br><br></code></pre></td></tr></tbody></table></figure></li><li><p><code>poll()</code>调用阻塞接触逻辑与<code>select()</code>一样</p></li><li><p>在events和revents（poll.h）中定义的比特：</p><ul><li><strong>POLLIN</strong>：有数据要读</li><li><strong>POLLPRI</strong>：文件描述符存在一些异常，可能包括：TCP socket中有带外数据等</li><li><strong>POLLOUT</strong>：可写</li><li><strong>POLLRDHUP</strong>：流socket关闭连接 or 连接途中关闭写操作</li><li><strong>POLLERR</strong>：错误条件 *</li><li><strong>POLLHUP</strong>：挂起 *</li><li><strong>POLLNVAL</strong>：无效请求，fd未打开 *</li></ul><p>ps: * 表示只会出现在revents中</p></li><li><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 将上述<code>select()</code>示例代码进行相应的修改</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br>...<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">pollfd</span> pollfds[<span class="hljs-number">5</span>];<br>    ...<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) <br>    {<br>        <span class="hljs-built_in">memset</span>(&amp;client, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span> (client));<br>        addrlen = <span class="hljs-built_in">sizeof</span>(client);<br>        pollfds[i].fd = <span class="hljs-built_in">accept</span>(sockfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;client, &amp;addrlen);<br>        pollfds[i].events = POLLIN;<br>    }<br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">"round again"</span>);<br>        <span class="hljs-built_in">poll</span>(pollfds, <span class="hljs-number">5</span>, <span class="hljs-number">50000</span>);<br><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) {<br>            <span class="hljs-keyword">if</span> (pollfds[i].revents &amp; POLLIN){<br>                pollfds[i].revents = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,MAXBUF);<br>                <span class="hljs-built_in">read</span>(pollfds[i].fd, buffer, MAXBUF);<br>                <span class="hljs-built_in">puts</span>(buffer);<br>            }<br>        }<br>    }<br>    ...<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="/2023/07/10/%E5%85%B3%E4%BA%8ELinux%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E9%82%A3%E4%BA%9B%E4%BA%8B/1.png"></p></li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>**poll() <span class="github-emoji"><span>🆚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> select(): **</p><ul><li><p><code>poll()</code>不需要使用者计算最大文件描述符值+1的值。</p></li><li><p><code>poll()</code>对于大数值的文件描述符来说更有效。仍然假设最大值为900的五个文件描述符，<code>poll()</code>仅需遍历5次，而使用<code>select()</code>则需要遍历900次</p></li><li><p><code>select()</code>的文件描述符集合是定长的（1024）</p></li><li><p>在<code>select()</code>中，文件描述符集合在返回时重新构建，因此随后每一次调用时都需要重新初始化他们：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){<br>FD_ZERO(&amp;rset);<br> <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">5</span>; i++ ) {<br> FD_SET(fds[i],&amp;rset);   <span class="hljs-comment">// &lt;================= 重新初始化！</span><br> }<br>  <br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"round again"</span>);<br>select(max+<span class="hljs-number">1</span>, &amp;rset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>  <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) {<br><span class="hljs-keyword">if</span> (FD_ISSET(fds[i], &amp;rset)){ <span class="hljs-comment">// 如果文件描述符在这个集合里，意味着该文件描述符可读</span><br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,MAXBUF);<br>read(fds[i], buffer, MAXBUF);<br><span class="hljs-built_in">puts</span>(buffer);<br>}<br>}<br> }<br></code></pre></td></tr></tbody></table></figure><p>而<code>poll()</code>将输入（events字段）和输出（revents字段）分隔开，允许数组重新使用（这里可以理解为<strong>生产者消费者模式</strong>）：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"round again"</span>);<br>    poll(pollfds, <span class="hljs-number">5</span>, <span class="hljs-number">50000</span>);  <span class="hljs-comment">// &lt;================== 生产revent</span><br>  <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) {<br>        <span class="hljs-keyword">if</span> (pollfds[i].revents &amp; POLLIN){<br>            pollfds[i].revents = <span class="hljs-number">0</span>;        <span class="hljs-comment">// &lt;================= 消费了，清空revent</span><br>            <span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,MAXBUF);<br>            read(pollfds[i].fd, buffer, MAXBUF);<br>            <span class="hljs-built_in">puts</span>(buffer);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p><code>select()</code>更加具有可移植性，因为某些Unix系统不支持<code>poll()</code></p></li></ul><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 再深入思考一下，<code>select()</code>和<code>poll()</code>最本质的区别其实是数据结构上的调整，<code>select()</code>使用了<strong>三个数组来分别维护</strong>读描述符、写描述符和异常处理描述符，而<code>poll()</code>仅使用了<strong>一个数组来维护文件描述符</strong>，但是使用了自定义的一个名为pollfds的结构体存储文件描述符信息，而<strong>该结构体中的event字段描述了文件描述符的类型</strong>。</p><h2 id="E3-Epoll系统调用"><a href="#E3-Epoll系统调用" class="headerlink" title="E3: Epoll系统调用"></a>E3: Epoll系统调用</h2><ul><li><p>函数签名[7-9]：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/epoll.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_create</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_create1</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_ctl</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-type">int</span> op, <span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> epoll_event *_Nullable event)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_wait</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event *events, <span class="hljs-type">int</span> maxevents, <span class="hljs-type">int</span> timeout)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_pwait</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event *events, <span class="hljs-type">int</span> maxevents, <span class="hljs-type">int</span> timeout, <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *_Nullable sigmask)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">epoll_pwait2</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event *events, <span class="hljs-type">int</span> maxevents, </span><br><span class="hljs-params">                 <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *_Nullable timeout, <span class="hljs-type">const</span> <span class="hljs-type">sigset_t</span> *_Nullable sigmask)</span>;<br><br><span class="hljs-comment">// event structure</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> {</span><br>     <span class="hljs-type">uint32_t</span>      events;  <span class="hljs-comment">/* Epoll events */</span><br>     <span class="hljs-type">epoll_data_t</span>  data;    <span class="hljs-comment">/* User data variable */</span><br>};<br><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">epoll_data</span> {</span><br>     <span class="hljs-type">void</span>     *ptr;<br>     <span class="hljs-type">int</span>       fd;<br>     <span class="hljs-type">uint32_t</span>  u32;<br>     <span class="hljs-type">uint64_t</span>  u64;<br>};<br></code></pre></td></tr></tbody></table></figure></li><li><p>epoll API核心概念是epoll实例，其是一个内核数据结构，从用户空间的角度来看，它可以被看做是<strong>两个列表</strong>的容器[6]：</p><ul><li>interest list（有时也被称作epoll set）：进程注册监视的文件描述符集合</li><li>ready list：已经准备好用于I/O操作的文件描述符集合，是interest list的一个子集</li></ul></li><li><p>创建并管理epoll实例的系统调用有：</p><ol><li>epoll_create（epoll_create1）：在内核中创建一个上下文（i.e. 实例）</li><li>epoll_ctl：从上下文中添加或者删除文件描述符</li><li>epoll_wait： 等待上下文中的事件</li></ol></li><li><p>水平触发（Level-triggered，<strong>LT</strong>） 和 边缘触发（edge-triggered，<strong>ET</strong>）</p><ul><li><p>两种事件触发机制</p></li><li><p>假设一个场景：</p><ol><li>在管道的<strong>读</strong>方的文件描述符 (rfd) 已经被注册到epoll实例中</li><li>在管道另一个写方往管道中写入2KB的数据</li><li>调用epoll_wait()，其将返回rfd作为就绪文件描述符</li><li>管道读方从rfd中读入1KB数据</li><li>再次调用epoll_wait()</li></ol><p>如果在上述场景中rfd文件描述符添加了<code>EPOLLET</code>（边缘触发）的标志，那么在Step 5中的<code>epoll_wait()</code>将会被阻塞，尽管管道中还有1KB字节未读。原因在于边缘触发仅在<strong>被监控的文件描述符发生改变时</strong>才会传递事件；当使用一个水平触发机制时（默认，不指定<code>EPOLLET</code>），服务器端不断地从<code>epoll_wait()</code>调用中唤醒，直到内核缓冲区被读完才结束。这样能保证让我们知道有哪些数据需要读取。</p></li></ul></li><li><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 修改上述的例子：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/epoll.h&gt;</span></span><br>...<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">events</span>[5];</span><br>  <span class="hljs-type">int</span> epfd = epoll_create(<span class="hljs-number">10</span>);<br>  ...<br>  ...<br>  <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) <br>  {<br>    <span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>    <span class="hljs-built_in">memset</span>(&amp;client, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> (client));<br>    addrlen = <span class="hljs-keyword">sizeof</span>(client);<br>    ev.data.fd = accept(sockfd,(<span class="hljs-keyword">struct</span> sockaddr*)&amp;client, &amp;addrlen);<br>    ev.events = EPOLLIN;<br>    epoll_ctl(epfd, EPOLL_CTL_ADD, ev.data.fd, &amp;ev);  <span class="hljs-comment">// 将事件添加到epoll实例中</span><br>  }<br>  <br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>){<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"round again"</span>);<br>  nfds = epoll_wait(epfd, events, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>);   <span class="hljs-comment">// wait</span><br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;nfds;i++) {   <span class="hljs-comment">// 遍历就绪事件，就绪事件已更新到events中，取出相应的文件描述符</span><br><span class="hljs-built_in">memset</span>(buffer,<span class="hljs-number">0</span>,MAXBUF);<br>read(events[i].data.fd, buffer, MAXBUF);<br><span class="hljs-built_in">puts</span>(buffer);<br>}<br>  }<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p><strong>Epoll() <span class="github-emoji"><span>🆚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Select()/Poll()</strong></p><ul><li><p><code>select()</code>/<code>poll()</code>仅提供一个API（当然也提供了一些宏定义），而<code>epoll()</code>提供了三个API</p></li><li><table><thead><tr><th>[10]</th><th><code>select()</code></th><th><code>poll()</code></th><th><code>epoll()</code></th></tr></thead><tbody><tr><td><strong>最大连接数</strong></td><td>1024<br>【数组】</td><td>与操作系统有关<br>【链表】</td><td>与操作系统有关<br></td></tr><tr><td><strong>FD激增后带来的I/O效率问题</strong></td><td>O(n) 线性下降</td><td>O(n) 线性下降</td><td>与活跃socket数据有关</td></tr><tr><td><strong>消息传递方式</strong></td><td>内核需要将消息传递到用户空间，<br>都需要内核拷贝动作</td><td>同<code>select()</code></td><td>通过内核和用户空间共享一块内存来实现的<br>mmap()文件映射内存加速与内核空间的消息传递</td></tr><tr><td><strong>遍历就绪文件描述符的方式</strong></td><td>基于轮询机制</td><td>基于轮询机制</td><td>基于操作系统的I/O通知机制</td></tr></tbody></table></li><li><p><code>epoll()</code>仅支持linux，跨平台可能存在不兼容的问题</p></li></ul><h2 id="link-Reference"><a href="#link-Reference" class="headerlink" title=":link: Reference:"></a><span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Reference:</h2><ol><li><a href="https://juejin.cn/post/7243609307856683067">I/O多路复用的三种实现 - 掘金 (juejin.cn)</a></li><li><a href="https://devarea.com/linux-io-multiplexing-select-vs-poll-vs-epoll/">Linux – IO Multiplexing – Select vs Poll vs Epoll – Developers Area (devarea.com)</a></li><li><a href="https://linux.die.net/man/2/select">select(2): synchronous I/O multiplexing - Linux man page (die.net)</a></li><li><a href="https://man7.org/linux/man-pages/man2/select.2.html">select(2) - Linux manual page (man7.org)</a></li><li><a href="https://man7.org/linux/man-pages/man2/poll.2.html">poll(2) - Linux manual page (man7.org)</a></li><li><a href="https://man7.org/linux/man-pages/man7/epoll.7.html">https://man7.org/linux/man-pages/man7/epoll.7.html</a></li><li><a href="https://man7.org/linux/man-pages/man2/epoll_create.2.html">https://man7.org/linux/man-pages/man2/epoll_create.2.html</a></li><li><a href="https://man7.org/linux/man-pages/man2/epoll_ctl.2.html">https://man7.org/linux/man-pages/man2/epoll_ctl.2.html</a></li><li><a href="https://man7.org/linux/man-pages/man2/epoll_wait.2.html">https://man7.org/linux/man-pages/man2/epoll_wait.2.html</a></li><li><a href="https://blog.csdn.net/qq_41951923/article/details/107886934">select、poll和epoll_epoll最大连接数_Cudi_的博客-CSDN博客</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>多路复用</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFLplusplus cmplog插桩解析</title>
    <link href="/2023/04/20/AFLplusplus-cmplog%E6%8F%92%E6%A1%A9%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/04/20/AFLplusplus-cmplog%E6%8F%92%E6%A1%A9%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL-’s-Cmplog插桩"><a href="#AFL-’s-Cmplog插桩" class="headerlink" title="AFL++’s Cmplog插桩"></a>AFL++’s Cmplog插桩</h1><h2 id="1-源码解析"><a href="#1-源码解析" class="headerlink" title="1. 源码解析"></a>1. 源码解析</h2><h3 id="afl-cc-c"><a href="#afl-cc-c" class="headerlink" title="afl-cc.c"></a>afl-cc.c</h3><ul><li>代码片段：</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (cmplog_mode) {<br><br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-fno-inline"</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LLVM_MAJOR &gt;= 11                                <span class="hljs-comment">/* use new pass manager */</span></span><br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-fexperimental-new-pass-manager"</span>;<br>      cc_params[cc_par_cnt++] =<br>          alloc_printf(<span class="hljs-string">"-fpass-plugin=%s/cmplog-switches-pass.so"</span>, obj_path);<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-fexperimental-new-pass-manager"</span>;<br>      cc_params[cc_par_cnt++] =<br>          alloc_printf(<span class="hljs-string">"-fpass-plugin=%s/split-switches-pass.so"</span>, obj_path);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-Xclang"</span>;<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-load"</span>;<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-Xclang"</span>;<br>      cc_params[cc_par_cnt++] =<br>          alloc_printf(<span class="hljs-string">"%s/cmplog-switches-pass.so"</span>, obj_path);<br><br>      <span class="hljs-comment">// reuse split switches from laf</span><br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-Xclang"</span>;<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-load"</span>;<br>      cc_params[cc_par_cnt++] = <span class="hljs-string">"-Xclang"</span>;<br>      cc_params[cc_par_cnt++] =<br>          alloc_printf(<span class="hljs-string">"%s/split-switches-pass.so"</span>, obj_path);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>cmplog-switches-pass.so</code>和<code>split-switches-pass.so</code>是两个关键的动态共享库</li></ul><h3 id="cmplog-switches-pass-cc"><a href="#cmplog-switches-pass-cc" class="headerlink" title="cmplog-switches-pass.cc"></a>cmplog-switches-pass.cc</h3><ul><li><p>CmplogSwitches类：</p><ul><li><p>构造函数：initInstrumentList()  ==&gt; 从环境变量 <code>AFL_LLVM_ALLOWLIST</code>/<code>AFL_LLVM_DENYLIST</code> <strong>解析</strong>白名单/黑名单</p></li><li><p><code>runOnModule() / run()</code> (LLVM &gt;= 11)</p></li><li><p><code>getPassName()</code>  ==&gt;  返回字符串 “cmplog switch split”，表示该Pass名字</p></li><li><p>私有方法：<code>hookInstrs()</code> ?</p></li></ul></li><li><p><code>hookInstrs()</code>：</p><ul><li><p>代码片段：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> LLVM_VERSION_MAJOR &gt;= 9</span><br>  FunctionCallee<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  Constant *<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      c1 = M.<span class="hljs-built_in">getOrInsertFunction</span>(<span class="hljs-string">"__cmplog_ins_hook1"</span>, VoidTy, Int8Ty, Int8Ty,<br>                                 Int8Ty<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LLVM_VERSION_MAJOR &lt; 5</span><br>                                 ,<br>                                 <span class="hljs-literal">NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      );<br>...<br></code></pre></td></tr></tbody></table></figure></li><li><p>c1、c2、c4、c8 ==&gt; <code>__cmplog_ins_hook1()</code> 、<code>__cmplog_ins_hook2()</code> 、<code>__cmplog_ins_hook4()</code>、<code>__cmplog_ins_hook8()</code></p><ul><li>hook函数在<code>afl-compiler-rt.o.c</code>中被定义</li><li>这里创建相应的函数函数</li><li>插桩函数分析 <span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li><li><p><code>__afl_cmp_map</code>：</p><ul><li>cmp引入的位图</li><li>作用？</li></ul></li><li><p>遍历IR中所有SwitchInst指令，将<strong>NumCases&gt;1</strong>的指令保存到switches向量中，调用vector的erase()和std::remove()完成SwitchInst指令的去重</p></li><li><p>然后遍历每一个SwitchInst指令（SI）：</p><ul><li>跳过SI当：1. 整数比特宽度&lt;16的条件分支（太简单了，很容易变异到） 或 2. Case数为0？</li><li>当比特宽度模8不为0时，比特宽度取值向上取整为8的整数倍，同时需要做强制类型转换（cast）</li><li>进行插桩，主要就是将<strong>条件值</strong>、<strong>case比较值</strong>和<strong>一个常数1</strong>传递给hook函数，伪代码大致如下：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(__afl_cmp_map){<br>    <span class="hljs-comment">// 是否需要强制类型转换?</span><br>    <span class="hljs-comment">// e.g. for case 1:</span><br>    __cmplog_ins_hook1((cast_size) condition, (cast_size) caseValue1, <span class="hljs-number">1</span>);<br>    __cmplog_ins_hook2((cast_size) condition, (cast_size) caseValue2, <span class="hljs-number">1</span>);<br>    ...<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><hr><ul><li><code>runOnModule()</code><ul><li>调用<code>hookInstrs()</code>函数</li></ul></li></ul><h3 id="split-switches-pass-so-cc"><a href="#split-switches-pass-so-cc" class="headerlink" title="split-switches-pass.so.cc"></a>split-switches-pass.so.cc</h3><ul><li><p>SplitSwitchesTransform类：</p><ul><li>构造函数：initInstrumentList()  ==&gt; 从环境变量 <code>AFL_LLVM_ALLOWLIST</code>/<code>AFL_LLVM_DENYLIST</code> <strong>解析</strong>白名单/黑名单</li><li><code>runOnModule() / run()</code> (LLVM &gt;= 11)</li><li><code>getPassName()</code>  ==&gt;  返回字符串 “splits switch constructs”，表示该Pass名字</li><li>CaseExpr结构体： 建立Case值到基本块的映射，CaseVector用来存储CaseExpr信息</li><li>私有方法：1、splitSwitches (bool)； 2、transformCmps (bool)；3、switchConvert<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li><li><p><code>runOnModule() / run()</code>：</p><ul><li>调用<code>splitSwitches(&amp;M);</code></li></ul></li><li><p><code>splitSwitches()</code>：</p><ul><li>遍历模块中的所有基本块，找到所有的switch指令，并保存到switches数组中，跳过NumCase&lt;1的分支</li><li>遍历每一个switch语句，具体来说：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;SI : switches) {<br><br>    BasicBlock *CurBlock = SI-&gt;<span class="hljs-built_in">getParent</span>();<br>    BasicBlock *OrigBlock = CurBlock;<br>    Function *  F = CurBlock-&gt;<span class="hljs-built_in">getParent</span>();<br>    <span class="hljs-comment">/* this is the value we are switching on */</span><br>    Value *     Val = SI-&gt;<span class="hljs-built_in">getCondition</span>();<br>    BasicBlock *Default = SI-&gt;<span class="hljs-built_in">getDefaultDest</span>();<br>    <span class="hljs-type">unsigned</span>    bitw = Val-&gt;<span class="hljs-built_in">getType</span>()-&gt;<span class="hljs-built_in">getIntegerBitWidth</span>();<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        if (!be_quiet)</span><br><span class="hljs-comment">          errs() &lt;&lt; "switch: " &lt;&lt; SI-&gt;getNumCases() &lt;&lt; " cases " &lt;&lt; bitw</span><br><span class="hljs-comment">                 &lt;&lt; " bit\n";</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">/* If there is only the default destination or the condition checks 8 bit or</span><br><span class="hljs-comment">     * less, don't bother with the code below. */</span><br>    <span class="hljs-keyword">if</span> (SI-&gt;<span class="hljs-built_in">getNumCases</span>() &lt; <span class="hljs-number">2</span> || bitw % <span class="hljs-number">8</span> || bitw &gt; <span class="hljs-number">64</span>) {<br><br>      <span class="hljs-comment">// if (!be_quiet) errs() &lt;&lt; "skip switch..\n";</span><br>      <span class="hljs-keyword">continue</span>;<br><br>    }<br><br>    <span class="hljs-comment">/* Create a new, empty default block so that the new hierarchy of</span><br><span class="hljs-comment">     * if-then statements go to this and the PHI nodes are happy.</span><br><span class="hljs-comment">     * if the default block is set as an unreachable we avoid creating one</span><br><span class="hljs-comment">     * because will never be a valid target.*/</span><br>    BasicBlock *NewDefault = <span class="hljs-literal">nullptr</span>;<br>    NewDefault = BasicBlock::<span class="hljs-built_in">Create</span>(SI-&gt;<span class="hljs-built_in">getContext</span>(), <span class="hljs-string">"NewDefault"</span>, F, Default); <span class="hljs-comment">// 在基本块Default前面插入一个名为NewDefault的基本块。创建新基本块的目的是啥？</span><br>    BranchInst::<span class="hljs-built_in">Create</span>(Default, NewDefault);  <span class="hljs-comment">// 创建 NewDefault ==&gt; Default 的控制流</span><br><br>    <span class="hljs-comment">/* Prepare cases vector. */</span><br>    CaseVector Cases;<br>    <span class="hljs-keyword">for</span> (SwitchInst::CaseIt i = SI-&gt;<span class="hljs-built_in">case_begin</span>(), e = SI-&gt;<span class="hljs-built_in">case_end</span>(); i != e;<br>         ++i)<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> LLVM_VERSION_MAJOR &gt;= 5</span><br>      Cases.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">CaseExpr</span>(i-&gt;<span class="hljs-built_in">getCaseValue</span>(), i-&gt;<span class="hljs-built_in">getCaseSuccessor</span>()));  <span class="hljs-comment">// getCaseSuccessor() 获取与case相关联的基本块指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      Cases.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">CaseExpr</span>(i.<span class="hljs-built_in">getCaseValue</span>(), i.<span class="hljs-built_in">getCaseSuccessor</span>()));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">/* bugfix thanks to pbst</span><br><span class="hljs-comment">     * round up bytesChecked (in case getBitWidth() % 8 != 0) */</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">bytesChecked</span><span class="hljs-params">((<span class="hljs-number">7</span> + Cases[<span class="hljs-number">0</span>].Val-&gt;getBitWidth()) / <span class="hljs-number">8</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   <span class="hljs-literal">false</span>)</span></span>;<br>    BasicBlock *      SwitchBlock =<br>        switchConvert(Cases, bytesChecked, OrigBlock, NewDefault, Val, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 调用switchConvert()</span><br><br>    <span class="hljs-comment">/* Branch to our shiny new if-then stuff... */</span><br>    BranchInst::<span class="hljs-built_in">Create</span>(SwitchBlock, OrigBlock);<span class="hljs-comment">// 创建新的控制流，新创建的SwitchBlock块 --&gt; OrigBlock</span><br><br>    <span class="hljs-comment">/* We are now done with the switch instruction, delete it. */</span><br>    CurBlock-&gt;<span class="hljs-built_in">getInstList</span>().<span class="hljs-built_in">erase</span>(SI);<span class="hljs-comment">// 删除原switch语句？ 也就是将原switch替换为SwitchBlock</span><br><br>    <span class="hljs-comment">/* we have to update the phi nodes! */</span><span class="hljs-comment">// 更新phi节点？</span><br>    <span class="hljs-keyword">for</span> (BasicBlock::iterator I = Default-&gt;<span class="hljs-built_in">begin</span>(); I != Default-&gt;<span class="hljs-built_in">end</span>(); ++I) {<br><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isa</span>&lt;PHINode&gt;(&amp;*I)) { <span class="hljs-keyword">continue</span>; }<br>      PHINode *PN = <span class="hljs-built_in">cast</span>&lt;PHINode&gt;(I);<br><br>      <span class="hljs-comment">/* Only update the first occurrence. */</span><br>      <span class="hljs-type">unsigned</span> Idx = <span class="hljs-number">0</span>, E = PN-&gt;<span class="hljs-built_in">getNumIncomingValues</span>();<br>      <span class="hljs-keyword">for</span> (; Idx != E; ++Idx) {<br><br>        <span class="hljs-keyword">if</span> (PN-&gt;<span class="hljs-built_in">getIncomingBlock</span>(Idx) == OrigBlock) {<br><br>          PN-&gt;<span class="hljs-built_in">setIncomingBlock</span>(Idx, NewDefault);<br>          <span class="hljs-keyword">break</span>;<br><br>        }<br><br>      }<br><br>    }<br><br>  }<br></code></pre></td></tr></tbody></table></figure></li><li><p><code>switchConvert()</code>：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BasicBlock *<span class="hljs-title">SplitSwitchesTransform::switchConvert</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    CaseVector Cases, std::vector&lt;<span class="hljs-type">bool</span>&gt; bytesChecked, BasicBlock *OrigBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    BasicBlock *NewDefault, Value *Val, <span class="hljs-type">unsigned</span> level)</span> </span>{<br><br>  <span class="hljs-type">unsigned</span>     ValTypeBitWidth = Cases[<span class="hljs-number">0</span>].Val-&gt;<span class="hljs-built_in">getBitWidth</span>();<br>  IntegerType *ValType =<br>      IntegerType::<span class="hljs-built_in">get</span>(OrigBlock-&gt;<span class="hljs-built_in">getContext</span>(), ValTypeBitWidth);<br>  IntegerType *        ByteType = IntegerType::<span class="hljs-built_in">get</span>(OrigBlock-&gt;<span class="hljs-built_in">getContext</span>(), <span class="hljs-number">8</span>);<br>  <span class="hljs-type">unsigned</span>             BytesInValue = bytesChecked.<span class="hljs-built_in">size</span>();<br>  std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; setSizes;<br>  std::vector&lt;std::set&lt;<span class="hljs-type">uint8_t</span>&gt; &gt; <span class="hljs-built_in">byteSets</span>(BytesInValue, std::<span class="hljs-built_in">set</span>&lt;<span class="hljs-type">uint8_t</span>&gt;());<br><br>  <span class="hljs-comment">/* for each of the possible cases we iterate over all bytes of the values</span><br><span class="hljs-comment">   * build a set of possible values at each byte position in byteSets */</span><br>  <span class="hljs-keyword">for</span> (CaseExpr &amp;Case : Cases) {<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> i = <span class="hljs-number">0</span>; i &lt; BytesInValue; i++) {<br><br>      <span class="hljs-type">uint8_t</span> byte = (Case.Val-&gt;<span class="hljs-built_in">getZExtValue</span>() &gt;&gt; (i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>;    <span class="hljs-comment">// 获取Case值的每一个字节，存放于byteSets中</span><br>      byteSets[i].<span class="hljs-built_in">insert</span>(byte);<br><br>    }<br><br>  }<br><br>  <span class="hljs-comment">/* find the index of the first byte position that was not yet checked. then</span><br><span class="hljs-comment">   * save the number of possible values at that byte position */</span><br>  <span class="hljs-type">unsigned</span> smallestIndex = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">unsigned</span> smallestSize = <span class="hljs-number">257</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> i = <span class="hljs-number">0</span>; i &lt; byteSets.<span class="hljs-built_in">size</span>(); i++) {  <span class="hljs-comment">// 这里的代码主要用于递归！！！</span><br><br>    <span class="hljs-keyword">if</span> (bytesChecked[i]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> (byteSets[i].<span class="hljs-built_in">size</span>() &lt; smallestSize) {<br><br>      smallestIndex = i;<br>      smallestSize = byteSets[i].<span class="hljs-built_in">size</span>();<br><br>    }<br><br>  }<br><br>  <span class="hljs-built_in">assert</span>(bytesChecked[smallestIndex] == <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-comment">/* there are only smallestSize different bytes at index smallestIndex */</span><br><br>  Instruction *Shift, *Trunc;<br>  Function *   F = OrigBlock-&gt;<span class="hljs-built_in">getParent</span>();<br>  BasicBlock * NewNode = BasicBlock::<span class="hljs-built_in">Create</span>(Val-&gt;<span class="hljs-built_in">getContext</span>(), <span class="hljs-string">"NodeBlock"</span>, F);<br>  Shift = BinaryOperator::<span class="hljs-built_in">Create</span>(Instruction::LShr, Val,<br>                                 ConstantInt::<span class="hljs-built_in">get</span>(ValType, smallestIndex * <span class="hljs-number">8</span>));  <span class="hljs-comment">// condition逻辑右移</span><br>  NewNode-&gt;<span class="hljs-built_in">getInstList</span>().<span class="hljs-built_in">push_back</span>(Shift);<br><br>  <span class="hljs-keyword">if</span> (ValTypeBitWidth &gt; <span class="hljs-number">8</span>) {<br><br>    Trunc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TruncInst</span>(Shift, ByteType);  <span class="hljs-comment">// 截断</span><br>    NewNode-&gt;<span class="hljs-built_in">getInstList</span>().<span class="hljs-built_in">push_back</span>(Trunc);<br><br>  } <span class="hljs-keyword">else</span> {<br><br>    <span class="hljs-comment">/* not necessary to trunc */</span><br>    Trunc = Shift;<br><br>  }<br><br>  <span class="hljs-comment">/* this is a trivial case, we can directly check for the byte,</span><br><span class="hljs-comment">   * if the byte is not found go to default. if the byte was found</span><br><span class="hljs-comment">   * mark the byte as checked. if this was the last byte to check</span><br><span class="hljs-comment">   * we can finally execute the block belonging to this case */</span><br><br>  <span class="hljs-keyword">if</span> (smallestSize == <span class="hljs-number">1</span>) {<br><br>    <span class="hljs-type">uint8_t</span> byte = *(byteSets[smallestIndex].<span class="hljs-built_in">begin</span>());<br><br>    <span class="hljs-comment">/* insert instructions to check whether the value we are switching on is</span><br><span class="hljs-comment">     * equal to byte */</span><br>    ICmpInst *Comp =<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">ICmpInst</span>(ICmpInst::ICMP_EQ, Trunc, ConstantInt::<span class="hljs-built_in">get</span>(ByteType, byte),<br>                     <span class="hljs-string">"byteMatch"</span>);<br>    NewNode-&gt;<span class="hljs-built_in">getInstList</span>().<span class="hljs-built_in">push_back</span>(Comp);<br><br>    bytesChecked[smallestIndex] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">bool</span> allBytesAreChecked = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">for</span> (std::vector&lt;<span class="hljs-type">bool</span>&gt;::iterator BCI = bytesChecked.<span class="hljs-built_in">begin</span>(),<br>                                     E = bytesChecked.<span class="hljs-built_in">end</span>();<br>         BCI != E; ++BCI) {<br><br>      <span class="hljs-keyword">if</span> (!*BCI) {<br><br>        allBytesAreChecked = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br><br>      }<br><br>    }<br><br>    <span class="hljs-comment">//    if (std::all_of(bytesChecked.begin(), bytesChecked.end(),</span><br>    <span class="hljs-comment">//                    [](bool b) { return b; })) {</span><br><br>    <span class="hljs-keyword">if</span> (allBytesAreChecked) {<br><br>      <span class="hljs-built_in">assert</span>(Cases.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>);<br>      BranchInst::<span class="hljs-built_in">Create</span>(Cases[<span class="hljs-number">0</span>].BB, NewDefault, Comp, NewNode);<br><br>      <span class="hljs-comment">/* we have to update the phi nodes! */</span><br>      <span class="hljs-keyword">for</span> (BasicBlock::iterator I = Cases[<span class="hljs-number">0</span>].BB-&gt;<span class="hljs-built_in">begin</span>();<br>           I != Cases[<span class="hljs-number">0</span>].BB-&gt;<span class="hljs-built_in">end</span>(); ++I) {<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isa</span>&lt;PHINode&gt;(&amp;*I)) { <span class="hljs-keyword">continue</span>; }<br>        PHINode *PN = <span class="hljs-built_in">cast</span>&lt;PHINode&gt;(I);<br><br>        <span class="hljs-comment">/* Only update the first occurrence. */</span><br>        <span class="hljs-type">unsigned</span> Idx = <span class="hljs-number">0</span>, E = PN-&gt;<span class="hljs-built_in">getNumIncomingValues</span>();<br>        <span class="hljs-keyword">for</span> (; Idx != E; ++Idx) {<br><br>          <span class="hljs-keyword">if</span> (PN-&gt;<span class="hljs-built_in">getIncomingBlock</span>(Idx) == OrigBlock) {<br><br>            PN-&gt;<span class="hljs-built_in">setIncomingBlock</span>(Idx, NewNode);<br>            <span class="hljs-keyword">break</span>;<br><br>          }<br><br>        }<br><br>      }<br><br>    } <span class="hljs-keyword">else</span> {<br><br>      BasicBlock *BB = switchConvert(Cases, bytesChecked, OrigBlock, NewDefault,<br>                                     Val, level + <span class="hljs-number">1</span>);<br>      BranchInst::<span class="hljs-built_in">Create</span>(BB, NewDefault, Comp, NewNode);<br><br>    }<br><br>  }<br><br>  <span class="hljs-comment">/* there is no byte which we can directly check on, split the tree */</span><br>  <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">// 二分法 分而治之！</span><br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; byteVector;<br>    std::<span class="hljs-built_in">copy</span>(byteSets[smallestIndex].<span class="hljs-built_in">begin</span>(), byteSets[smallestIndex].<span class="hljs-built_in">end</span>(),<br>              std::<span class="hljs-built_in">back_inserter</span>(byteVector));<br>    std::<span class="hljs-built_in">sort</span>(byteVector.<span class="hljs-built_in">begin</span>(), byteVector.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">uint8_t</span> pivot = byteVector[byteVector.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">/* we already chose to divide the cases based on the value of byte at index</span><br><span class="hljs-comment">     * smallestIndex the pivot value determines the threshold for the decicion;</span><br><span class="hljs-comment">     * if a case value</span><br><span class="hljs-comment">     * is smaller at this byte index move it to the LHS vector, otherwise to the</span><br><span class="hljs-comment">     * RHS vector */</span><br><br>    CaseVector LHSCases, RHSCases;<br><br>    <span class="hljs-keyword">for</span> (CaseExpr &amp;Case : Cases) {<br><br>      <span class="hljs-type">uint8_t</span> byte = (Case.Val-&gt;<span class="hljs-built_in">getZExtValue</span>() &gt;&gt; (smallestIndex * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>;<br><br>      <span class="hljs-keyword">if</span> (byte &lt; pivot) {<br><br>        LHSCases.<span class="hljs-built_in">push_back</span>(Case);<br><br>      } <span class="hljs-keyword">else</span> {<br><br>        RHSCases.<span class="hljs-built_in">push_back</span>(Case);<br><br>      }<br><br>    }<br><br>    BasicBlock *LBB, *RBB;<br>    LBB = switchConvert(LHSCases, bytesChecked, OrigBlock, NewDefault, Val,<br>                        level + <span class="hljs-number">1</span>);<br>    RBB = switchConvert(RHSCases, bytesChecked, OrigBlock, NewDefault, Val,<br>                        level + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">/* insert instructions to check whether the value we are switching on is</span><br><span class="hljs-comment">     * equal to byte */</span><br>    ICmpInst *Comp =<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">ICmpInst</span>(ICmpInst::ICMP_ULT, Trunc,<br>                     ConstantInt::<span class="hljs-built_in">get</span>(ByteType, pivot), <span class="hljs-string">"byteMatch"</span>);<br>    NewNode-&gt;<span class="hljs-built_in">getInstList</span>().<span class="hljs-built_in">push_back</span>(Comp);<br>    BranchInst::<span class="hljs-built_in">Create</span>(LBB, RBB, Comp, NewNode);<br><br>  }<br><br>  <span class="hljs-keyword">return</span> NewNode;<br><br>}<br><br></code></pre></td></tr></tbody></table></figure><ul><li>简单来说，其功能就是将switch分支细粒度化，比如：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// before spliting switches...</span><br>{<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x;<br>    <span class="hljs-keyword">switch</span>(x){<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x12345678</span>:<br>            <span class="hljs-built_in">do_something1</span>();<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x78563412</span>:<br>            <span class="hljs-built_in">do_something2</span>();<br>    }<br>    <br>}<br><span class="hljs-comment">// after spliting switches...</span><br>{<br>    <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">0</span>] == <span class="hljs-number">0x78</span>)<br>        <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">1</span>] == <span class="hljs-number">0x56</span>))<br>            <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">2</span>] == <span class="hljs-number">0x34</span>))<br>                <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">3</span>] == <span class="hljs-number">0x12</span>))<br>                    <span class="hljs-built_in">do_something1</span>();<br>    <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">0</span>] == <span class="hljs-number">0x12</span>)<br>        <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">1</span>] == <span class="hljs-number">0x34</span>))<br>            <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">2</span>] == <span class="hljs-number">0x56</span>))<br>                <span class="hljs-keyword">if</span>((u8*)x[<span class="hljs-number">3</span>] == <span class="hljs-number">0x78</span>))<br>                    <span class="hljs-built_in">do_something2</span>();<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="afl-complier-rt-o-c"><a href="#afl-complier-rt-o-c" class="headerlink" title="afl-complier-rt.o.c"></a>afl-complier-rt.o.c</h3><ul><li>以 <code>__cmplog_ins_hook1</code> 为例：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span> __cmplog_ins_hook1(<span class="hljs-type">uint8_t</span> arg1, <span class="hljs-type">uint8_t</span> arg2, <span class="hljs-type">uint8_t</span> attr) {<br><br>  <span class="hljs-comment">// fprintf(stderr, "hook1 arg0=%02x arg1=%02x attr=%u\n",</span><br>  <span class="hljs-comment">//         (u8) arg1, (u8) arg2, attr);</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">unlikely</span>(!__afl_cmp_map || arg1 == arg2)) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// Oops? got it!</span><br><br>  <span class="hljs-type">uintptr_t</span> k = (<span class="hljs-type">uintptr_t</span>)__builtin_return_address(<span class="hljs-number">0</span>); <span class="hljs-comment">// __builtin_return_address()返回调用函数的返回地址，0表示当前函数的返回地址，1表示当前函数的调用者的返回地址，以此类推，k为当前函数的返回地址。目的是啥？</span><br>  k = (<span class="hljs-type">uintptr_t</span>)(<span class="hljs-built_in">default_hash</span>((u8 *)&amp;k, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">uintptr_t</span>)) &amp; (CMP_MAP_W - <span class="hljs-number">1</span>));  <span class="hljs-comment">//指针（返回地址）进行哈希映射，然后与上CMP_MAP大小：65536</span><br><br>  u32 hits;<br><br>  <span class="hljs-keyword">if</span> (__afl_cmp_map-&gt;headers[k].type != CMP_TYPE_INS) {  <span class="hljs-comment">// 首先命中？</span><br><br>    __afl_cmp_map-&gt;headers[k].type = CMP_TYPE_INS;       <span class="hljs-comment">// type赋值</span><br>    hits = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化hits值</span><br>    __afl_cmp_map-&gt;headers[k].hits = <span class="hljs-number">1</span>; <span class="hljs-comment">// 命中值hits初始化为1</span><br>    __afl_cmp_map-&gt;headers[k].shape = <span class="hljs-number">0</span>; <span class="hljs-comment">// ？</span><br><br>  } <span class="hljs-keyword">else</span> {<br><br>    hits = __afl_cmp_map-&gt;headers[k].hits++;  <span class="hljs-comment">// 命中值hits++，将原来命中值赋值给局部变量hits</span><br><br>  }<br><br>  __afl_cmp_map-&gt;headers[k].attribute = attr;  <span class="hljs-comment">// attribute？貌似是1？</span><br><br>  hits &amp;= CMP_MAP_H - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 记录前 CMP_MAP_H（32）次的值，超过 CMP_MAP_H 会替换前面的值</span><br>  __afl_cmp_map-&gt;log[k][hits].v0 = arg1;<br>  __afl_cmp_map-&gt;log[k][hits].v1 = arg2;<br><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="2-Redqueen"><a href="#2-Redqueen" class="headerlink" title="2. Redqueen"></a>2. Redqueen</h2><h3 id="afl-fuzz-redqueen-c"><a href="#afl-fuzz-redqueen-c" class="headerlink" title="afl-fuzz-redqueen.c"></a>afl-fuzz-redqueen.c</h3><ul><li><p><code>colorization()</code> 填色函数 ==&gt; 生成污点信息</p><ul><li>通过<code>type_replace()</code>函数对输入的每一个字节进行同类型的替换，e.g. 该字节为大写字母，那么就将其替换为其他大写字母</li><li><code>pop_biggest_range()</code>得到ranges [双向链表，用来存储当前输入的切割范围] 最大的范围，判断对当前范围的字节改变是否会影响到路径的变化</li><li>最终得到的ranges链表中的每一个范围表示对该范围进行变异大概率能够引起覆盖率变化，由此生成taint信息</li></ul></li><li><p><code>colorization()</code>后得到一个污点后的输入buf和原始输入orig_buf，然后分别运行这两个测试用例，将cmp覆盖率信息保存以进行后续分析：</p><ul><li><strong>input-to-state</strong>阶段：调用<code>cmp_fuzz()</code>  TODO!</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>AFL++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFLplusplus自定义变异器—源码细节</title>
    <link href="/2023/03/09/AFLplusplus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E5%BC%82%E5%99%A8%E2%80%94%E6%BA%90%E7%A0%81%E7%BB%86%E8%8A%82/"/>
    <url>/2023/03/09/AFLplusplus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E5%BC%82%E5%99%A8%E2%80%94%E6%BA%90%E7%A0%81%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL-自定义变异器"><a href="#AFL-自定义变异器" class="headerlink" title="AFL++自定义变异器"></a>AFL++自定义变异器</h1><ul><li>支持C/C++库和Python模式<ul><li>C/C++ library (<code>*.so</code>)</li><li>Python module</li></ul></li></ul><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><strong>相关注意事项</strong>：</p><ol><li><code>custom_mutator_stage</code>在确定性变异之后启用；</li><li>在使用C/C++接口时，需要引入一个动态链接库（动态库路径存放在环境变量<code>AFL_CUSTOM_MUTATOR_LIBRARY</code>中），该库（部分）定义AFL++暴露出来的接口</li></ol><p>可参考 <code>custom_mutators/examples</code> 目录下的示例文件</p><hr><h2 id="2-APIs"><a href="#2-APIs" class="headerlink" title="2. APIs"></a>2. APIs</h2><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p><strong>C/C++：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">afl_custom_init</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed)</span></span>;<br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">afl_custom_fuzz_count</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> buf_size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">afl_custom_splice_optout</span><span class="hljs-params">(<span class="hljs-type">void</span> *data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">afl_custom_fuzz</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> buf_size, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> **out_buf, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *add_buf, <span class="hljs-type">size_t</span> add_buf_size, <span class="hljs-type">size_t</span> max_size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title">afl_custom_describe</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">size_t</span> max_description_len)</span></span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">afl_custom_post_process</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> buf_size, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> **out_buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">afl_custom_init_trim</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> buf_size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">afl_custom_trim</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> **out_buf)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">afl_custom_post_trim</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> success)</span></span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">afl_custom_havoc_mutation</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *buf, <span class="hljs-type">size_t</span> buf_size, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> **out_buf, <span class="hljs-type">size_t</span> max_size)</span></span>;<br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">afl_custom_havoc_mutation_probability</span><span class="hljs-params">(<span class="hljs-type">void</span> *data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">afl_custom_queue_get</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *filename)</span></span>;<br><span class="hljs-built_in">void</span> (*afl_custom_fuzz_send)(<span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> u8 *buf, <span class="hljs-type">size_t</span> buf_size);<br><span class="hljs-function">u8 <span class="hljs-title">afl_custom_queue_new_entry</span><span class="hljs-params">(<span class="hljs-type">void</span> *data, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *filename_new_queue, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *filename_orig_queue)</span></span>;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">afl_custom_introspection</span><span class="hljs-params">(<span class="hljs-type">my_mutator_t</span> *data)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">afl_custom_deinit</span><span class="hljs-params">(<span class="hljs-type">void</span> *data)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p><strong>python：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">seed</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuzz_count</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">return</span> cnt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">splice_optout</span>()<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuzz</span>(<span class="hljs-params">buf, add_buf, max_size</span>):<br>    <span class="hljs-keyword">return</span> mutated_out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">describe</span>(<span class="hljs-params">max_description_length</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"description_of_current_mutation"</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_process</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">return</span> out_buf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_trim</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">return</span> cnt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim</span>():<br>    <span class="hljs-keyword">return</span> out_buf<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_trim</span>(<span class="hljs-params">success</span>):<br>    <span class="hljs-keyword">return</span> next_index<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">havoc_mutation</span>(<span class="hljs-params">buf, max_size</span>):<br>    <span class="hljs-keyword">return</span> mutated_out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">havoc_mutation_probability</span>():<br>    <span class="hljs-keyword">return</span> probability <span class="hljs-comment"># int in [0, 100]</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">queue_get</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuzz_send</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">queue_new_entry</span>(<span class="hljs-params">filename_new_queue, filename_orig_queue</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">introspection</span>():<br>    <span class="hljs-keyword">return</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deinit</span>():  <span class="hljs-comment"># optional for Python</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure><h3 id="细节（C-x2F-C-）"><a href="#细节（C-x2F-C-）" class="headerlink" title="细节（C/C++）"></a>细节（C/C++）</h3><p><strong>变异部分</strong>：</p><ul><li><code>afl_custom_queue_get</code>：用于种子调度，决定该种子是否被模糊测试；</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 393 in afl-fuzz-one.c</span><br><span class="hljs-keyword">if</span> (unlikely(afl-&gt;custom_mutators_count)) {<br><br>    <span class="hljs-comment">/* The custom mutator will decide to skip this test case or not. */</span><br><br>    LIST_FOREACH(&amp;afl-&gt;custom_mutator_list, <span class="hljs-keyword">struct</span> custom_mutator, {<br><br>      <span class="hljs-keyword">if</span> (el-&gt;afl_custom_queue_get &amp;&amp;<br>          !el-&gt;afl_custom_queue_get(el-&gt;data, afl-&gt;queue_cur-&gt;fname)) {<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>      }<br><br>    });<br><br>  }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_fuzz_count</code>：fuzz次数，相当于stage_max；</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 1883 in afl-fuzz-one.c</span><br>      <span class="hljs-keyword">if</span> (el-&gt;afl_custom_fuzz_count) {<br><br>        afl-&gt;stage_max = el-&gt;afl_custom_fuzz_count(el-&gt;data, out_buf, len);<br><br>      } <span class="hljs-keyword">else</span> {<br><br>        afl-&gt;stage_max = saved_max;<br><br>      }<br>  ...<br><span class="hljs-comment">// Line 1905 in afl-fuzz-one.c</span><br>      <span class="hljs-keyword">if</span> (!el-&gt;afl_custom_fuzz_count) {<br><br>              <span class="hljs-comment">/* If we're finding new stuff, let's run for a bit longer, limits</span><br><span class="hljs-comment">                permitting. */</span><br><br>              <span class="hljs-keyword">if</span> (afl-&gt;queued_items != havoc_queued) {<br><br>                <span class="hljs-keyword">if</span> (perf_score &lt;= afl-&gt;havoc_max_mult * <span class="hljs-number">100</span>) {<br><br>                  afl-&gt;stage_max *= <span class="hljs-number">2</span>;<br>                  perf_score *= <span class="hljs-number">2</span>;<br><br>                }<br><br>                havoc_queued = afl-&gt;queued_items;<br><br>              }<br><br>            }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_fuzz</code>：执行特定的变异操作；</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 1932 in afl-fuzz-one.c</span><br>          <span class="hljs-type">size_t</span> mutated_size =<br>              el-&gt;afl_custom_fuzz(el-&gt;data, out_buf, len, &amp;mutated_buf, new_buf, target_len, max_seed_size);<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_havoc_mutation_probability</code>：表示<code>afl_custom_havoc_mutation</code>被调用的概率</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 2041 in afl-fuzz-one.c</span><br><span class="hljs-keyword">if</span> (el-&gt;stacked_custom &amp;&amp; el-&gt;afl_custom_havoc_mutation_probability) {<br><br>        el-&gt;stacked_custom_prob =<br>            el-&gt;afl_custom_havoc_mutation_probability(el-&gt;data);<br>        <span class="hljs-keyword">if</span> (el-&gt;stacked_custom_prob &gt; <span class="hljs-number">100</span>) {<br><br>          FATAL(<br>              <span class="hljs-string">"The probability returned by "</span><br>              <span class="hljs-string">"afl_custom_havoc_mutation_propability "</span><br>              <span class="hljs-string">"has to be in the range 0-100."</span>);<br><br>        }<br><br>      }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_havoc_mutation</code>：自定义<code>havoc</code>变异操作；</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 2106 in afl-fuzz-one.c</span><br>    <span class="hljs-keyword">if</span> (afl-&gt;custom_mutators_count) {<br><br>        LIST_FOREACH(&amp;afl-&gt;custom_mutator_list, <span class="hljs-keyword">struct</span> custom_mutator, {<br><br>          <span class="hljs-keyword">if</span> (el-&gt;stacked_custom &amp;&amp;<br>              rand_below(afl, <span class="hljs-number">100</span>) &lt; el-&gt;stacked_custom_prob) {<br><br>            u8    *custom_havoc_buf = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-type">size_t</span> new_len = el-&gt;afl_custom_havoc_mutation(<br>                el-&gt;data, out_buf, temp_len, &amp;custom_havoc_buf, MAX_FILE);<br>            <span class="hljs-keyword">if</span> (unlikely(!custom_havoc_buf)) {<br><br>              FATAL(<span class="hljs-string">"Error in custom_havoc (return %zu)"</span>, new_len);<br><br>            }<br><br>            <span class="hljs-keyword">if</span> (likely(new_len &gt; <span class="hljs-number">0</span> &amp;&amp; custom_havoc_buf)) {<br><br>              temp_len = new_len;<br>              <span class="hljs-keyword">if</span> (out_buf != custom_havoc_buf) {<br><br>                out_buf = afl_realloc(AFL_BUF_PARAM(out), temp_len);<br>                <span class="hljs-keyword">if</span> (unlikely(!afl-&gt;out_buf)) { PFATAL(<span class="hljs-string">"alloc"</span>); }<br>                <span class="hljs-built_in">memcpy</span>(out_buf, custom_havoc_buf, temp_len);<br><br>              }<br><br>            }<br><br>          }<br><br>        });<br><br>      }<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>初始化/清理部分</strong>：</p><ul><li><code>afl_custom_init</code>：进行一些初始化操作maybe? 初始化一些data数据？<code>mutator-&gt;data</code>为void类型数据，可以存放一些自定义的东西？</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 1838 in afl-fuzz.c</span><br>  setup_custom_mutators(afl);<br><span class="hljs-comment">// -------------------------------------</span><br><span class="hljs-comment">// Line 335 in afl-fuzz-mutators.c </span><br>  <span class="hljs-comment">/* Initialize the custom mutator */</span><br>  <span class="hljs-keyword">if</span> (mutator-&gt;afl_custom_init) {<br><br>    mutator-&gt;data = mutator-&gt;afl_custom_init(afl, rand_below(afl, <span class="hljs-number">0xFFFFFFFF</span>));<br><br>  }<br></code></pre></td></tr></tbody></table></figure><p>调用链：afl-fuzz.c main ==&gt; setup_custom_mutators ==&gt; load_custom_mutator ==&gt; afl_custom_init</p><ul><li><code>afl_custom_deinit</code>：进行mutator的一些清理程序</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 2648 in afl-fuzz.c </span><br>  destroy_custom_mutators(afl);<br></code></pre></td></tr></tbody></table></figure><p>调用链： afl-fuzz.c main ==&gt; destroy_custom_mutators ==&gt; afl_custom_deinit</p><hr><p><strong>Trim相关：</strong></p><p><span class="github-emoji"><span>🍖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 封装在<code>trim_case_custom</code>函数中（Line 350 in afl-fuzz-mutators.c中）</p><p>完整调用链：afl-fuzz-run.c (trim_case: 811) ==&gt; trim_case_custom ==&gt; xxx</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 823 in afl-fuzz-run.c</span><br>  <span class="hljs-keyword">if</span> (el-&gt;afl_custom_trim) {<br><br>        trimmed_case = trim_case_custom(afl, q, in_buf, el);<br>        custom_trimmed = <span class="hljs-literal">true</span>;<br><br>      }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_init_trim</code>：初始化操作？可以定义trimming步长 ==&gt; stage_max？返回trim次数？</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 365 in afl-fuzz-mutators.c (trim_case_custom())</span><br> afl-&gt;stage_cur = <span class="hljs-number">0</span>;<br> s32 retval = mutator-&gt;afl_custom_init_trim(mutator-&gt;data, in_buf, q-&gt;len);<br> <span class="hljs-keyword">if</span> (unlikely(retval) &lt; <span class="hljs-number">0</span>) {<br><br>   FATAL(<span class="hljs-string">"custom_init_trim error ret: %d"</span>, retval);<br><br> } <span class="hljs-keyword">else</span> {<br><br>   afl-&gt;stage_max = retval;  <span class="hljs-comment">// &lt;============ trimming step!</span><br><br> }<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_trim</code>：执行自定义的精简操作？</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 384 in afl-fuzz-mutators.c (trim_case_custom())</span><br><span class="hljs-keyword">while</span> (afl-&gt;stage_cur &lt; afl-&gt;stage_max) {<br><br>    u8 *retbuf = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">sprintf</span>(afl-&gt;stage_name_buf, <span class="hljs-string">"ptrim %s"</span>,<br>            u_stringify_int(val_buf, trim_exec));<br><br>    u64 cksum;<br><br>    <span class="hljs-type">size_t</span> retlen = mutator-&gt;afl_custom_trim(mutator-&gt;data, &amp;retbuf);<br>    ...<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl_custom_post_trim</code>：修剪后处理操作？判断修剪是否成功？并更改一些参数值？</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 476 in afl-fuzz-mutators.c (trim_case_custom())</span><br>afl-&gt;stage_cur = mutator-&gt;afl_custom_post_trim(mutator-&gt;data, <span class="hljs-number">1</span>);<br>  ...<br><span class="hljs-comment">// Line 488 in afl-fuzz-mutators.c (trim_case_custom())</span><br>s32 retval2 = mutator-&gt;afl_custom_post_trim(mutator-&gt;data, <span class="hljs-number">0</span>);<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>其他：</strong></p><ul><li><code>afl_custom_post_process</code>：post-processing函数，在AFL将测试用例写到磁盘之前调用（write_to_testcase?），以便执行被测目标</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 67 in afl-fuzz-run.c</span><br>u32 __attribute__((hot))<br>write_to_testcase(<span class="hljs-type">afl_state_t</span> *afl, <span class="hljs-type">void</span> **mem, u32 len, u32 fix) {<br>...<br>    <span class="hljs-comment">// Line 87 in afl-fuzz-run.c</span><br>    <span class="hljs-keyword">if</span> (el-&gt;afl_custom_post_process) {<br><br>        new_size =<br>            el-&gt;afl_custom_post_process(el-&gt;data, new_mem, new_size, &amp;new_buf);<br><br>        <span class="hljs-keyword">if</span> (unlikely(!new_buf || new_size &lt;= <span class="hljs-number">0</span>)) {<br><br>          new_size = <span class="hljs-number">0</span>;<br>          new_buf = new_mem;<br>          <span class="hljs-comment">// FATAL("Custom_post_process failed (ret: %lu)", (long</span><br>          <span class="hljs-comment">// unsigned)new_size);</span><br><br>        } <span class="hljs-keyword">else</span> {...}<br>...<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p><code>afl_custom_queue_new_entry</code>：允许额外的分析（例如，调用一个不同的工具，做一个不同的覆盖率，并将其保存在自定义变异器中）</p><p>调用链：afl-fuzz-init.c (pivot_inputs()) ==&gt; run_afl_custom_queue_new_entry() ==&gt; afl_custom_queue_new_entry()</p></li><li><p><code>afl_custom_describe</code>：给保存的文件名添加额外的描述</p></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Line 340 in afl-fuzz-bitmap.c(describe_op())</span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *custom_description = afl-&gt;current_custom_fuzz-&gt;afl_custom_describe(afl-&gt;current_custom_fuzz-&gt;data, size_left);<br>      <span class="hljs-keyword">if</span> (!custom_description || !custom_description[<span class="hljs-number">0</span>]) {<br><br>        DEBUGF(<span class="hljs-string">"Error getting a description from afl_custom_describe"</span>);<br>        <span class="hljs-comment">/* Take the stage name as description fallback */</span><br>        <span class="hljs-built_in">sprintf</span>(ret + len_current, <span class="hljs-string">"op:%s"</span>, afl-&gt;stage_short);<br><br>      } <span class="hljs-keyword">else</span> {<br><br>        <span class="hljs-comment">/* We got a proper custom description, use it */</span><br>        <span class="hljs-built_in">strncat</span>(ret + len_current, custom_description, size_left);  <span class="hljs-comment">// &lt;==== add describe here!</span><br><br>      }<br></code></pre></td></tr></tbody></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ol><li><p>AFL++ custom mutators本质上不是一个插件，而是在AFL++模糊测试阶段设置了若干函数端点，并以C/C++接口或者Python接口的方式暴露给用户，并提供给用户使用，旨在<strong>提高模糊器的功能性</strong></p></li><li><p>多参数项目对<code>fuzz_one()</code>进行了大改，主要包括两个部分：第一个部分从json文件中读入参数规范，第二个部分是根据参数类型选择特定的变异操作，AFL++ custom mutators虽然提供了变异方法，但该方法是在确定性变异后、havoc变异之前执行的，此外还可以在havoc阶段添加havoc_mutator，但：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 多参数项目拆解了确定性变异和havoc，根据参数的类型来pick适当的变异操作，因此将多参数变异添加到custom mutators里不会有啥效果；</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> AFL++ custom mutators的流程是：在进行确定性变异之后，如果定义了custom_mutator，那么就执行custom_mutator定义的变异，否则跳转到进行havoc变异，其本质还是原生AFL++对于单个输入的顺序变异方式，并没有体现多参数的性质。因此如果要实现多参数，还是需要对引擎进行修改；</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 解析参数规范的部分貌似无法添加到合适的接口上；</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>AFL++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReZZan:Efficient Greybox Fuzzing to Detect Memory Errors</title>
    <link href="/2023/01/10/ReZZan/"/>
    <url>/2023/01/10/ReZZan/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><ul><li><p>内存错误是安全漏洞的常见来源</p><ul><li>赋予攻击者更改内存内容的能力，可能会构成信息泄露和控制流劫持</li></ul></li><li><p>内存错误的静默性：</p><ul><li>内存错误不一定会导致程序立即崩溃</li><li>进行插桩监控内存情况：Sanitizer（e.g. AddressSanitizer）</li></ul></li><li><p>fork模式的模糊测试 + 内容错误sanitizers = 显著的性能开销</p><ul><li>AFL+AddressSanitizer：吞吐量降低了约58%</li><li>性能下降的原因：<strong>sanitizer的实现与模糊测试过程之间的不利交互</strong><ul><li>传统sanitizer使用<strong>disjoint metadata</strong>来跟踪内存状态</li><li>维护disjoint metadata会引入额外的开销</li></ul></li></ul></li><li><p>基于LBC和REST等工具首创的随机化嵌入式令牌（RET）的思想来对内存sanitizer进行设计</p></li><li><p>ReZZan = REt + fuZZing + sANitizer</p><ul><li>在fork模式的模糊测试下速度明显更快</li><li>1.27 × 原生AFL的运行（AddressSanitizer 2.36 x ）</li><li>额外提供一种简化配置，无需精确的边界检查，开销为1.14 x</li></ul></li></ul><h3 id="1-1-贡献"><a href="#1-1-贡献" class="headerlink" title="1.1 贡献"></a>1.1 贡献</h3><ul><li><p>提出了一种基于随机嵌入令牌（RET）概念的内存错误sanitizer的设计</p></li><li><p>调整设计，无需使用disjoint metadata；此外介绍了在基于RET的设计下用于字节精确内存错误检测的精细边界检查的概念</p></li><li><p>以ReZZan工具的形式实现了该设计，并将ReZZan与流行的灰盒模糊器集成在一起</p></li><li><p>对ASAN和FuZZan进行比较，显示该方法的优越性</p></li><li><p>项目<strong>开源</strong>：<a href="https://github.com/bajinsheng/ReZZan">https://github.com/bajinsheng/ReZZan</a></p></li></ul><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h2><p><strong>模糊测试：</strong></p><ul><li>fork server：</li></ul><p><img src="/2023/01/10/ReZZan/1.png"></p><hr><p><strong>内存错误Sanitizers：</strong></p><p><img src="/2023/01/10/ReZZan/2.png"></p><ul><li><p>专用Sanitizer和通用Sanitizer</p><p>专用Sanitizer：</p><ul><li>Stack金丝雀专门用于堆栈缓冲区溢出</li><li>LowFat和轻量级边界检查（LBC）专门用于溢出/下溢</li><li>FreeSentry专门用于UAF</li></ul><p>通用Sanitizer：</p><ul><li>AddressSanitizer：字节级精度检测所有类型的内存错误</li></ul></li><li><p>内存错误检测可能是部分检测或不精确检测：</p><ul><li>GWP-ASAN仅对随机选择的堆对象应用保护</li><li>LowFat/REST允许小的溢出（不与其他对象相交，即不影响其他对象变量值）</li></ul></li><li><p>AddressSanitizer：</p><ul><li><p>实施一种<strong>内存投毒</strong>（<em>memory poisoning</em>）的方法，其基本思想是：当使用一个内存错误能够访问该内存时，该内存则别标记为“中毒”，包括：</p><ul><li>对每个有效分配对象之间插入的小的<strong>REDZONE</strong>区域进行标记，该区域用于检测对象边界溢出/下溢错误</li><li>对<code>free()</code>的内存进行标记来检测UAF错误</li></ul></li><li><p>使用运行时支持库来<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在已分配对象之间插入redzone并对其标记；<span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 对<code>free()</code>的内存进行标记</p></li><li><p>对所有内存访问操作进行插桩，以检测内存是否中毒：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( poisoned ( p )) <span class="hljs-comment">// Instrumentation</span><br>error ();<br>* p = v ; <span class="hljs-comment">/* or */</span> v = * p ; <span class="hljs-comment">// Access </span><br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>AddressSanitizer的内存投毒</strong>：</p><ul><li><p>将程序的虚拟地址空间分为两个部分来实现内存投毒：应用程序内存(application memory) 和 影子内存(shadow memory)</p></li><li><p>影子内存用以跟踪应用程序内存中每个字节的中毒情况。因此，应用程序内存每8个字节都将映射到相应的影子字节，i.e. $addr_{shadow}=offset_{shadow}+(addr/8)$，这里的影子内存其实就是<strong>disjoint metadata</strong>的一种表现</p></li><li><p><strong>disjoint metadata</strong>（i.e. 一种额外的metadata）：<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 由Sanitizer维护；<span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 与应用程序内存/数据分离</p><ul><li>会带来额外的内存开销</li><li>影响了内存位置（i.e. 应用程序和影子内存是分离的）</li></ul></li></ul></li><li><p>内存投毒的替代实现——<strong>RET（随机化嵌入令牌）</strong>：</p><ul><li><p>poisoned内存由一个特殊的<strong>令牌</strong>表示，该令牌初始化为某个预定的随机数值，如果内存直接存储该随机值，则认为内存“中毒”了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">poisoned(p)=(*(p-p%<span class="hljs-keyword">sizeof</span>(Token))==NONCE)<br></code></pre></td></tr></tbody></table></figure></li><li><p>如果NONCE值与程序正常执行期间创建的合法值冲突，则可能会发生错误的检测</p></li><li><p><strong>REST</strong>使用一个非常大的令牌大小（整个512位缓存线）和一个强大的伪随机源</p><ul><li><p>大型（多字节）令牌会导致内存错误检测粒度降低（粗粒度）</p></li><li><p>e.g. 给定REST 512位（64字节）令牌，对malloc(27)的调用将：</p><p>(1) 将分配大小增加 64 - 27 = 37 字节</p><p>(2) 分配已对齐了一个64字节的对象</p><p>(3) 在64..127字节处存储一个token值来实现redzone</p><p>i.e. 27..63字节的溢出都不会访问令牌，即不会判断为内存错误，因此<strong>REST不是字节精确的</strong></p></li></ul></li><li><p>RET思想最早被<strong>LBC</strong>所使用，不像REST，LBC使用单字节（8位）令牌大小，允许进行字节精确的内存错误检测，但这也意味着碰撞不可避免；为了避免碰撞，LBC实现了一种混合方法，该方法保留了<strong>disjoint metadata</strong>，以区分冲突和合法的内存错误</p></li></ul></li></ul><hr><p><strong>问题描述：</strong></p><ul><li><p>现象：模糊测试和Sanitizer应该协同工作，但在实践中，模糊测试和Sanitizer的组合性能较差</p></li><li><p>根本原因：fork()系统调用的写时复制（<em>copy-on-write</em> COW）语义与Sanitizer对于任何<strong>disjoint metadata</strong>的初始化/使用之间的交互</p><ul><li>子进程因发生页面错误而拷贝页</li><li>fuzzing + sanitizer会导致页面错误的激增：一个用于已分配的对象，另一个用于<strong>disjoint metadata</strong></li></ul></li><li><p>AddressSanitizer还引入了与fork()相关的其他开销，e.g.复制内核数据结构（包括虚拟内存VMA、页表和相关拆卸开销）</p></li></ul><hr><p><strong>解决办法</strong>：</p><ul><li>一个想法是选择一个具有低内存开销和高局部性的内存错误Sanitizer</li><li>另一个想法是优化<strong>disjoint metadata</strong>的表示</li></ul><h3 id="2-1-我们的设计"><a href="#2-1-我们的设计" class="headerlink" title="2.1 我们的设计"></a>2.1 我们的设计</h3><ul><li><p>提出一种基于随机化嵌入令牌（RET）的变体，该变体不使用影子内存或其他disjoint metadata表示</p></li><li><p>关键思想是通过使用内存本身跟踪中毒状态</p><ul><li>避免任何的其他页错误（由disjoint metadata的初始化或访问导致的）</li><li>插桩检查和相应的内存操作不会带来额外的页错误</li></ul></li><li><p>设计的主要元素总结如下：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>令牌大小</strong></p><ul><li>某些现有的工具基于RET设计，如RESR（令牌大小512位）和LBC（令牌大小8位）</li><li>见解：对于模糊测试应用，可以容忍一些小级别的错误检测<ul><li>medium 令牌大小：64位</li><li>使用不同的随机化NONCE值重新执行测试用例可以在一定程序上减轻错误检测的开销</li></ul></li></ul><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>内存错误检测粒度</strong></p><ul><li>在基本的RET设计下，tokens需要存储在token大小对齐的边界上，也就是说64位tokens需要进行8字节对齐</li><li>对RET进行改进：对象边界信息直接<strong>编码</strong>到令牌表示本身中</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>硬件</strong></p><ul><li>REST：无标准硬件扩展；LBC：32位x86系统</li><li>本文提出的基于RET的设计：针对标准硬件（x86_64）和标准模糊器设计</li></ul></li></ul><h2 id="3-基本内存错误检测"><a href="#3-基本内存错误检测" class="headerlink" title="3. 基本内存错误检测"></a>3. 基本内存错误检测</h2><ul><li>使用以下结构类型来定义RET：</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Token</span> {</span> <span class="hljs-type">uint64_t</span> random; };<br></code></pre></td></tr></tbody></table></figure><hr><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>插桩模式：</strong></p><ul><li>基本方法：转换程序（e.g.使用一个LLVM编译器基础设施<strong>pass</strong>）来在每个内存访问之前插入插桩代码</li><li>插桩内容：检查是否违反给定的安全属性（在设计的sanitizer中，该安全属性是相应访问的内容是否被poisoned）</li></ul><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p><p><img src="/2023/01/10/ReZZan/3.png"></p><ul><li><img src="/2023/01/10/ReZZan/4.png"></li></ul><blockquote><p>第4行内存间接引用不会产生任何其他页错误，而第5-6行的错误检查访问内存以检索存储在全局变量中的NONCE值，而NONCE存储在单个位置，因此这里<strong>最多会额外产生一个页错误</strong></p></blockquote><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>运行时支持：</strong></p><ul><li><p>加强内存安全，修改了运行时环境以毒化redzone和free内存</p></li><li><p>每一个对象类处理方式不同：</p><p><strong>堆分配对象</strong>：e.g. <code>malloc</code>, <code>realloc</code>, <code>new</code>等都被替换成为每一个分配目标后添加了redzone的版本，redzones的实现与其他内存错误sanitizer相似，但也有不同：</p><ol><li>Poisoning是通过将NONCE-初始化令牌直接写入redzone内存来实现的</li><li>redzone的大小是1个或者2个tokens（取决于对齐）</li><li>redzone放置在目标的最后，通过前一个对象的redzone来检测Underflows</li></ol><p>实现了一个简单的自定义内存分配器：连续分配目标</p><p>堆内存释放：释放的目标相应内存填充为一个NONCE-初始化的token；维护了一个隔离区（本质上是一个队列），隔离区存放了释放的内存目标，目的是延迟重新分配，从而更可能检测到<code>reuse-after-free</code>。从隔离区删除对象以便重新分配，相应的内存在使用前清零以“unpoison”该内存。</p><hr><p><strong>栈分配对象</strong>：使用LLVM pass实现转换</p><ol><li>修改分配大小：包含原始分配的大小和一个redzone内存</li><li>redzone内存将写入一个NONCE-初始化token，剩余内存全部置0</li></ol><hr><p><strong>全局变量</strong>： 使用LLVM pass实现转换</p><p>具体操作和栈分配对象相似，不再赘述</p></li></ul><h2 id="4-改进的边界检查"><a href="#4-改进的边界检查" class="headerlink" title="4. 改进的边界检查"></a>4. 改进的边界检查</h2><ul><li><p>基本思想：除了随机化的NONCE之外，还将对象边界信息<strong>编码</strong>存进嵌入令牌中，该边界信息可以在运行时检索</p></li><li><p>包含两个组件：</p><ul><li><em>random</em>：NONCE值</li><li>boundary：目标边界的编码形式：</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">size mod <span class="hljs-title function_">sizeof</span><span class="hljs-params">(Token)</span>  <span class="hljs-comment">// size是目标的大小</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>改进的令牌是由具有两个位字段的结构表示：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Token</span> {</span><br><span class="hljs-type">uint64_t</span> random :<span class="hljs-number">61</span>; <span class="hljs-comment">// NONCE</span><br><span class="hljs-type">uint64_t</span> boundary :<span class="hljs-number">3</span>; <span class="hljs-comment">// Boundary encoding</span><br>};<br></code></pre></td></tr></tbody></table></figure><p><em>boundary</em>字段至少需要<strong>3位</strong>来表示所有可能的边界值，那么<em>random</em>字段就只能缩减为<strong>61位</strong>（64-3）</p></li></ul><hr><ul><li>使用额外的边界检查对内存访问进行插桩，基本思想如下图所示：</li></ul><p><img src="/2023/01/10/ReZZan/5.png"></p><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 假设目标大小不是一个令牌大小（8字节）的整数倍，e.g. (<em>size</em> mod sizeof(Token)) = 5，也就是要使用一个额外的sizeof(Token)-5=3字节的<strong>填充</strong>，在该填充中的溢出无法被基本的RET检测到，为了检测到这种溢出，我们对内存访问进行插桩以实施一个额外的边界检测：</p><ol><li><p>检查内存中当前word的下一个word[8字节]</p></li><li><p>如果下一个word不是一个token(i.e.随机比特与NONCE不相同)，那么内存访问是允许的</p></li><li><p>否则，检索边界字段并将其余内存访问范围 $lb…ub$ 进行比较，当下面条件不成立时，即发生了越界操作：</p><p><img src="/2023/01/10/ReZZan/6.png"></p></li></ol><p>由于检查的是下一个word，因此基本上绕过了填充空间不足的问题，在图3的示例中，任何与填充重叠的内存访问都不会满足，因此可以检测到溢出</p><hr><p><strong>插桩模式：</strong></p><p><img src="/2023/01/10/ReZZan/3.png"></p><ul><li>图2的第9-13行为边界检查的插桩，这里假设该内存访问已经通过RET检查，保证了ub不包含token</li></ul><blockquote><p>下一个word可能位于不同的页面，因此可能无法访问。这可以通过禁用对页边界的精确检查来进行处理，随之带来的就是精确度的降低；或者所有映射都可以通过一个NONCE-初始化页进行扩展，可以通过使用信号处理器来检测边界检查引起的故障，然后“按需”扩展相应的映射来实现</p></blockquote><h2 id="5-实验设置"><a href="#5-实验设置" class="headerlink" title="5. 实验设置"></a>5. 实验设置</h2><ul><li><p>x86_64上实现了REt+fuZZing+sANitzer（ReZZan）：</p><ul><li>ReZZan：细粒度内存错误检测，包括RET（第三节）和字节准确的边界检测（第四节）</li><li>ReZZan<sub>lite</sub>：减弱粒度的内存错误检测，仅包括RET。此版本速度更快，但无法检测到对象填充中的某些溢出</li></ul></li><li><p>ReZZan的实现包括两个部分：</p><ul><li>LLVM Pass：<ul><li>转换所有内存操作（e.g. <code>load/store</code>）以插入RET和边界检查插桩。对于ReZZan<sub>lite</sub>来说，边界检查将被忽略</li><li>将所有栈分配操作（e.g. <code>alloca</code>）和全局变量转换为使用redzone保护的新版本</li></ul></li><li>运行时库：<ul><li>实现了替换堆分配函数（例如<code>malloc</code>、<code>free</code>等），替换的函数可以插入redzone以及poison释放的内存</li></ul></li></ul></li></ul><hr><h3 id="研究问题"><a href="#研究问题" class="headerlink" title="研究问题"></a>研究问题</h3><ul><li><p>主要假说：基于RET的消毒剂设计可以</p><ol><li>在模糊测试环境下表现出较低的性能开销</li><li>实现与更传统的Sanitizer设计（如ASAN）类似的内存错误检测能力</li></ol></li><li><p>六个研究问题：</p></li></ul><table><thead><tr><th>序号</th><th>描述</th></tr></thead><tbody><tr><td>RQ1 - 检测能力</td><td>ReZZan是否检测到与ASan相同类型的内存错误？</td></tr><tr><td>RQ2 - 执行速度</td><td>在模糊测试环境下，ReZZan比ASan快多少？</td></tr><tr><td>RQ3 - 分支覆盖</td><td>ReZZan的分支覆盖范围与ASan相比如何？</td></tr><tr><td>RQ4 - 漏洞发现有效性</td><td>与ASan相比，ReZZan可以更快地暴露bug吗？</td></tr><tr><td>RQ5 - 灵活性</td><td>ReZZan可以用来模糊大型程序吗？ReZZan与其他模糊器兼容吗？</td></tr><tr><td>RQ6 - 误报</td><td>ReZZan在实际执行环境中的错误检测率是多少？</td></tr></tbody></table><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><p><strong>实验环境：</strong></p><ul><li>Intel Xeon CPU E5-2660v3：28个物理内核、56个逻辑内核，2.4GHz</li><li>64GB RAM</li><li>Ubuntu 16.04（64位）LTS（最大利用率为26个内核）</li></ul><hr><p><strong>基线：</strong></p><ul><li>ASan（LLVM-12）、FuZZan（具有动态元数据结构切换模式）</li><li>ASan和FuZZan都：<ol><li>仍在维护</li><li>支持x86_64</li><li>可以与现有的模糊器集成</li></ol></li></ul><hr><p><strong>模糊测试引擎</strong>：</p><ul><li>AFL（v2.57b）<ul><li>是大多数现代模糊器的基础</li><li>评估所使用的所有sanitizer都支持</li></ul></li></ul><hr><p><strong>基准套件</strong>：</p><ul><li>RQ1：Juliet基准套件</li><li>RQ2/RQ3：cxxfilt、nm、objdump、size（均来自binutils-2.31）、file（来自coreutils版本5.35）、jerryscript（版本2.4.0）、mupdf（版本1.19.0）、，libpng（版本1.6.38）、openssl（版本1.0.1f）、sqlite3（版本3.36.0）和tcpdump（版本4.10.0）</li><li>RQ4：谷歌的fuzzer-test-suite2</li></ul><p>选择相同的初始种子语料库，如果没有提供输入则使用空文件</p><hr><p><strong>实验设置：</strong></p><ul><li>每个实验进行24小时，重复20次</li></ul><h2 id="6-评估结果"><a href="#6-评估结果" class="headerlink" title="6. 评估结果"></a>6. 评估结果</h2><h3 id="RQ-one-检测能力"><a href="#RQ-one-检测能力" class="headerlink" title="RQ:one: 检测能力"></a>RQ<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 检测能力</h3><p><img src="/2023/01/10/ReZZan/7.png"></p><ul><li>ReZZan和ReZZan<sub>lite</sub>对于underflow detection的检测性能略低于ASan，这是因为ASan默认为堆栈对象使用double-wide（32字节）红区。当ReZZan配置类似时，也能100%检测下溢错误</li></ul><p><img src="/2023/01/10/ReZZan/8.png"></p><blockquote><p>对于Juliet测试套件中的内存错误错误（CWE 121、122、124、126、127、416），ReZZan和ReZZan<sub>lite</sub>分别通过99.04%和87.89%的坏测试用例</p></blockquote><h3 id="RQ-two-执行速度"><a href="#RQ-two-执行速度" class="headerlink" title="RQ:two: 执行速度"></a>RQ<span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 执行速度</h3><p><img src="/2023/01/10/ReZZan/9.png"></p><p><img src="/2023/01/10/ReZZan/10.png"></p><ul><li>页错误</li></ul><p><img src="/2023/01/10/ReZZan/11.png"></p><blockquote><p>当与模糊测试相结合时，ReZZan（1.27×）和ReZZan<sub>lite</sub>（1.14×）的开销低于传统的Sanitizer ASan（2.36×）和FuZZan（2.00×）。ReZZan和ReZZan<sub>lite</sub>的性能与没有任何内存错误sanitization的模糊测试相当，页面错误的数量也是如此.</p></blockquote><h3 id="RQ-three-分支覆盖"><a href="#RQ-three-分支覆盖" class="headerlink" title="RQ:three: 分支覆盖"></a>RQ<span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分支覆盖</h3><p><img src="/2023/01/10/ReZZan/12.png"></p><blockquote><p>平均而言，ReZZan和ReZZan<sub>lite</sub>实现了与Native类似的分支覆盖。ReZZan的模糊化活动在24小时内探索了比ASan多5.54%的代码分支。</p></blockquote><h3 id="RQ-four-漏洞寻找有效性"><a href="#RQ-four-漏洞寻找有效性" class="headerlink" title="RQ:four: 漏洞寻找有效性"></a>RQ<span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 漏洞寻找有效性</h3><p><img src="/2023/01/10/ReZZan/13.png"></p><blockquote><p>ReZZan比ASan快3.68倍。在实践中，ReZZan还可以检测到比ReZZan<sub>lite</sub>更多的错误。</p></blockquote><h3 id="RQ-five-灵活性"><a href="#RQ-five-灵活性" class="headerlink" title="RQ:five: 灵活性"></a>RQ<span class="github-emoji"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 灵活性</h3><ul><li><p><strong>模糊器的支持：</strong></p><ul><li>与AFL++集成：</li></ul><p><img src="/2023/01/10/ReZZan/14.png"></p></li><li><p><strong>持久模式模糊测试：</strong></p><ul><li>FuzzBench提供的harness作为测试对象</li><li>ReZZan和ReZZan<sub>lite</sub>的性能略有下降</li><li>结果表明：1. ReZZan可以应用于fork模式和持久模式；2. ReZZen在较长运行时间内的其性能最终将接近ASan</li></ul></li><li><p><strong>可扩展性：</strong></p><p><img src="/2023/01/10/ReZZan/15.png"></p><ul><li><p>考虑到Firefox的规模，与其他基准相比，总体模糊吞吐量要慢得多。尽管如此，ReZZan和ReZZan<sub>lite</sub>仍以112.60%和114.86%的改善率优于ASan</p></li><li><p>证明ReZZan是可扩展的</p></li></ul></li></ul><h3 id="RQ-six-误报"><a href="#RQ-six-误报" class="headerlink" title="RQ:six: 误报"></a>RQ<span class="github-emoji"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 误报</h3><ul><li>ReZZan设计允许少量误报</li><li>实验包括超过19200小时（≈2.2年）CPU时间，在此期间没有观察到误报</li><li>预期是数十年的CPU时间才可能观察到第一次误报</li></ul><h2 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h2><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 亮点：</p><ul><li>论文分析了现有Sanitizer与基于fork模式的模糊器结合时对模糊测试性能的影响，主要体现在：1. COW机制导致频繁的页错误；2.disjoint metadata，因此与fork()兼容性不好</li><li>论文提出了基于RET和改进的细粒度边界检测的Sanitizer——ReZZan，并通过详细的实验论证ReZZan的性能</li><li>实验部分很详细</li><li>项目开源：<a href="https://github.com/bajinsheng/ReZZan">https://github.com/bajinsheng/ReZZan</a></li></ul><p>不足：</p><ul><li>仅支持llvm-12，而且wrapper的一些细节处理不是很好</li><li><strong>目测</strong>应该不会有ASan那么详细的错误报告，也就是说ReZZan仅会异常结束程序，还需要使用ASan查看具体是何种漏洞类型（待验证）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出AFL插桩</title>
    <link href="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/"/>
    <url>/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL插桩剖析"><a href="#AFL插桩剖析" class="headerlink" title="AFL插桩剖析"></a>AFL插桩剖析</h1><h2 id="I-前置知识"><a href="#I-前置知识" class="headerlink" title="I. 前置知识"></a>I. 前置知识</h2><ul><li>编译器产生可执行文件的流程如下图1、2所示（以gcc编译器为例，clang同理）：</li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/1.png"></p><center>图1 gcc编译器工作流程（顶层架构）</center><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/2.png"></p><center>图2 clang编译器工作流程（顶层架构）</center><ul><li>主流的编译器【图1中第二个阶段】包括三个组件：<strong>前端</strong>、<strong>中间端</strong>和<strong>后端</strong> [1]<ul><li>前端：读取源文件并对其进行分析，通常是将源码转化为标准抽象语法树（AST）</li><li>中间端：进行源码优化，通常是使用生成的某种中间表示【GCC中是GIMPLE/RTL；Clang中是IR】，并根据该中间表示进行优化</li><li>后端：使用优化后的中间表示来生成对应目标架构的汇编代码</li></ul></li></ul><h3 id="1-GCC"><a href="#1-GCC" class="headerlink" title="1. GCC"></a>1. GCC</h3><ul><li>GCC 4.1架构图：</li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/4.png"></p><center>图3 GCC 4.1架构图</center><h4 id="四个阶段"><a href="#四个阶段" class="headerlink" title="四个阶段"></a>四个阶段</h4><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/5.png"></p><center>图4 编译器在编译链接时的具体流程[8]</center><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -E afl_inst_test.c <span class="hljs-comment"># 预处理</span><br>$ gcc -S afl_inst_test.c <span class="hljs-comment"># 编译</span><br>$ gcc -c afl_inst_test.c <span class="hljs-comment"># 汇编 =&gt; 目标文件 or as afl_inst_test.s -o afl_inst_test.o</span><br>$ ld -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/cclTw8TB.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. ./afl_inst_test.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o -o afl_inst_test <span class="hljs-comment"># 链接！[10]</span><br>$ afl_inst_test<br>This is a <span class="hljs-built_in">test</span>!<br>Please give me an input number:-1<br>-1 is a negative number~<br></code></pre></td></tr></tbody></table></figure><h4 id="前端分析"><a href="#前端分析" class="headerlink" title="前端分析"></a>前端分析</h4><ul><li><p>对源代码进行<strong>预处理</strong>、<strong>语法分析</strong>、<strong>语义分析</strong>，同时会生成抽象语法树<strong>AST</strong></p></li><li><p>parse the source code  <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  即将源代码转化为有意义的数据（有意义是针对机器来说的），表示我们可读的源代码究竟想要表达啥</p></li></ul><hr><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>GCC本身无法输出生成的AST [2]，这里我们展示GCC编译过程中生成的CFG [3]</strong> ：</p><ol start="0"><li>源代码：</li></ol><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// afl_inst_test.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>{<br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">0</span>){<br><span class="hljs-keyword">return</span> -a;<br>}<br><span class="hljs-keyword">return</span> a;<br>}<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span>{<br><span class="hljs-type">int</span> a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is a test!\nPlease give me an input number:"</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a);<br><span class="hljs-comment">/* simulating branches */</span><br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">0</span>){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d is a positive number~"</span>, a);<br>}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a &lt; <span class="hljs-number">0</span>){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d is a negative number~"</span>, a);<br>}<span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"zero detected!"</span>);<br>}<br><span class="hljs-comment">/* simulating a function call */</span><br>fun(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ol><li>产生AST对应的<code>.dot</code>文件：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc afl_inst_test.c -fdump-tree-all-graph<br>$ <span class="hljs-built_in">ls</span><br>afl_inst_test.c<br>afl_inst_test.c.001t.tu<br>afl_inst_test.c.002t.class<br>afl_inst_test.c.003t.original<br>...<br>afl_inst_test.c.227t.optimized<br>afl_inst_test.c.227t.optimized.dot<br>afl_inst_test.c.311t.statistics<br>a.out<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>使用<code>dot</code>程序将main函数对应<code>.dot</code>转化为可视图：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dot -Tpng afl_inst_test.c.011t.cfg.dot -o main.png<br></code></pre></td></tr></tbody></table></figure><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/3.png"></p><center>图5 示例CFG</center><h4 id="中间端优化"><a href="#中间端优化" class="headerlink" title="中间端优化"></a>中间端优化</h4><ul><li>GCC中间端包括两个部分：<strong>GIMPLE</strong> 和 <strong>RTL</strong></li></ul><hr><p><strong>GIMPLE：</strong></p><ul><li><p>派生自GCC <strong>GENERIC</strong>（也是一种中间表示；最初，不同的GCC前端会生成依赖于架构的树表示，而GENERIC是作为与平台无关的树表示而引入的，以简化前端开发过程。<strong>GENERIC</strong>的目标是生成<strong>GIMPLE</strong> [5]）</p></li><li><p>three-address表示：</p><ul><li>将<strong>GENERIC</strong>表达式拆成不超过3个操作数的元组（除了函数调用）</li></ul></li><li><p>引入<strong>暂存器</strong>来保存计算复杂表达式所需的中间值，GENERIC中使用的控制结构降级为<strong>条件跳转</strong>，词法<strong>作用域被移除</strong>，而异常区域则被转换为边上的异常区域树</p></li><li><p>使用一个”gimplifier”将<strong>GENERIC</strong>转化为<strong>GIMPLE</strong></p></li><li><p>包括”<strong>High GIMPLE</strong>“和”<strong>Low GIMPLE</strong>“</p><ul><li>High GIMPLE包含一些容器语句，如词法范围和嵌套表达式，派生自<strong>前端AST树</strong>或<strong>GENERIC</strong>，然后基于High GIMPLE生成Low GIMPLE</li><li>Low GIMPLE则显示所有控制和异常表达式的隐含跳转</li></ul></li><li><p>C和C++前端直接从前端AST树转化为<strong>GIMPLE</strong>，而不是转化为<strong>GENERIC</strong></p></li><li><p>使用标志<code>-fdump-tree-gimple</code>来生成类C的表示</p></li></ul><p><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 说白了，<strong>GIMPLE</strong>就是干了两件事：</p><p>​<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 删除高级结构，如for，while循环【用goto和跳转替换】</p><p>​<span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 简化表达式（通过引入临时变量）</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 可以在Low GIMPLE实现GIMPLE层级的Pass！</p><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code> if (a || b) stmt;</code>  ==&gt;</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (a) <span class="hljs-keyword">goto</span> L1;<br><span class="hljs-keyword">if</span> (b) <span class="hljs-keyword">goto</span> L1; <span class="hljs-keyword">else</span> <span class="hljs-keyword">goto</span> L2;<br>L1:<br>stmt;<br>L2:<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>GCC生成GIMPLE</strong>：</p><p>Low GIMPLE:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc afl_inst_test.c -fdump-tree-gimple<br>$ <span class="hljs-built_in">cat</span> afl_inst_test.c.004t.gimple <br>fun (int a)<br>{<br>  int D.2258;<br><br>  <span class="hljs-keyword">if</span> (a &gt; 0) goto &lt;D.2256&gt;; <span class="hljs-keyword">else</span> goto &lt;D.2257&gt;;<br>  &lt;D.2256&gt;:<br>  D.2258 = -a;<br>  <span class="hljs-built_in">return</span> D.2258;<br>  &lt;D.2257&gt;:<br>  D.2258 = a;<br>  <span class="hljs-built_in">return</span> D.2258;<br>}<br>...<br></code></pre></td></tr></tbody></table></figure><p>High GIMPLE:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc afl_inst_test.c -fdump-tree-gimple-raw<br>$ <span class="hljs-built_in">cat</span> afl_inst_test.c.004t.gimple<br>fun (int a)<br>gimple_bind &lt;<br>  int D.2258;<br><br>  gimple_cond &lt;gt_expr, a, 0, &lt;D.2256&gt;, &lt;D.2257&gt;&gt;<br>  gimple_label &lt;&lt;<span class="hljs-string">D.2256&gt;&gt;</span><br><span class="hljs-string">  gimple_assign &lt;negate_expr, D</span>.2258, a, NULL, NULL&gt;<br>  gimple_return &lt;D.2258 NULL&gt;<br>  gimple_label &lt;&lt;<span class="hljs-string">D.2257&gt;&gt;</span><br><span class="hljs-string">  gimple_assign &lt;parm_decl, D</span>.2258, a, NULL, NULL&gt;<br>  gimple_return &lt;D.2258 NULL&gt;<br>&gt;<br>...<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>RTL:</strong></p><ul><li>寄存器转换语言 <em>Register Transfer Language</em>，与汇编语言很接近</li><li>表示一个具有无限数量寄存器的抽象机器，结构类似于Lisp和C语言的混合</li><li>在生成<strong>RTL</strong>代码后，GCC编译器在将其转换到汇编语言之前进行了不同的<strong>底层优化</strong> [7]</li><li>由于<strong>RTL</strong>表示的生成和优化的程序在编译过程的后端，这意味着它依赖于硬件，而不包含程序的所有信息</li></ul><p><span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 说白了，<strong>RTL</strong>就是干了两件事：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 将<strong>GIMPLE</strong>转化为与硬件相关的RTL语言</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在RTL基础上进行<strong>底层优化</strong></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 同样的，我们也可以实现基于RTL层级的Pass！</p><p><span class="github-emoji"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>b = a - 1</code>  ==&gt;</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(set (reg/v:SI 59 [ b ])<br>     (plus:SI (reg/v:SI 60 [ a ]<br>              (const_int -1 [0xffffffff]))))<br></code></pre></td></tr></tbody></table></figure><ul><li>RTL中的一些优化Passes：</li></ul><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>RTL generation</td></tr><tr><td>Loop optimization</td></tr><tr><td>Jump bypassing</td></tr><tr><td>If conversion</td></tr><tr><td>Instruction combination</td></tr><tr><td>Register movement</td></tr><tr><td>Instruction scheduling</td></tr><tr><td>Register allocation</td></tr><tr><td>Final</td></tr></tbody></table><hr><p><strong>GCC生成RTL：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc afl_inst_test.c -fdump-rtl-all<br>$ <span class="hljs-built_in">cat</span> afl_inst_test.c.310r.dfinish <br><br>;; Function fun (fun, funcdef_no=0, decl_uid=2248, cgraph_uid=0, symbol_order=0)<br><br>(note 1 0 4 NOTE_INSN_DELETED)<br>(note 4 1 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)<br>(insn/f 28 4 29 2 (<span class="hljs-built_in">set</span> (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])<br>        (reg/f:DI 6 bp)) <span class="hljs-string">"afl_inst_test.c"</span>:3 57 {*pushdi2_rex64}<br>     (nil))<br>(insn/f 29 28 30 2 (<span class="hljs-built_in">set</span> (reg/f:DI 6 bp)<br>        (reg/f:DI 7 sp)) <span class="hljs-string">"afl_inst_test.c"</span>:3 81 {*movdi_internal}<br>     (nil))<br>...<br></code></pre></td></tr></tbody></table></figure><h4 id="后端生成"><a href="#后端生成" class="headerlink" title="后端生成"></a>后端生成</h4><ul><li>后端为指定的目标平台生成汇编代码</li></ul><p>GCC生成目标平台汇编代码：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -S afl_inst_test.c<br>$ <span class="hljs-built_in">cat</span> afl_inst_test.s<br></code></pre></td></tr></tbody></table></figure><h3 id="2-Clang"><a href="#2-Clang" class="headerlink" title="2. Clang"></a>2. Clang</h3><h4 id="四个阶段-1"><a href="#四个阶段-1" class="headerlink" title="四个阶段"></a>四个阶段</h4><ul><li>与GCC类似，不再赘述</li></ul><h4 id="前端分析-1"><a href="#前端分析-1" class="headerlink" title="前端分析"></a>前端分析</h4><ul><li>Clang<strong>前端管线</strong>：</li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/6.png"></p><center>图6 Clang前端流水线</center><p><strong>预处理</strong>：</p><ul><li>C/C++预处理器在<strong>词法分析之前</strong>执行，主要功能是<ul><li>展开宏</li><li>展开包含文件</li><li>根据各种以#开头的预处理器指示略去部分代码</li></ul></li></ul><hr><p><strong>词法分析：</strong></p><ul><li>处理源代码的文本输入，将语言结构分解为一组单词和标记，去除注释、空白、制表符等</li><li>clang词法分析输出结果：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang -cc1 -dump-tokens afl_inst_test.c<br>...<br></code></pre></td></tr></tbody></table></figure><p>例如，在<code>fun()</code>[Line 4-6] 函数内的if语句高亮输出是：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> <span class="hljs-string">'if'</span> [StartOfLine] [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>&gt;<br>l_paren <span class="hljs-string">'('</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">4</span>&gt;<br>identifier <span class="hljs-string">'a'</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">5</span>&gt;<br>greater <span class="hljs-string">'&gt;'</span> [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">7</span>&gt;<br>numeric_constant <span class="hljs-string">'0'</span> [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">9</span>&gt;<br>r_paren <span class="hljs-string">')'</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">10</span>&gt;<br>l_brace <span class="hljs-string">'{'</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">4</span>:<span class="hljs-number">11</span>&gt;<br><span class="hljs-keyword">return</span> <span class="hljs-string">'return'</span> [StartOfLine] [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">5</span>:<span class="hljs-number">3</span>&gt;<br>minus <span class="hljs-string">'-'</span> [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">5</span>:<span class="hljs-number">10</span>&gt;<br>identifier <span class="hljs-string">'a'</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">5</span>:<span class="hljs-number">11</span>&gt;<br>semi <span class="hljs-string">';'</span>Loc=&lt;afl_inst_test.c:<span class="hljs-number">5</span>:<span class="hljs-number">12</span>&gt;<br>r_brace <span class="hljs-string">'}'</span> [StartOfLine] [LeadingSpace]Loc=&lt;afl_inst_test.c:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>&gt;<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>语法分析：</strong></p><ul><li><p>将词法分析产生的标记流作为输出，输出语法树（AST）</p></li><li><p>一个AST节点表明声明、语句和类型</p></li><li><p>语法解析器接受并处理在词法阶段生成的标记序列，每当发现一组要求的标记在一起的时候，此时会生成一个AST节点</p><ul><li><p>如每当发现一个标记tok::kw_if时，就会调用<code>ParseIfStatement()</code>函数处理if语句体中的所有标记，并为它们生成所必须的孩子AST节点和一个IfStmt根节点</p></li><li><pre><code class="c">// lib/Parse/ParseStmt.cpp...  case tok::kw_if:                  // C99 6.8.4.1: if-statement    return ParseIfStatement(TrailingElseLoc);  case tok::kw_switch:              // C99 6.8.4.2: switch-statement    return ParseSwitchStatement(TrailingElseLoc);...<figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-bullet">* </span>Clang并不在解析之后遍历AST，而是在AST节点生成过程中即时检查类型<br><br><span class="hljs-bullet">* </span>语法分析<span class="hljs-strong">**识别解析错误**</span><br><br><span class="hljs-bullet">* </span>Clang生成<span class="hljs-strong">**AST**</span>树：<br><br><span class="hljs-code">```bash</span><br><span class="hljs-code">$ clang -fsyntax-only -Xclang -ast-dump afl_inst_test.c</span><br><span class="hljs-code"># or clang -cc1 -ast-dump afl_inst_test.c [9]</span><br></code></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p>AST树的可视化界面：</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang -fsyntax-only -Xclang -ast-view afl_inst_test.c<br></code></pre></td></tr></tbody></table></figure><hr><p><strong>生成LLVM IR</strong></p><ul><li><p>经过词法分析和语义分析的联合处理之后，Clang会调用<code>CodeGenAction()</code>编译<strong>AST</strong>以生成<strong>LLVM IR</strong></p></li><li><p>前端流水线结束！</p></li></ul><h4 id="中间端优化-11"><a href="#中间端优化-11" class="headerlink" title="中间端优化[11]"></a>中间端优化<sup>[11]</sup></h4><ul><li><p>LLVM中间表示IR是连接前端和后端的中枢，让LLVM能够解析多种源语言，为多种目标生成代码</p></li><li><p>前端产生IR，后端也接收IR</p></li><li><p>引入IR的出发点：<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 解决不同语言源代码的差异性； <span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 便于生成不同平台相异的机器指令集</p><ul><li>通用性</li><li>高级IR能够让优化器轻松提炼出原始源代码的意图；低级IR让编译器能够更容易生成为特定硬件优化的代码</li></ul></li><li><p>IR的三种等价形式：</p><ul><li>驻留内存的表示（指令类等）</li><li>磁盘上以空间高效方式编码的位表示（bitcode文件）</li><li>磁盘上的人类可读文本表示（LLVM汇编文件）</li></ul></li><li><p>IR的工作流图：</p></li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/7.png"></p><center>图7 LLVM IR工作流图</center><hr><p><strong>Clang生成IR：</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// sum.c</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> {<br>  <span class="hljs-keyword">return</span> a+b;<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>生成bitcode：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang sum.c -emit-llvm -c -o sum.bc<br></code></pre></td></tr></tbody></table></figure><ul><li>生成汇编表示：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang sum.c -emit-llvm -S -c -o sum.ll<br></code></pre></td></tr></tbody></table></figure><ul><li>汇编LLVM IR汇编文本以生成bitcode：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ llvm-as sum.ll -o sum.bc<br></code></pre></td></tr></tbody></table></figure><ul><li>反编译bitcode为IR汇编：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ llvm-dis sum.bc -o sum.ll<br></code></pre></td></tr></tbody></table></figure><ul><li>llvm-extract工具提取IR函数、全局变量，还能从IR模块中删除全局变量：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ llvm-extract -func=<span class="hljs-built_in">sum</span> sum.bc -o sum-fn.bc<br></code></pre></td></tr></tbody></table></figure><h4 id="后端生成-12"><a href="#后端生成-12" class="headerlink" title="后端生成[12]"></a>后端生成<sup>[12]</sup></h4><ul><li>后端主要的步骤就是将LLVM IR转换为目标汇编代码，具体步骤如图8所示：</li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/8.png"></p><center>图8 LLVM IR到目标汇编代码的流程</center><ul><li><p>简要描述上述代码生成的各个阶段：</p><ul><li><p><strong>指令选择</strong>（instruction selection）：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 将内存中的IR表示变换为目标特定的selectionDAG节点，每一个DAG表示单一基本块的计算</p><p>你可以使用debug版本的llc来生成selectionDAG节点信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -debug sum.bc <span class="hljs-comment"># 这里使用debug版本的clang！</span><br>...<br>SelectionDAG has 18 nodes:<br>  t0: ch = EntryToken<br>  t6: i64 = Constant&lt;0&gt;<br>      t2: i32,ch = CopyFromReg t0, Register:i32 %0<br>    t8: ch = store&lt;ST4[%a.addr]&gt; t0, t2, FrameIndex:i64&lt;0&gt;, undef:i64<br>    t4: i32,ch = CopyFromReg t0, Register:i32 %1<br>  t10: ch = store&lt;ST4[%b.addr]&gt; t8, t4, FrameIndex:i64&lt;1&gt;, undef:i64<br>      t11: i32,ch = load&lt;LD4[%a.addr](dereferenceable)&gt; t10, FrameIndex:i64&lt;0&gt;, undef:i64<br>      t12: i32,ch = load&lt;LD4[%b.addr](dereferenceable)&gt; t10, FrameIndex:i64&lt;1&gt;, undef:i64<br>    t13: i32 = add nsw t11, t12<br>  t16: ch,glue = CopyToReg t10, Register:i32 %eax, t13<br>  t17: ch = X86ISD::RET_FLAG t16, TargetConstant:i32&lt;0&gt;, Register:i32 %eax, t16:1<br>...<br></code></pre></td></tr></tbody></table></figure><p>此外，你可以执行下面的命令来生成selectionDAG图：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -view-dag-combine1-dags sum.bc -fast-isel=<span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/9.png"></p><center>图9 sum函数的SelectionDAG图</center><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 利用<strong>模式匹配</strong>将目标无关的节点转换为目标特定的节点，而指令选择的算法是局部的，每次作用SelectionDAG（基本块）的实例</p><p>可以执行一下命令生成指令选择后的SelectionDAG图：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -view-sched-dags sum.bc -fast-isel=<span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/10.png"></p><center>图10 指令选择后的sum函数的SelectionDAG图</center><p>由上图我们可以看到，在指令选择之后，原先DAG图中的add节点被替换成ADD32rr，X86ISD::RET_FLAG被替换为RET，load被替换为MOV32rm，store被替换为MOV32mr</p></li><li><p><strong>指令调度</strong>（instruction scheduling）：</p><ul><li>指令延迟表：根据具体硬件信息来提高指令级并行，从而提高在计算机上指令流水线的性能 [14]</li><li>风险检测与识别</li><li>调度单元</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -view-sunit-dags sum.bc -fast-isel=<span class="hljs-literal">false</span><br></code></pre></td></tr></tbody></table></figure><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/11.png"></p><center>图11 调度单元图</center></li><li><p><strong>寄存器分配</strong>（Register allocation）</p><ul><li><p>作用在<strong>机器指令</strong>上：</p><ul><li>在指令调度之后，InstrEmitter Pass会被运行，它将<code>SDNode</code>格式转换为<code>MachineInstr</code>格式</li><li>该表示相较于IR指令更接近实际的目标指令</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -march=sparc -print-machineinstrs sum.bc<br>...<br><span class="hljs-comment"># After Instruction Selection:</span><br><span class="hljs-comment"># Machine code for function sum: IsSSA, TracksLiveness</span><br>Frame Objects:<br>  <span class="hljs-keyword">fi</span><span class="hljs-comment">#0: size=4, align=4, at location [SP]</span><br>  <span class="hljs-keyword">fi</span><span class="hljs-comment">#1: size=4, align=4, at location [SP]</span><br>Function Live Ins: %i0 <span class="hljs-keyword">in</span> %0, %i1 <span class="hljs-keyword">in</span> %1<br><br>%bb.0: derived from LLVM BB %entry<br>    Live Ins: %i0 %i1<br>%1:intregs = COPY %i1; IntRegs:%1<br>%0:intregs = COPY %i0; IntRegs:%0<br>%3:intregs = COPY %1; IntRegs:%3,%1<br>%2:intregs = COPY %0; IntRegs:%2,%0<br>STri %stack.0.a.addr, 0, %0; mem:ST4[%a.addr] IntRegs:%0<br>STri %stack.1.b.addr, 0, %1; mem:ST4[%b.addr] IntRegs:%1<br>%4:intregs = LDri %stack.0.a.addr, 0; mem:LD4[%a.addr](dereferenceable) IntRegs:%4<br>%5:intregs = LDri %stack.1.b.addr, 0; mem:LD4[%b.addr](dereferenceable) IntRegs:%5<br>%6:intregs = ADDrr killed %4, killed %5; IntRegs:%6,%4,%5<br>%i0 = COPY %6; IntRegs:%6<br>RETL 8, implicit %i0<br>...<br></code></pre></td></tr></tbody></table></figure></li><li><p><strong>基本任务：</strong>将无限数量的虚拟寄存器转换为有限的物理寄存器</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /llvm-project/build/bin/llc -print-after=greedy sum.bc<br><span class="hljs-comment"># *** IR Dump After Greedy Register Allocator ***:</span><br><span class="hljs-comment"># Machine code for function sum: NoPHIs, TracksLiveness</span><br>Frame Objects:<br>  <span class="hljs-keyword">fi</span><span class="hljs-comment">#0: size=4, align=4, at location [SP+8]</span><br>  <span class="hljs-keyword">fi</span><span class="hljs-comment">#1: size=4, align=4, at location [SP+8]</span><br>Function Live Ins: %edi <span class="hljs-keyword">in</span> %0, %esi <span class="hljs-keyword">in</span> %2<br><br>0B%bb.0: derived from LLVM BB %entry<br>    Live Ins: %edi %esi<br>16B%3:gr32 = COPY %esi; GR32:%3<br>32B%1:gr32 = COPY %edi; GR32:%1<br>80BMOV32mr %stack.0.a.addr, 1, %noreg, 0, %noreg, %1; mem:ST4[%a.addr] GR32:%1<br>96BMOV32mr %stack.1.b.addr, 1, %noreg, 0, %noreg, %3; mem:ST4[%b.addr] GR32:%3<br>112B%7:gr32 = MOV32rm %stack.0.a.addr, 1, %noreg, 0, %noreg; mem:LD4[%a.addr] GR32:%7<br>144B%7:gr32 = ADD32rm %7, %stack.1.b.addr, 1, %noreg, 0, %noreg, implicit-def dead %eflags; mem:LD4[%b.addr] GR32:%7<br>160B%eax = COPY %7; GR32:%7<br>176BRETQ implicit %eax<br><br><span class="hljs-comment"># End machine code for function sum.</span><br><br></code></pre></td></tr></tbody></table></figure><ul><li>寄存器合并器、虚拟寄存器重写和目标钩子</li></ul></li></ul></li></ul><h2 id="II-AFL如何进行插桩？"><a href="#II-AFL如何进行插桩？" class="headerlink" title="II. AFL如何进行插桩？"></a>II. AFL如何进行插桩？</h2><ul><li><p>原生AFL有<strong>两种插桩方式</strong></p><ul><li><p>基于编译器生成的汇编文件的插桩</p><ul><li>关键文件有两个，分别是<code>afl-gcc.c</code>和<code>afl-as.c</code></li><li><code>afl-gcc/g++/clang/clang++/gcj</code>：编译器（gcc、clang、gcj）的一个wrapper <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 编译器产生汇编文件</li><li><code>afl-as</code>：汇编器（as）的一个wrapper <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 对编译器产生的汇编文件进行插桩，然后调用<code>as</code>生成目标文</li></ul><p>图解：</p><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/12.png"></p><center>图12 基于编译器的AFL插桩流程</center></li><li><p>基于LLVM模式的插桩</p><ul><li>关键文件即<code>llvm_mode</code>文件夹下的所有文件</li></ul></li></ul></li></ul><h3 id="a-基于编译器汇编文件的插桩"><a href="#a-基于编译器汇编文件的插桩" class="headerlink" title="a. 基于编译器汇编文件的插桩"></a>a. 基于编译器汇编文件的插桩</h3><h4 id="1-afl-gcc-c"><a href="#1-afl-gcc-c" class="headerlink" title="1. afl-gcc.c"></a>1. afl-gcc.c</h4><ul><li><p>是主流编译器的一个wrapper，根据具体调用的<code>afl-xxx</code>编译器名来进行分流：</p><ul><li><p><code>afl-xxx</code>编译器都是<code>afl-gcc</code>的一个软链接，如下所示</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ll afl-gcc afl-g++ afl-clang afl-clang++<br>lrwxrwxrwx 1 chan chan     7 Nov  3 23:52 afl-clang -&gt; afl-gcc*<br>lrwxrwxrwx 1 chan chan     7 Nov  3 23:52 afl-clang++ -&gt; afl-gcc*<br>lrwxrwxrwx 1 chan chan     7 Nov  3 23:52 afl-g++ -&gt; afl-gcc*<br>-rwxrwxr-x 1 chan chan 22976 Nov  3 23:52 afl-gcc*<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>与<code>afl-as</code>的结合使用：使用<code>gcc/clang</code> <code>-B</code>选项来指定汇编器路径，即AFL本身的路径</p><p>换言之，<code>afl-gcc</code>本质上还是调用的原来的编译器，只不过将汇编器替换为了<code>afl-as</code>（而<code>afl-as</code>的主要作用就是进行插桩！）</p></li><li><p><strong>源码解析</strong>：</p><ul><li><p><code>find_as()</code>：在环境变量<code>AFL_PATH</code>【AFL本身的路径】提供”假的”GNU汇编器，即<code>AFL_PATH/as</code>；或者根据<code>argv[0]</code>的路径进行派生。<span class="github-emoji"><span>📓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 注：这里的<code>as</code>本身也是<code>afl-as</code>的一个软链接，如下所示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ll afl-as as<br>-rwxrwxr-x 1 chan chan 37544 Nov  3 23:52 afl-as*<br>lrwxrwxrwx 1 chan chan     6 Nov  3 23:52 as -&gt; afl-as*<br></code></pre></td></tr></tbody></table></figure></li><li><p><code>edit_params()</code>：构造新的命令行选项，即将<code>argv</code>中的选项拷贝到<code>cc_params</code>中，同时提供一些必要的编辑：</p><ul><li><p>首先对<code>argv[0]</code>进行匹配，即进行分流：</p><p><code>afl-clang</code> =&gt; <code>clang</code>; </p><p><code>afl-clang++</code> =&gt; <code>clang++</code>; </p><p><code>afl-g++</code> =&gt; <code>g++</code>; </p><p><code>afl-gcj</code> =&gt; <code>gcj</code>; </p><p><code>afl-gcc</code> =&gt; <code>gcc</code></p></li><li><p>然后将<code>argv</code>中其他的选项拷贝到<code>cc_params</code>，在这过程中，对一些选项进行处理：</p><ul><li><code>-B</code>将被覆写</li><li><code>-integrated-as</code>、<code>-pipe</code>、将被删除</li><li>如果遇到<code>-fsanitize=address</code>或<code>-fsanitize=memory</code>时，将<code>asan_set</code>标志变量设置为1，将选项添加到<code>cc_params</code></li><li>如果遇到<code>FORTIFY_SOURCE</code>设置项，则将<code>fortify_set</code>标志变量设置为1，将选项添加到<code>cc_params</code>  <em># 编译器的一种安全检测机制，防溢出</em></li></ul></li><li><p>然后添加-B选项，即<code>-B as_path</code>，<code>as_path</code>为<code>find_as()</code>函数设置的汇编器路径。接着进行5个判断：</p><ul><li><p>如果是<code>clang_mode</code>，添加<code>-no-integrated-as</code>选项以避免使用clang集成的汇编器</p></li><li><p>如果设置了环境变量<code>AFL_HARDEN</code>，则添加 <code>-fstack-protector-all</code> [15] 和 <code>-D_FORTIFY_SOURCE=2</code></p></li><li><p>如果<code>asan_set == 1</code>，则将环境变量<code>AFL_USE_ASAN</code>设置为1；否则，判断是否设置了<code>AFL_USE_ASAN</code>或<code>AFL_USE_MSAN</code>，并检查相应的互斥性和添加相应的选项（<code>-U_FORTIFY_SOURCE</code> 和 <code>-fsanitize=address/memory</code>）</p></li><li><p>如果设置了环境变量<code>AFL_DONT_OPTIMIZE</code>，那么将不进行优化操作，否则将添加下述选项：</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-g</td><td>全局绑定，主要用于debug</td></tr><tr><td>-O3</td><td>O3级优化</td></tr><tr><td>-funroll-loops</td><td>避免优化器展开循环，其主要目的有两个：<br><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 便于对循环体的边进行跟踪<br><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 避免循环体内其他边的数量爆炸（循环展开后会产生冗余边）</td></tr><tr><td>-D__AFL_COMPILER=1</td><td># 不是编译器本身的选项<br>在ChangeLog中，该变量用来指示该程序是在afl-gcc / afl-clang / afl-clang-fast下构建的，并且允许自定义的优化</td></tr><tr><td>-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1</td><td>-</td></tr></tbody></table></li><li><p>如果设置了环境变量<code>AFL_NO_BUILTIN</code>，那么将不进行相关函数的内置替换（即汇编处将使用<code>call</code>相关函数，对于<code>AFL插桩</code>来说，这将引入额外的开销，因此默认进行<code>builtin</code>）。具体来说，通过添加下述选项来实现：</p><table><thead><tr><th align="center">选项</th></tr></thead><tbody><tr><td align="center">-fno-builtin-strcmp</td></tr><tr><td align="center">-fno-builtin-strncmp</td></tr><tr><td align="center">-fno-builtin-strcasecmp</td></tr><tr><td align="center">-fno-builtin-strncasecmp</td></tr><tr><td align="center">-fno-builtin-memcmp</td></tr><tr><td align="center">-fno-builtin-strstr</td></tr><tr><td align="center">-fno-builtin-strcasestr</td></tr></tbody></table></li></ul></li></ul></li><li><p><code>execvp()</code>：执行构造的命令行，即<code>cc_params</code>。该命令行将调用编译器生成相应的可执行文件，正如前所述，<code>-B</code>指定了<code>afl</code>的汇编器进行插桩操作，因此下面我们将详细介绍<code>afl-as.c</code>的具体流程。</p></li></ul></li></ul><h4 id="2-afl-as-c"><a href="#2-afl-as-c" class="headerlink" title="2. afl-as.c"></a>2. afl-as.c</h4><ul><li><p>由前所述，<code>afl-gcc/clang/g++/clang++/gcj</code>通过<code>-B</code>参数指定了<code>AFL的汇编器</code>路径，那么在gcc/g++/clang/clang++/gcj生成目标文件/可执行文件的过程中，将使用afl-as作为其编译器，而afl-as本身也是as一个wrapper：</p><ul><li>先对编译器产生的汇编文件进行<strong>插桩</strong></li><li>然后再调用系统的<code>as</code>来<strong>生成相应的机器码</strong></li></ul></li><li><p><span class="github-emoji"><span>💭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 但是这样一来无法对<code>afl-as</code>进行调试？</p><ul><li><p>经过对<code>afl-as</code>的简单分析，我们可以先通过<code>afl-gcc -S</code>生成汇编文件，然后将汇编文件放置在<code>tmp</code>目录下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ afl-gcc -S afl_inst_test.c -o afl_inst_test.s<br>afl-cc 2.57b by &lt;lcamtuf@google.com&gt;<br>afl_inst_test.c: In <span class="hljs-keyword">function</span> ‘main’:<br>afl_inst_test.c:12:2: warning: ignoring <span class="hljs-built_in">return</span> value of ‘scanf’, declared with attribute warn_unused_result [-Wunused-result]<br>  scanf(<span class="hljs-string">"%d"</span>, &amp;a);<br>  ^~~~~~~~~~~~~~~<br>$ <span class="hljs-built_in">mv</span> afl_inst_test.s /tmp<br></code></pre></td></tr></tbody></table></figure></li><li><p>使用<code>afl-as</code>对上述产生的汇编文件进行汇编操作：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ /home/chan/some_c_test/AFLAPI/afl-as -o afl_inst_test.o /tmp/afl_inst_test.s<br>afl-as 2.57b by &lt;lcamtuf@google.com&gt;<br>[+] Instrumented 4 locations (64-bit, non-hardened mode, ratio 100%).<br></code></pre></td></tr></tbody></table></figure><p>:happy:由上述的结果，我们可以看出该汇编文件已经成功插桩了。但这里我们无法捕获到插桩后的汇编文件，因此需要对<code>afl-as</code>进行debug。</p></li></ul></li><li><p><strong>源码解析</strong>：</p><p>一些局部变量：inst_ratio_str =&gt; <strong>inst_ratio</strong> [默认为100，插桩率 0~100]；<strong>sanitizer</strong> [是否启用ASAN/MSAN?] </p><ul><li><p><code>srandom()</code>：置时间种子，种子由当前时间的秒、微秒和进程pid异或得到</p></li><li><p><code>edit_params()</code>：构造汇编所使用的命令行</p><ul><li><p>环境变量<code>TMPDIR</code>可以自定义临时文件夹，此外，环境变量<code>TEMP</code>和<code>TMP</code>同样有相同的功能，否则<code>tmp_dir</code>默认为”<code>/tmp</code>“，这也是我们之前将汇编文件放置在<code>tmp</code>目录下的原因 <span class="github-emoji"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li><li><p>然后将原<code>argv</code>【前 <code>argc-1</code> 个选项】拷贝到<code>as_params[]</code>中。这里检测原命令行中是否出现<code>"--64"</code> / <code>"--32"</code>  =&gt; 将<code>use_64bit</code>标志变量相应的设置为1 / 0</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 注：在调用<code>afl-as</code>时，必须将输入文件放置在最后，即<code>afl-as -o xxx.o xxx.s</code><span class="github-emoji"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，<code>afl-as xxx.s -o xxx.o</code><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p><p><code>input_file = argv[argc - 1] // xxx.s</code></p></li><li><p>判断<code>input_file</code>是否在<code>/tmp</code>或<code>/var/tmp</code>，如果不再则将<code>pass_thru</code>置为1【这会导致后面不进行插桩操作】</p><p><code>modified_file</code>为插桩后汇编文件，这里根据时间和pid随机分配一个名字，如<code>/tmp/.afl-4270-1669033267.s</code></p><p>然后将<code>modified_file</code>添加到<code>as_params</code>最后，作为汇编器的输入文件！</p></li></ul></li><li><p>如果设置了环境变量<code>AFL_USE_ASAN</code>或<code>AFL_USE_MSAN</code>，将sanitizer置为1，且将<strong>插桩率inst_ratio除以3</strong></p><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 这里为啥要将<code>inst_ratio</code>除以3？</p><blockquote><p>源码注释中作者这样描述：</p><p>“在使用ASAN编译时，没有一个特别优雅的方法跳过ASAN特有的分支，但可以通过插桩率上进行补偿…”</p><p>见解：<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ASAN会引入由ASAN所导致的特定分支，而如前所述，ASAN插桩是在编译过程完成的，而AFL在编译器生成的汇编基础上进行插桩，因此会对ASAN本身特定的分支进行插桩。概率插桩（33%）在一定程度上能够反映软件的真实覆盖率大小。</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ASAN的插桩是<strong>重量级</strong>的，因此ASAN引入的边可能会导致比特位图碰撞性提升，而概率插桩能够解决这一问题</p></blockquote></li><li><p><code>add_instrumentation()</code>：对汇编文件进行<strong>插桩</strong>（分支处插桩 + 相关调用函数）</p><ul><li><p>如果<code>input_file</code>文件不能打开，则将<code>stdin</code>作为输入；<code>modified_file</code>作为输出文件；</p></li><li><p>【<strong>分支处插桩</strong>】读取<code>input_file</code>中的每一行，并做一系列的判断，其主要找到三个位置：</p><ul><li><strong>函数头：</strong></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">function_name:<br>.LFB23:<br>.file 1 "afl_inst_test.c"<br>.loc 1 3 0<br>.cfi_startproc<br>.LVL0:<br>.loc 1 5 0<br># &lt;&lt;======== instrumentation here<br>movl%edi, %eax<br></code></pre></td></tr></tbody></table></figure><ul><li><strong>jx/jxx的两条分支：</strong></li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># branch 1<br>.LVL7:<br>.loc 1 14 0<br>movl4(%rsp), %edx<br>cmpl$0, %edx<br>jg.L11<br># &lt;&lt;======== instrumentation here<br>.loc 1 16 0<br>jne.L12<br># &lt;&lt;======== instrumentation here<br>...<br># branch 2<br>.L11:<br>.cfi_restore_state<br>.LVL10:<br>.LBB26:<br>.LBB27:<br>.loc 2 104 0<br># &lt;&lt;======== instrumentation here<br>leaq.LC2(%rip), %rsi<br>movl$1, %edi<br>xorl%eax, %eax<br>call__printf_chk@PLT<br>.LVL11:<br>jmp.L7<br>.LVL12:<br>.L12:<br>.LBE27:<br>.LBE26:<br>.LBB28:<br>.LBB29:<br># &lt;&lt;======== instrumentation here<br>leaq.LC3(%rip), %rsi<br>movl$1, %edi<br>xorl%eax, %eax<br>call__printf_chk@PLT<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 汇编中<code>.</code>开头标识的意义 [16]：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>.loc</code>：**Line Of Code [-g?]**，格式为 <code>.loc 文件序号 行序号 [列] [选项]</code>，在上示例中，<code>.loc 1 14 0</code>表示file 1：afl_inst_test.c，第14行第0列 [17]</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> GCC使用<code>.L</code>用于<strong>本地标签</strong></p><blockquote><p>本地符号是以某种本地标签前缀开头的任何符号，默认情况下，ELF系列的本地标签前缀是“.L”</p><p>本地符号在汇编器中被定义和使用，但它们通常不被保存在目标文件中。因此在调试时它们是不可见的。可以使用<code>-L</code>选项保留目标文件中的本地符号 [18]</p><p>e.g.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;/tmp$ as -c -L afl_inst_test.s <span class="hljs-comment"># you can also use `as --keep-locals -c afl_inst_test.s`</span><br>&gt;/tmp$ nm a.out<br>&gt;0000000000000000 T fun<br>      U _GLOBAL_OFFSET_TABLE_<br>      U __isoc99_scanf<br>&gt;000000000000006d t .L11<br>&gt;0000000000000082 t .L12<br>&gt;0000000000000097 t .L13<br>&gt;...<br>&gt;/tmp$ as -c afl_inst_test.s <br>&gt;/tmp$ nm a.out<br>&gt;0000000000000000 T fun<br>      U _GLOBAL_OFFSET_TABLE_<br>      U __isoc99_scanf<br>&gt;0000000000000000 r .LC0<br>&gt;0000000000000000 r .LC1<br>&gt;0000000000000003 r .LC2<br>&gt;000000000000001c r .LC3<br>&gt;0000000000000035 r .LC4<br>&gt;0000000000000000 T main<br>      U __printf_chk<br>      U __stack_chk_fail<br>&gt;/tmp$ <br></code></pre></td></tr></tbody></table></figure></blockquote><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>.L</code><strong>前缀</strong>（是DWARF调试信息，不重要）：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FUNC_BEGIN_LABEL  <span class="hljs-string">"LFB"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FUNC_END_LABEL    <span class="hljs-string">"LFE"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLOCK_BEGIN_LABEL <span class="hljs-string">"LBB"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLOCK_END_LABEL   <span class="hljs-string">"LBE"</span></span><br>ASM_GENERATE_INTERNAL_LABEL (loclabel, <span class="hljs-string">"LVL"</span>, loclabel_num);<br></code></pre></td></tr></tbody></table></figure><p>LFB：函数开始； LFE：函数结束；LBB：块开始；LBE：块结束；LVL：尚不知</p><p>详见 [19]</p></li><li><p>【相关调用函数的附加】最后，将<code>main_payload_64</code>或<code>main_payload_32</code>添加到汇编文件的末尾处。至此，所有的插桩过程均已完成！</p></li></ul></li><li><p><code>execvp()</code>：<code>fork</code>一个子进程执行构造的新的<code>as_params</code>，即对插桩后的汇编文件进行汇编操作。最后删除临时文件 [<code>modified_file</code>]，至此，汇编任务完成</p></li></ul></li></ul><h4 id="3-afl-as-h-桩代码解析"><a href="#3-afl-as-h-桩代码解析" class="headerlink" title="3. afl-as.h (桩代码解析)"></a>3. afl-as.h (桩代码解析)</h4><ul><li>主要有两个桩代码：<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>trampoline_fmt_64/trampoline_fmt_32</code>；<span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>main_payload_64/main_payload_32</code>；</li></ul><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>trampoline_fmt_64/trampoline_fmt_32</code>（以64位为例）：</p><ul><li>汇编码：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">/* --- AFL TRAMPOLINE (64-BIT) --- */<br><br>.align 4<br><br>leaq -(128+24)(%rsp), %rsp # 分配152字节的栈空间<br>movq %rdx,  0(%rsp) # 保存现场<br>movq %rcx,  8(%rsp)<br>movq %rax, 16(%rsp)<br>movq $0x%08x, %rcx    /* %08x是一个比特位图大小内的随机数 */<br>call __afl_maybe_log<br>movq 16(%rsp), %rax # 恢复现场<br>movq  8(%rsp), %rcx<br>movq  0(%rsp), %rdx<br>leaq (128+24)(%rsp), %rsp # 复原栈<br><br>/* --- END --- */<br></code></pre></td></tr></tbody></table></figure><ul><li>上述汇编码调用了<code>__afl_maybe_log(%rcx[i.e.当前分支对应的随机数])</code>来记录边的情况</li></ul><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>main_payload_64/main_payload_32</code>（以64位为例）：</p><ul><li>汇编码主要包括10个函数，分别是：<code>__afl_maybe_log</code>、<code>__afl_store</code>、<code>__afl_return</code>、<code>__afl_setup</code>、<code>__afl_setup_first</code>、<code>__afl_forkserver</code>、<code>__afl_fork_wait_loop</code>、<code>__afl_fork_resume</code>、<code>__afl_die</code>、<code>__afl_setup_abort</code></li><li><code>__afl_maybe_log</code>、<code>__afl_store</code>、<code>__afl_return</code>：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_maybe_log:<br><br>  lahf   # save other flags to AH<br>  seto  %al   # set OF to al<br><br>  /* Check if SHM region is already mapped. */<br><br>  movq  __afl_area_ptr(%rip), %rdx # __afl_area_ptr是共享的bitmap位图内存块<br>  testq %rdx, %rdx<br>  je    __afl_setup   # je =&gt; jz 即判断该地址是否为0；如果为0，则进行初始化<br>  <br>__afl_store:<br><br>  /* Calculate and store hit for the code location specified in rcx. */<br><br>  xorq __afl_prev_loc(%rip), %rcx  # %rcx = pre ^ cur<br>  xorq %rcx, __afl_prev_loc(%rip)  # __afl_prev_loc = pre ^ cur ^ pre = cur<br>  shrq $1, __afl_prev_loc(%rip)    # __afl_prev_loc = cur &gt;&gt; 1<br>  # (pre &gt;&gt; 1) ^ cur<br>  incb (%rdx, %rcx, 1)             # __afl_area_ptr[%rcx] = __afl_area_ptr[%rcx] + 1<br><br>__afl_return:<br><br>  addb $127, %al   # restore OF (if OF=1, al+127=128 =&gt; OF=1 else OF=0)<br>  sahf   # restore other flags<br>  ret<br></code></pre></td></tr></tbody></table></figure><ul><li><code>__afl_setup</code>：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.align 8<br><br>__afl_setup:<br><br>  /* Do not retry setup if we had previous failures. */<br><br>  cmpb $0, __afl_setup_failure(%rip)  # 变量__afl_setup_failure如果为0，表示之前配置没问题，否则表示之前出错了，那么返回<br>  jne __afl_return<br><br>  /* Check out if we have a global pointer on file. */<br><br>  movq  __afl_global_area_ptr@GOTPCREL(%rip), %rdx  # 将__afl_global_area_ptr移送到%rdx<br>  movq  (%rdx), %rdx    # 将%rdx指向的值赋值给%rdx<br>  testq %rdx, %rdx# 判断%rdx是否为0，如果为0，表明未进行初始化操作<br>  je    __afl_setup_first# 跳转到__afl_setup_first进行初始化操作<br><br>  movq %rdx, __afl_area_ptr(%rip)# 将全局指针赋值给__afl_area_ptr<br>  jmp  __afl_store# 更新全局边计数<br><br></code></pre></td></tr></tbody></table></figure><ul><li><code>__afl_setup_first</code>、<code>__afl_forkserver</code>、<code>__afl_fork_resume</code>和<code>__afl_die</code>：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_setup_first:<br><br>  /* Save everything that is not yet saved and that may be touched by<br>     getenv() and several other libcalls we'll be relying on. */<br><br>  leaq -352(%rsp), %rsp<br>  <br>  # 保护现场<br>  movq %rax,   0(%rsp)<br>  movq %rcx,   8(%rsp)<br>  movq %rdi,  16(%rsp)<br>  movq %rsi,  32(%rsp)<br>  movq %r8,   40(%rsp)<br>  movq %r9,   48(%rsp)<br>  movq %r10,  56(%rsp)<br>  movq %r11,  64(%rsp)<br><br>  movq %xmm0,  96(%rsp)<br>  movq %xmm1,  112(%rsp)<br>  movq %xmm2,  128(%rsp)<br>  movq %xmm3,  144(%rsp)<br>  movq %xmm4,  160(%rsp)<br>  movq %xmm5,  176(%rsp)<br>  movq %xmm6,  192(%rsp)<br>  movq %xmm7,  208(%rsp)<br>  movq %xmm8,  224(%rsp)<br>  movq %xmm9,  240(%rsp)<br>  movq %xmm10, 256(%rsp)<br>  movq %xmm11, 272(%rsp)<br>  movq %xmm12, 288(%rsp)<br>  movq %xmm13, 304(%rsp)<br>  movq %xmm14, 320(%rsp)<br>  movq %xmm15, 336(%rsp)<br><br>  /* Map SHM, jumping to __afl_setup_abort if something goes wrong. */<br><br>  /* The 64-bit ABI requires 16-byte stack alignment. We'll keep the<br>     original stack ptr in the callee-saved r12. */<br><br>  pushq %r12<br>  movq  %rsp, %r12# 将%rsp暂存到%r12中<br>  subq  $16, %rsp# 为%rsp分配16字节的空间<br>  andq  $0xfffffffffffffff0, %rsp   # %rsp最后四位清空变为0 ==&gt; 栈地址对齐到16字节（地址是16的整数倍）<br><br>  leaq .AFL_SHM_ENV(%rip), %rdi# 将字符串"__AFL_SHM_ID"地址保存到%rdi<br>call getenv@PLT# 调用getenv，即getenv("__AFL_SHM_ID")<br><br>  testq %rax, %rax# getenv返回值将移送到$rax，这里判断rax是否为0，如果返回值为0则跳转到__afl_setup_abort<br>  je    __afl_setup_abort<br><br>  movq  %rax, %rdi# 将getenv返回的字符串地址移送到%rdi(第一个参数)<br>call atoi@PLT# 调用atoi将环境变量__AFL_SHM_ID的值转为整型，返回的整型值保存在%rax中<br><br>  xorq %rdx, %rdx   /* shmat flags    */<br>  xorq %rsi, %rsi   /* requested addr */<br>  movq %rax, %rdi   /* SHM ID         */<br>call shmat@PLT# 调用shmat(shmid --&gt; %rdi = %rax[atoi返回值], shmaddr --&gt; %rsi = 0, shmflg --&gt; %rdx = 0)<br><br>  cmpq $-1, %rax# 返回 -1 表示shmat调用失败，则跳转到__afl_setup_abort<br>  je   __afl_setup_abort<br><br>  /* Store the address of the SHM region. */<br><br>  movq %rax, %rdx# %rax保存着返回的共享地址<br>  movq %rax, __afl_area_ptr(%rip)   # %rax保存到__afl_area_ptr变量中<br><br>  movq __afl_global_area_ptr@GOTPCREL(%rip), %rdx  # __afl_global_area_ptr指针移送到%rdx<br>  movq %rax, (%rdx)# 将返回的共享地址移送到__afl_global_area_ptr指针所指向的值<br>  movq %rax, %rdx# 将返回的地址保存到%rdx中<br>  <br>__afl_forkserver:<br>  /* Enter the fork server mode to avoid the overhead of execve() calls. We<br>     push rdx (area ptr) twice to keep stack alignment neat. */<br><br>  pushq %rdx<br>  pushq %rdx<br><br>  /* Phone home and tell the parent that we're OK. (Note that signals with<br>     no SA_RESTART will mess it up). If this fails, assume that the fd is<br>     closed because we were execve()d from an instrumented binary, or because<br>     the parent doesn't want to use the fork server. */<br><br>  movq $4, %rdx               /* length    */<br>  leaq __afl_temp(%rip), %rsi /* data      */<br>  movq $(198 + 1), %rdi       /* file desc */<br>call write@PLT# 调用write(198, __afl_temp, 4)<br><br>  cmpq $4, %rax# 返回值保存到%rax中，如果%rax == 4，表明写入成功<br>  jne  __afl_fork_resume# 如果通信失败，则跳转到__afl_fork_resume<br><br>__afl_fork_wait_loop:<br><br>  /* Wait for parent by reading from the pipe. Abort if read fails. */<br><br>  movq $4, %rdx               /* length    */<br>  leaq __afl_temp(%rip), %rsi /* data      */<br>  movq $198, %rdi             /* file desc */<br>call read@PLT# 调用read(198, __afl_temp, 4)<br>  cmpq $4, %rax# 返回值保存到%rax中，如果%rax == 4，表明读入成功<br>  jne  __afl_die# 否则跳转到__afl_die中<br><br>  /* Once woken up, create a clone of our process. This is an excellent use<br>     case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly<br>     caches getpid() results and offers no way to update the value, breaking<br>     abort(), raise(), and a bunch of other things :-( */<br><br>call fork@PLT# 调用fork()<br>  cmpq $0, %rax# 判断fork()的返回值 (=0 ==&gt; 子进程， &lt;0 ==&gt; 失败， &gt;0 ==&gt; 在主进程中返回子进程PID)<br>  jl   __afl_die# 如果&lt;0(失败) 则跳转到__afl_die中<br>  je   __afl_fork_resume# 如果=0() 位于子进程中，则跳转到__afl_fork_resume<br><br>  /* In parent process: write PID to pipe, then wait for child. */<br><br>  movl %eax, __afl_fork_pid(%rip)# 【该分支位于父进程中】 %eax为fork()返回的子进程PID值，保存到__afl_fork_pid中<br><br>  movq $4, %rdx                   /* length    */<br>  leaq __afl_fork_pid(%rip), %rsi /* data      */<br>  movq $(198 + 1), %rdi             /* file desc */<br>call write@PLT# 调用write(199, &amp;__afl_fork_pid, 4);<br><br>  movq $0, %rdx                   /* no flags  */<br>  leaq __afl_temp(%rip), %rsi     /* status    */<br>  movq __afl_fork_pid(%rip), %rdi /* PID       */<br>call waitpid@PLT# 调用waitpid(__afl_fork_pid, __afl_temp, 0);<br>  cmpq $0, %rax# waitpid()返回值若≤0，则跳转到__afl_die<br>  jle  __afl_die<br><br>  /* Relay wait status to pipe, then loop back. */<br><br>  movq $4, %rdx               /* length    */<br>  leaq __afl_temp(%rip), %rsi /* data      */<br>  movq $(198 + 1), %rdi         /* file desc */<br>call write@PLT# 调用write(199, &amp;__afl_temp, 4);<br><br>  jmp  __afl_fork_wait_loop# 回到循环首<br>  <br>__afl_fork_resume:# 该分支为子进程操作<br><br>  /* In child process: close fds, resume execution. */<br><br>  movq $198, %rdi<br>call close@PLT# 调用close(198)<br><br>  movq $(198 + 1), %rdi<br>call close@PLT# 调用close(199)<br>  # 恢复现场！！<br>  popq %rdx<br>  popq %rdx<br><br>  movq %r12, %rsp<br>  popq %r12<br><br>  movq  0(%rsp), %rax<br>  movq  8(%rsp), %rcx<br>  movq 16(%rsp), %rdi<br>  movq 32(%rsp), %rsi<br>  movq 40(%rsp), %r8<br>  movq 48(%rsp), %r9<br>  movq 56(%rsp), %r10<br>  movq 64(%rsp), %r11<br><br>  movq  96(%rsp), %xmm0<br>  movq 112(%rsp), %xmm1<br>  movq 128(%rsp), %xmm2<br>  movq 144(%rsp), %xmm3<br>  movq 160(%rsp), %xmm4<br>  movq 176(%rsp), %xmm5<br>  movq 192(%rsp), %xmm6<br>  movq 208(%rsp), %xmm7<br>  movq 224(%rsp), %xmm8<br>  movq 240(%rsp), %xmm9<br>  movq 256(%rsp), %xmm10<br>  movq 272(%rsp), %xmm11<br>  movq 288(%rsp), %xmm12<br>  movq 304(%rsp), %xmm13<br>  movq 320(%rsp), %xmm14<br>  movq 336(%rsp), %xmm15<br><br>  leaq 352(%rsp), %rsp<br><br>  jmp  __afl_store  # 跳转到__afl_store去执行边的记录<br><br>__afl_die:<br><br>  xorq %rax, %rax<br>call _exit@PLT# 调用exit(0)<br></code></pre></td></tr></tbody></table></figure><ul><li><code>__afl_setup_abort</code>：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__afl_setup_abort:<br><br>  /* Record setup failure so that we don't keep calling<br>     shmget() / shmat() over and over again. */<br><br>  incb __afl_setup_failure(%rip)  # __afl_setup_failure++;<br>  # 恢复现场<br>  movq %r12, %rsp<br>  popq %r12<br><br>  movq  0(%rsp), %rax<br>  movq  8(%rsp), %rcx<br>  movq 16(%rsp), %rdi<br>  movq 32(%rsp), %rsi<br>  movq 40(%rsp), %r8<br>  movq 48(%rsp), %r9<br>  movq 56(%rsp), %r10<br>  movq 64(%rsp), %r11<br><br>  movq  96(%rsp), %xmm0<br>  movq 112(%rsp), %xmm1<br>  movq 128(%rsp), %xmm2<br>  movq 144(%rsp), %xmm3<br>  movq 160(%rsp), %xmm4<br>  movq 176(%rsp), %xmm5<br>  movq 192(%rsp), %xmm6<br>  movq 208(%rsp), %xmm7<br>  movq 224(%rsp), %xmm8<br>  movq 240(%rsp), %xmm9<br>  movq 256(%rsp), %xmm10<br>  movq 272(%rsp), %xmm11<br>  movq 288(%rsp), %xmm12<br>  movq 304(%rsp), %xmm13<br>  movq 320(%rsp), %xmm14<br>  movq 336(%rsp), %xmm15<br><br>  leaq 352(%rsp), %rsp<br><br>  jmp __afl_return<br><br></code></pre></td></tr></tbody></table></figure><p><code>__afl_maybe_log()</code>伪代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64* __afl_area_ptr;<br>__int64 __afl_prev_loc;<br><span class="hljs-type">int</span> __afl_fork_pid;<br><span class="hljs-type">int</span> __afl_temp;<br>__int8 __afl_setup_failure;<br>__int64* __afl_global_area_ptr;<br><br><span class="hljs-type">void</span> _afl_maybe_log(__int64 random)<br>{<br>    <br>  __int64 flags;<br>  <span class="hljs-type">void</span>* shmaddr;<br>  <br>  v5 = v4;<br>  v6 = __afl_area_ptr;<br>  <span class="hljs-keyword">if</span> ( !__afl_area_ptr )<br>  {<br>    <span class="hljs-keyword">if</span> ( __afl_setup_failure )<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> ( __afl_global_area_ptr )<br>    {<br>      __afl_area_ptr = __afl_global_area_ptr;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-type">char</span>* id = getenv(<span class="hljs-string">"__AFL_SHM_ID"</span>);<br>      <span class="hljs-keyword">if</span> ( !id || __afl_area_ptr = shmat(atoi(id), shmaddr, flags) )<br>      {<br>        __afl_setup_failure++;<br>        <span class="hljs-keyword">return</span>;<br>      }<br>      __afl_global_area_ptr = __afl_area_ptr;<br>      <span class="hljs-keyword">if</span> ( write(<span class="hljs-number">199</span>, &amp;_afl_temp, <span class="hljs-number">4</span>) == <span class="hljs-number">4</span> )<br>      {<br>        <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>        {<br>          <span class="hljs-type">int</span> pid = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> ( read(<span class="hljs-number">198</span>, &amp;_afl_temp, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span> )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">if</span> ( __afl_fork_pid = fork() &lt; <span class="hljs-number">0</span> )<br>             <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 退出</span><br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !__afl_fork_pid ){<br>            <span class="hljs-comment">// 子进程</span><br>            close(<span class="hljs-number">198</span>);  <span class="hljs-comment">// 关闭这两个管道</span><br>      close(<span class="hljs-number">199</span>);<br>__afl_area_ptr[random ^ __afl_prev_loc]++;<br>            __afl_prev_loc = random &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>          }<span class="hljs-keyword">else</span>{<br>            <span class="hljs-comment">// 父进程（forkserver）</span><br>          write(<span class="hljs-number">199</span>, &amp;__afl_fork_pid, <span class="hljs-number">4</span>);  <span class="hljs-comment">// 将pid写入管道? 作用是啥?</span><br>          <span class="hljs-keyword">if</span> ( waitpid(__afl_fork_pid, &amp;__afl_temp, <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span> )<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 退出</span><br>          write(<span class="hljs-number">199</span>, &amp;__afl_temp, <span class="hljs-number">4</span>);     <span class="hljs-comment">// 这里将__afl_temp写回有什么用？</span><br>          }<br>        }<br>      }<br>    }<br>  }<span class="hljs-keyword">else</span>{<br>      __afl_area_ptr[random ^ __afl_prev_loc]++;<br>      __afl_prev_loc = random &gt;&gt; <span class="hljs-number">1</span>;<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 上述插桩残留一个问题：</p><p>​父进程的主要作用是维持一个<code>fork-server</code>，那它与AFL之间通过一个管道进行通信，但通信的具体细节是啥呢？</p><h4 id="4-与AFL通信"><a href="#4-与AFL通信" class="headerlink" title="4. 与AFL通信"></a>4. 与AFL通信</h4><ul><li><p>在AFL中，<code>afl-fuzz</code>中<code>init_forkserver()</code>是初始化forkserver的函数：</p><ul><li>在该函数中，<code>afl-fuzz</code>会<code>fork</code>出一个子进程，并为管道分配新的fd（198 ==&gt; 控制管道<code>ctl_pipe[0]</code>，199 ==&gt; 状态管道<code>st_pipe[0]</code>）。而这个子进程<code>execv</code>一个被测程序，这个被测程序（i.e. fork-server）在调用第一个<code>__afl_maybe_log()</code>函数时，首先会向状态管道写入4字节的任意数据，然后将在while循环中的第一个<code>read(198, &amp;_afl_temp, 4)</code>处阻塞，等待<code>AFL-fuzzer</code>发来信息；</li><li>而在<code>afl-fuzz</code>父进程中，通过读取状态管道4字节的数据来判断是否成功启用<code>fork-server</code></li></ul></li><li><p>在AFL中，<code>run_target()</code>将通知<code>fork-server</code>出一个新的子进程来跑模糊测试生成的测试用例：</p><ul><li><code>afl-fuzz</code>进程将4个字节的超时时间写入到控制管道</li><li><code>fork-server</code>在读取到4个字节（0）之后，将停止阻塞。然后<code>fork()</code>出一个新的子进程来跑实际的被测目标，<code>pid</code>将通过状态管道送回给<code>afl-fuzzer</code>，然后收集覆盖率信息。这里<code>fork-server</code>将这读入的四字节0用于<code>waitpid()</code>的第二个参数，然后等待子进程执行完毕。子进程执行完毕之后，<code>fork-server</code>再向状态管道写入4字节，表明被测程序执行完毕</li><li><code>afl-fuzz</code>根据<code>fork</code>出来的被测程序<code>pid</code>的结束信号和覆盖率信息做进一步的分析处理</li></ul></li><li><p>流程图如下所示。其中 ①→②→③ 为创建<code>fork-server</code>的过程，④→⑤→⑥→⑦→⑧→⑨ 为一次完整的<code>run_target()</code>的过程。</p></li></ul><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/13.png"></p><center name="pic13">图13 AFL与fork-server通信流程图</center><h3 id="b-基于LLVM的插桩"><a href="#b-基于LLVM的插桩" class="headerlink" title="b. 基于LLVM的插桩"></a>b. 基于LLVM的插桩</h3><ul><li>afl-clang-fast、afl-clang-fast++</li><li>基于LLVM <strong>Pass</strong>实现</li></ul><h4 id="1-afl-clang-fast-c"><a href="#1-afl-clang-fast-c" class="headerlink" title="1. afl-clang-fast.c"></a>1. afl-clang-fast.c</h4><ul><li><p>是clang和clang++的一个wrapper，根据具体调用的afl-clang-fast(++)来区分</p><ul><li>afl-clang-fast++是afl-clang-fast的一个软链接，如下所示：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ll afl-clang-fast afl-clang-fast++<br>-rwxrwxr-x 1 chan chan 24608 Nov 28 18:36 afl-clang-fast*<br>lrwxrwxrwx 1 chan chan    14 Nov 28 18:36 afl-clang-fast++ -&gt; afl-clang-fast*<br></code></pre></td></tr></tbody></table></figure></li><li><p>与<strong>llvm Pass</strong>（<code>afl-llvm-pass.so</code>）结合使用：使用<code>-Xclang</code>让clang运行用户自定义的<strong>Pass</strong></p><ul><li>与<code>afl-gcc</code>的区别：Pass在<strong>编译器运行时</strong>进行插桩，而<code>afl-gcc</code>对<strong>编译器运行结束后</strong>生成的汇编文件进行插桩</li></ul></li><li><p><strong>源码解析</strong>：</p><ul><li><p><code>find_obj()</code>：寻找<code>afl-llvm-rt.o</code>目标文件，并将AFL路径保存到<code>obj_path</code>变量中</p></li><li><p><code>edit_params()</code>：构造新的编译命令行选项<code>cc_params</code>，将<code>argv</code>中的选项拷贝到<code>cc_params</code>中，同时提供一些必要的编辑：</p><ul><li><p>首先对<code>argv[0]</code>进行匹配，即进行分流：</p><p><code>afl-clang-fast++</code> =&gt; <code>clang++</code></p><p><code>afl-clang-fast</code> =&gt; <code>clang</code></p></li><li><p>如果使用<code>trace_pc</code>模式，则在<code>cc_params</code>后追加<code>-fsanitize-coverage=trace-pc-guard</code>；否则追加两个选项：<code>-Xclang -load</code>（加载包含插件注册表的动态库）和<code>-Xclang obj_path/afl-llvm-pass.so</code>。此外，还要额外追加一个<code>-Qunused-arguments</code> [20] 选项来静默关于未使用参数的警告。</p></li><li><p>将<code>argv[]</code>中其他的选项拷贝到<code>cc_params</code>，在此期间将更新一些变量值</p></li></ul><table><thead><tr><th>选项</th><th>变量</th></tr></thead><tbody><tr><td>-m32、armv7a-linux-androideabi</td><td>bit_mode = 32</td></tr><tr><td>-m64</td><td>bit_mode = 64</td></tr><tr><td>-x &lt;language&gt; (将输入文件试为某一语言的文件)</td><td>x_set = 1 ==&gt; “-x none”</td></tr><tr><td>-fsanitize=address、-fsanitize=memory</td><td>asan_set = 1</td></tr><tr><td>FORTIFY_SOURCE</td><td>fortify_set = 1</td></tr><tr><td>-Wl,-z,defs</td><td>不追加到<code>cc_params</code>中</td></tr><tr><td>-Wl,–no-undefined</td><td>不追加到<code>cc_params</code>中</td></tr></tbody></table><ul><li>后面追加的一些选项与<code>afl-gcc</code>相似，不再赘述。这里需要注意的是，如果使用了<code>trace pc</code>模式，<code>AFL_INST_RATIO</code>将不可使用。<code>afl-clang-fast</code>使用<code>-D</code>选项向<code>cc_params</code>追加了一些隐式的<code>#define</code>，分别是：</li></ul><table><thead><tr><th>值</th></tr></thead><tbody><tr><td>__AFL_HAVE_MANUAL_CONTROL=1</td></tr><tr><td>__AFL_COMPILER=1</td></tr><tr><td>FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1</td></tr><tr><td>__AFL_LOOP(_A)=({ static volatile char *_B __attribute__((used)); _B = (char*) “##SIG_AFL_PERSISTENT##”; __attribute__((visibility("default"))) int _L(unsigned int) __asm__("__afl_persistent_loop"); _L(_A); })</td></tr><tr><td>__AFL_INIT()=do  { static volatile char *_A __attribute__((used));   _A = (char*) “##SIG_AFL_DEFER_FORKSRV##”; __attribute__((visibility("default")))  void _I(void) __asm__("__afl_manual_init"); _I(); } while (0)</td></tr></tbody></table><ul><li>最后，根据<code>bit_mode</code>向<code>cc_params</code>后追加对应的目标文件 [ 默认为 <code>afl-llvm-rt.o</code>，32位 <code>afl-llvm-rt-32.o</code>，64位 <code>afl-llvm-rt-64.o</code> ]</li></ul></li><li><p><code>execvp()</code>：执行构造的命令行，即<code>cc_params</code>。该命令行通过<code>-Xclang</code>运行<strong>Pass</strong>，然后将<code>afl-llvm-rt.o</code>目标文件链接到最终生成的<code>afl-clang-fast</code>。</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 这里有个问题，<code>afl-llvm-pass.so.cc</code>的作用显而易见，就是构造执行<strong>Pass</strong>插桩的动态链接库，但目标文件<code>afl-llvm-rt.o</code>的作用是什么呢？</p></li></ul></li></ul><h4 id="2-afl-llvm-pass-so-cc"><a href="#2-afl-llvm-pass-so-cc" class="headerlink" title="2. afl-llvm-pass.so.cc"></a>2. afl-llvm-pass.so.cc</h4><ul><li><p>生成执行插桩<strong>Pass</strong>的动态链接库</p></li><li><p><code>AFLCoverage::runOnModule</code>：用于执行转换（插桩）</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 创建两个全局变量：</p><p><code>__afl_area_ptr</code> 用于保存共享内存区域的地址；<code>__afl_prev_loc</code>用于存放前一个基本块ID右移一位的值</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 遍历所有基本块BB：</p><ul><li>随机生成一个基本块ID值<code>cur_loc</code></li><li>载入全局变量<code>__afl_prev_loc</code></li><li>载入全局共享内存区域指针<code>__afl_area_ptr</code>，计算值<code>cur_loc xor __afl_prev_loc</code></li><li>更新比特位图：将上述计算值作为索引，在<code>__afl_area_ptr</code>中寻址，让对应的字节值+1</li><li>更新<code>__afl_prev_loc</code>的值：<code>__afl_prev_loc = cur_loc &gt;&gt; 1</code></li></ul></li><li><p><code>registerAFLPass</code>用来注册该<strong>AFLCoverage Pass</strong>类</p></li></ul><h4 id="3-afl-llvm-rt-o-c"><a href="#3-afl-llvm-rt-o-c" class="headerlink" title="3. afl-llvm-rt.o.c"></a>3. afl-llvm-rt.o.c</h4><ul><li><p>该文件的主要作用有：</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在被测目标程序执行之前调用<code>__afl_auto_init()</code>初始化函数：</p><ul><li>使用<code>__attribute__((constructor(CONST_PRIO)))</code>关键字，让该函数在被测目标程序调用<code>main()</code>函数之前执行 [21]</li><li>调用<code>__afl_manual_init()</code>函数：<ul><li><code>__afl_map_shm()</code>函数用来获取共享内存区域地址</li><li><code>__afl_start_forkserver()</code>函数用来启动<code>fork-server</code>，其整体逻辑与<a href="#pic13">图13</a>一样，此处不再赘述【注：这里是死循环，用来<code>fork</code>子进程】</li></ul></li></ul><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Persistent mode</strong></p><ul><li><p>在源文件中设置<code>__AFL_LOOP(int)</code>后启用</p></li><li><p>如前所述，<code>afl-clang-fast</code>在编译目标程序时，会使用<code>-D</code>选项引入一个<code>#define __AFL_LOOP(_A)</code>的宏定义，该宏定义会将源代码中的<code>__AFL_LOOP(int)</code>替换为<code>__afl_persistent_loop(int)</code>【通常<code>__AFL_LOOP()</code>与<code>while()</code>结合使用】</p></li><li><p><code>int __afl_persistent_loop(unsigned int max_cnt)</code>：</p><ul><li>在第一次调用该函数时，该函数会清空<code>__afl_area_ptr</code>的值，即清空覆盖率跟踪位图信息（在达到<code>__AFL_LOOP()</code>之前的所有覆盖率信息都将被清空），然后将<code>__afl_area_ptr[0]</code>置为1，<code>__afl_prev_loc</code>置为0</li><li>在非第一次调用该函数时（如与<code>while()</code>循环一起使用时），说明前一轮的覆盖率信息已经统计完成，在轮数不为0的情况下，首先<code>raise(SIGSTOP)</code>，表示程序暂停，然后<code>fork-server</code>的<code>waitpid</code>将直接返回，程序仍在运行中，然后该覆盖率信息将被AFL处理，同时生成下一个测试用例投喂给目标程序</li><li><code>fork-server</code>再接收到AFL生成了新的测试用例并需要运行目标程序的消息之后，由于先前的程序处于暂停状态，<code>fork-server</code>将不会<code>fork()</code>一个新的子进程，而是向之前暂停的子进程发送<code>SIGCONT</code>（继续运行）的信号，然后又回到上一步的循环中，直到循环次数结束</li><li>循环次数结束后，<code>__afl_area_ptr</code>会重定向到一个虚假的位图<code>__afl_area_initial</code>中，避免收集<code>__AFL_LOOP()</code>后面执行的代码覆盖率</li></ul></li><li><p>代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(__AFL_LOOP(<span class="hljs-number">1000</span>)) {<br>   <span class="hljs-comment">// AFL只会统计该循环中的代码覆盖率</span><br>    <span class="hljs-comment">// 优点：速度快，避免频繁的调用程序的初始化操作；</span><br>    <span class="hljs-comment">//      能够通过一定数量输入的投喂使得程序到达某一状态，因此可以覆盖到更深层次的代码（这对于网络程序来说具有奇效）</span><br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>流程图：</p><p><img src="/2022/12/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%96%E6%9E%90AFL%E6%8F%92%E6%A1%A9/14.png"></p><center>图14 persistent mode流程图</center></li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Deferred forkserver模式</strong>：</p><ul><li><p>由环境变量<code>__AFL_DEFER_FORKSRV</code>控制，用于控制在何时启动forkserver，避免一些长时间的初始化操作影响吞吐量</p></li><li><pre><code class="c">__AFL_INIT(); // the forkserver will be raised here!// do something ...</code></pre></li></ul><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>trace_pc_guard模式</strong>：</p><ul><li><p>trace_pc_guard模式对所有的边进行插桩，插桩值为guard</p></li><li><p><code>__sanitizer_cov_trace_pc_guard_init(start, stop)</code>：</p><ul><li>替换每个<code>trace_pc</code>处的<code>guard</code>值（随机数），不进行插桩的<code>guard</code>值设置为0</li></ul></li><li><p><code>__sanitizer_cov_trace_pc_guard(guard)</code>：</p><ul><li>更新共享内存数据：对比特位图中索引为<code>guard</code>的字节+1</li></ul></li></ul><p>trace_pc_guard编译过程中遇到的问题：</p><ol><li><p>makefile 中定义 <code>AFL_TRACE_PC = 1</code></p></li><li><p>如果输出如下显示，则将afl-clang-fast.c 的第133行替换为：<code>c_params[cc_par_cnt++] = "-sanitizer-coverage-level=0";</code> </p><blockquote><p>clang (LLVM option parsing): Unknown command line argument ‘-sanitizer-coverage-block-threshold=0’.  Try: ‘clang (LLVM option parsing) -help’<br>clang (LLVM option parsing): Did you mean ‘-sanitizer-coverage-pc-table=0’?</p></blockquote></li></ol></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h2><ol><li><p><a href="https://en.wikibooks.org/wiki/GNU_C_Compiler_Internals/Print_version">GNU C 编译器内部/打印版 - 维基教科书，开放世界的开放书籍 (wikibooks.org)</a></p></li><li><p><a href="https://stackoverflow.com/questions/34502255/ast-from-c-code-with-preprocessor-directives">gcc - AST from c code with preprocessor directives - Stack Overflow</a></p></li><li><p><a href="https://stackoverflow.com/questions/15800230/how-can-i-dump-an-abstract-syntax-tree-generated-by-gcc-into-a-dot-file">graphviz - How can I dump an abstract syntax tree generated by gcc into a .dot file? - Stack Overflow</a></p></li><li><p><a href="https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html">GIMPLE (GNU Compiler Collection (GCC) Internals)</a></p></li><li><p><a href="https://wiki.aalto.fi/pages/viewpage.action?pageId=55374641">GCC GENERIC - Advanced course on compilers - Aalto University Wiki</a></p></li><li><p><a href="https://blog.csdn.net/qq_36287943/article/details/105458166">GCC - GIMPLE IR 学习一_zhugl0的博客-CSDN博客_gimple</a></p></li><li><p><a href="https://wiki.aalto.fi/pages/viewpage.action?pageId=55375140">GCC RTL - Advanced course on compilers - Aalto University Wiki</a></p></li><li><p><a href="https://www.cs.nmsu.edu/~rth/cs/cs271/notes/Compiling.html">CS271: Compiling (nmsu.edu)</a></p></li><li><p><a href="https://getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io/zh_CN/latest/ch04.html">第4章 前端 — Getting Started with LLVM Core Libraries 文档 (getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io)</a></p></li><li><p><a href="https://stackoverflow.com/questions/14163208/how-to-link-c-object-files-with-ld">linker - How to link C++ object files with ld - Stack Overflow</a></p></li><li><p><a href="https://getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io/zh_CN/latest/ch05.html">第5章 LLVM中间表示 — Getting Started with LLVM Core Libraries 文档 (getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io)</a></p></li><li><p><a href="https://getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io/zh_CN/latest/ch06.html">第6章 后端 — Getting Started with LLVM Core Libraries 文档 (getting-started-with-llvm-core-libraries-zh-cn.readthedocs.io)</a></p></li><li><p><a href="https://discourse.llvm.org/t/llc-view-dag-combine1-dags/1876/5">LLC -view-dag-combine1-dags - Beginners - LLVM Discussion Forums</a></p></li><li><p><a href="https://blog.csdn.net/weixin_46222091/article/details/104414187">指令调度概念原理介绍_ronnie88597的博客-CSDN博客</a></p></li><li><p><a href="https://mudongliang.github.io/2016/05/24/stack-protector.html">GCC Stack Protector options (mudongliang.github.io)</a></p></li><li><p><a href="https://stackoverflow.com/questions/24787769/what-are-lfb-lbb-lbe-lvl-loc-in-the-compiler-generated-assembly-code">c - What are .LFB .LBB .LBE .LVL .loc in the compiler generated assembly code - Stack Overflow</a></p></li><li><p><a href="https://sourceware.org/binutils/docs-2.18/as/LNS-directives.html#LNS-directives">LNS directives - Using as (sourceware.org)</a></p></li><li><p><a href="https://sourceware.org/binutils/docs-2.18/as/Symbol-Names.html">Symbol Names - Using as (sourceware.org)</a></p></li><li><p><a href="https://github.com/gcc-mirror/gcc/blob/master/gcc/dwarf2out.cc">gcc/gcc at master · gcc-mirror/gcc (github.com)</a></p></li><li><p><a href="https://clang.llvm.org/docs/genindex.html">Index — Clang 16.0.0git documentation (llvm.org)</a></p></li><li><p><a href="https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Common-Function-Attributes.html">Common Function Attributes - Using the GNU Compiler Collection (GCC)</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>AFL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Boofuzz源码解析</title>
    <link href="/2022/09/27/Boofuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/09/27/Boofuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="boofuzz源码分析"><a href="#boofuzz源码分析" class="headerlink" title="boofuzz源码分析"></a>boofuzz源码分析</h1><p>以<code>ftp_simple.py</code>为例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">session = Session(target=Target(connection=TCPSocketConnection(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">21</span>)))  <span class="hljs-comment"># 创建session</span><br><br>define_proto(session=session)  <span class="hljs-comment"># 定义proto</span><br><br>session.fuzz()<span class="hljs-comment"># 开始模糊测试</span><br></code></pre></td></tr></tbody></table></figure><p>其中，<code>define_proto()</code> 将调用<code>session.connect()</code>构造调用流图。如果<code>connect(node1)</code>的参数只有只有一个，那么该节点将保存在<code>self.nodes</code>变量中，同时会创建<code>self.root</code>到该节点的边；如果<code>connect(node1, node2)</code>，node1和node2节点信息都将保存在<code>self.nodes</code>变量中，同时会创建node1到node2的边</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">session.connect(user)<br>   session.connect(user, passw)<br>   session.connect(passw, stor)<br>   session.connect(passw, retr)<br></code></pre></td></tr></tbody></table></figure><p><code>session.fuzz()</code>核心代码在<code>_main_fuzz_loop</code>中</p><p>在<code>_main_fuzz_loop</code>中：</p><p><code>self.server_init()</code>：启动<code>web_interface_thread</code>（网络接口线程：默认为localhost:26000）</p><p><code>self._start_target()</code>：启动一个boofuzz.sessions.Target实例</p><p>相关变量</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>self.num_cases_actually_fuzzed</td><td>实际fuzz的测试用例数</td></tr><tr><td>mutation_context</td><td>变异上下文</td></tr><tr><td>fuzz_case_iterator</td><td>fuzz测试用例迭代器</td></tr></tbody></table><p>遍历<code>fuzz_case_iterator</code>中的<code>mutation_context</code>，</p><ul><li><p>如果设置了<code>restart_interval</code>，表明每次运行<code>restart_interval</code>个测试用例后重启target</p></li><li><p><code>_fuzz_current_case()</code>函数对当前的测试用例进行模糊测试，而该测试用例由<code>fuzz_case_iterator</code>控制：</p><ul><li><p><code>_pause_if_pause_flag_is_set()</code>函数<code>pause flag</code>是否被唤起，如果被唤起，则进入一个无限循环中等待其变为False（Why？）</p></li><li><p><code>self._test_case_name()</code>函数用于构造测试用例名，测试用例名字格式为：<code>message_path:[qualified_name1:mutation.index1,  qualified_name2:mutation.index2, ...]</code>，例如<code>user:[user.key:0]</code></p></li><li><p><code>self._fuzz_data_logger.open_test_case()</code>记录测试用例，默认是讲保存插入测试用例信息的sql语句添加到<code>self._queue</code>队列中。（在何处执行？在<a href="#logger_close">此处</a>执行）</p></li><li><p><code>self._open_connection_keep_trying()</code>尝试与服务器进行连接（建立<strong>套接字</strong>并<strong>连接</strong>），如果是因为可用套接字数不够导致的错误，那就再进行50轮*5s的判断【如果在这段时间内有可以创建套接字，则继续进行，否则将报错】。</p></li><li><p><code>self._pre_send(target)</code>：不知道干啥的</p></li><li><p><code>self.transmit_fuzz()</code>：</p><ul><li><code>self.fuzz_node.render()</code>：渲染模糊测试节点数据</li><li>渲染完成后，由self.targets[0]来<strong>发送</strong>该数据</li><li>如果<code>self._receive_data_after_fuzz</code>为<code>True</code>，则将返回的信息保存到received变量中</li></ul></li><li><p><code>self._check_for_passively_detected_failures()</code>：被动检查错误。首先，需要遍历<code>target.monitors</code>该数组两遍，第一遍检查所有的monitor，判断其是否报告一个错误，如果报告了错误，那么需要收集一个崩溃信息【不确定是否monitor一定会提供一个崩溃信息，但以防万一还是要检查一下】；在第二遍，我们尝试从未检测到崩溃的监视器中获取崩溃概要作为补充信息。如果未检测到错误，则输出”No crash detected.”，并返回是否崩溃的标志</p></li><li><p>如果<code>self._reuse_target_connection</code>（重用目标连接）为假，那么直接关闭连接</p></li><li><p>最后进行三个操作：<code>self._process_failures()</code>【处理错误】、<span id="logger_close"><code>self._fuzz_data_logger.close_test_case()</code></span>【将日志写到数据库中】和<code>self.export_file()</code>【将对象值导出到本地磁盘/需要设置<code>self.session_filename</code>】</p></li></ul></li></ul><hr><p>详解<code>fuzz_case_iterator</code>：</p><ul><li>最先传入的是<code>self._generate_mutations_indefinitely(max_depth=max_depth)</code> 【默认 max_depth 为 <strong>None</strong> 】</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_mutations_indefinitely</span>(<span class="hljs-params">self, max_depth=<span class="hljs-literal">None</span>, path=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">"""Yield MutationContext with n mutations per message over all messages, with n increasing indefinitely."""</span><br>    depth = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> max_depth <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> depth &lt;= max_depth:  <span class="hljs-comment"># 当max_depth为None时，这里是一个无限循环</span><br>        valid_case_found_at_this_depth = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 一个标志位，表示是否在该深度找到合法的测试用例</span><br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> self._generate_n_mutations(depth=depth, path=path): <span class="hljs-comment"># 调用_generate_n_mutations()生成可迭代数据</span><br>            valid_case_found_at_this_depth = <span class="hljs-literal">True</span> <span class="hljs-comment"># 将是否在该深度找到合法的测试用例的标志位设置为1</span><br>            <span class="hljs-keyword">yield</span> m  <span class="hljs-comment"># 生成器返回m</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid_case_found_at_this_depth: <span class="hljs-comment"># 表示该层没有生成任何有效数据，则退出循环</span><br>            <span class="hljs-keyword">break</span><br>        depth += <span class="hljs-number">1</span> <span class="hljs-comment"># 深度++</span><br></code></pre></td></tr></tbody></table></figure><ul><li>接着就是分析内层生成器，i.e. <code>self._generate_n_mutations(depth=depth, path=path)</code>：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_n_mutations</span>(<span class="hljs-params">self, depth, path</span>):<br>    <span class="hljs-string">"""Yield MutationContext with n mutations per message over all messages."""</span><br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> self._iterate_protocol_message_paths(path=path):  <span class="hljs-comment"># 遍历path（消息）</span><br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> self._generate_n_mutations_for_path(path, depth=depth): <span class="hljs-comment"># 为每一个消息进行n次变异</span><br>            <span class="hljs-keyword">yield</span> m<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>self._iterate_protocol_message_paths(path=path)</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_iterate_protocol_message_paths</span>(<span class="hljs-params">self, path=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    Iterates over protocol and yields a path (list of Connection) leading to a given message).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        path (list of Connection): Provide a specific path to yield only that specific path.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Yields:</span><br><span class="hljs-string">        list of Connection: List of edges along the path to the current one being fuzzed.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Raises:</span><br><span class="hljs-string">        exception.SulleyRuntimeError: If no requests defined or no targets specified</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-comment"># we can't fuzz if we don't have at least one target and one request.</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.targets:<br>        <span class="hljs-keyword">raise</span> exception.SullyRuntimeError(<span class="hljs-string">"No targets specified in session"</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.edges_from(self.root.<span class="hljs-built_in">id</span>):<br>        <span class="hljs-keyword">raise</span> exception.SullyRuntimeError(<span class="hljs-string">"No requests specified in session"</span>)<br><br>    <span class="hljs-keyword">if</span> path <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">yield</span> path<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self._iterate_protocol_message_paths_recursive(this_node=self.root, path=[]):  <span class="hljs-comment"># 最关键的是该函数</span><br>            <span class="hljs-keyword">yield</span> x<br></code></pre></td></tr></tbody></table></figure><p>该函数<code>self._iterate_protocol_message_paths_recursive</code>的作用是返回一个以边构成的路径（请求序列）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_iterate_protocol_message_paths_recursive</span>(<span class="hljs-params">self, this_node, path</span>):<br>    <span class="hljs-string">"""Recursive helper for _iterate_protocol.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        this_node (node.Node): Current node that is being fuzzed.</span><br><span class="hljs-string">        path (list of Connection): List of edges along the path to the current one being fuzzed.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Yields:</span><br><span class="hljs-string">        list of Connection: List of edges along the path to the current one being fuzzed.</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-comment"># step through every edge from the current node.</span><br>    <span class="hljs-keyword">for</span> edge <span class="hljs-keyword">in</span> self.edges_from(this_node.<span class="hljs-built_in">id</span>): <span class="hljs-comment"># 遍历请求依赖流图中以this_node.id起始的边（从root开始）</span><br>        <span class="hljs-comment"># keep track of the path as we fuzz through it, don't count the root node.</span><br>        <span class="hljs-comment"># we keep track of edges as opposed to nodes because if there is more then one path through a set of</span><br>        <span class="hljs-comment"># given nodes we don't want any ambiguity.</span><br>        path.append(edge)<br><br>        message_path = self._message_path_to_str(path)<br>        logging.debug(<span class="hljs-string">"fuzzing: {0}"</span>.<span class="hljs-built_in">format</span>(message_path))<br>        self.fuzz_node = self.nodes[path[-<span class="hljs-number">1</span>].dst] <span class="hljs-comment"># 与this_node连接的边的下一个节点（该节点为fuzz节点）</span><br><br>        <span class="hljs-keyword">yield</span> path<br><br>        <span class="hljs-comment"># recursively fuzz the remainder of the nodes in the session graph.</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self._iterate_protocol_message_paths_recursive(self.fuzz_node, path):<br>            <span class="hljs-keyword">yield</span> x<br><br>    <span class="hljs-comment"># finished with the last node on the path, pop it off the path stack.</span><br>    <span class="hljs-keyword">if</span> path:<br>        path.pop()<br></code></pre></td></tr></tbody></table></figure><p>以boofuzz的提供的ftp脚本<code>ftp_simple.py</code>为例，其请求依赖流图如下所示：</p><pre><code class=" mermaid">graph TBa((root))--&gt;b((user))--&gt;c((pass))--&gt;d((stor))c--&gt;e((retr))</code></pre><p><code>_iterate_protocol_message_paths_recursive</code>生成器将会生成path有：<code>[user]</code>, <code>[user, pass]</code>, <code>[user, pass, stor]</code>, <code>[user, pass, retr]</code></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>self._generate_n_mutations_for_path(path, depth=depth)</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_n_mutations_for_path</span>(<span class="hljs-params">self, path, depth</span>):<br>    <span class="hljs-string">"""Yield MutationContext with n mutations for a specific message.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        path (list of Connection): Nodes (Requests) along the path to the current one being fuzzed.</span><br><span class="hljs-string">        depth (int): Yield sets of depth mutations.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Yields:</span><br><span class="hljs-string">        MutationContext: A MutationContext containing one mutation.</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">for</span> mutations <span class="hljs-keyword">in</span> self._generate_n_mutations_for_path_recursive(path, depth=depth):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._mutations_contain_duplicate(mutations):<br>            self.total_mutant_index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">yield</span> MutationContext(message_path=path, mutations={n.qualified_name: n <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> mutations})<br></code></pre></td></tr></tbody></table></figure><p>该函数<code>self._generate_n_mutations_for_path_recursive</code>的作用是</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_n_mutations_for_path_recursive</span>(<span class="hljs-params">self, path, depth, skip_elements=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> skip_elements <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        skip_elements = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">if</span> depth == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> []<br>        <span class="hljs-keyword">return</span><br>    new_skip = skip_elements.copy()<br>    <span class="hljs-keyword">for</span> mutations <span class="hljs-keyword">in</span> self._generate_mutations_for_request(path=path, skip_elements=skip_elements):<br>        new_skip.update(m.qualified_name <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> mutations)<br>        <span class="hljs-keyword">for</span> ms <span class="hljs-keyword">in</span> self._generate_n_mutations_for_path_recursive(path, depth=depth - <span class="hljs-number">1</span>, skip_elements=new_skip):<br>            <span class="hljs-keyword">yield</span> mutations + ms<br></code></pre></td></tr></tbody></table></figure><p><code>self._generate_mutations_for_request</code> –&gt; <code>self.fuzz_node.get_mutations</code> –&gt; <code>self.mutations</code> –&gt; <code>item.get_mutations()</code>–&gt;<code>mutations() [in string.py]</code>，</p><p>这里需要注意的是，<code>boofuzz/primitives/string.py</code>中定义了一些字典值，存放在变量<code>self._fuzz_library</code>中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># store fuzz_library as a class variable to avoid copying the ~70MB structure across each instantiated primitive.</span><br>    <span class="hljs-comment"># Has to be sorted to avoid duplicates</span><br>    _fuzz_library = [<br>        <span class="hljs-string">"!@#$%%^#$%#$@#$%$$@#$%^^**(()"</span>,<br>        <span class="hljs-string">""</span>,  <span class="hljs-comment"># strings ripped from spike (and some others I added)</span><br>        <span class="hljs-string">"$(reboot)"</span>,<br>        <span class="hljs-string">"$;reboot"</span>,<br>        ...<br>        <span class="hljs-string">"|touch /tmp/SULLEY"</span>,  <span class="hljs-comment"># command injection.</span><br>        <span class="hljs-string">"||reboot;"</span>,<br>        <span class="hljs-string">"||reboot|"</span>,<br>    ]<br></code></pre></td></tr></tbody></table></figure><p>该调用链每次会构造一个变异类，然后在<code>_main_fuzz_loop</code>模糊测试大循环中使用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_main_fuzz_loop</span>(<span class="hljs-params">self, fuzz_case_iterator</span>):<br>...<br>            <span class="hljs-keyword">for</span> mutation_context <span class="hljs-keyword">in</span> fuzz_case_iterator:  <span class="hljs-comment"># fuzz_case_iterator --&gt; 变异产生迭代器</span><br>            ...<br></code></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单来说，boofuzz总体流程是：1. <strong>遍历请求序列流图（树）并构造序列</strong>；2. <strong>产生变异数据</strong>；3. <strong>发送到目标服务器</strong></p><p>boofuzz整体框架如下图所示：</p><p><img src="/2022/09/27/Boofuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/1.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>协议fuzz</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GraphFuzz源码解析</title>
    <link href="/2022/07/25/GraphFuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/07/25/GraphFuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="GraphFuzz源码解析"><a href="#GraphFuzz源码解析" class="headerlink" title="GraphFuzz源码解析"></a>GraphFuzz源码解析</h1><ul><li>核心代码位于<code>core</code>目录下<ul><li><code>graph.hpp</code>为图结构体头文件，主要包含一个结构体<code>NodeLink</code>和一个类<code>TGraph</code></li><li><code>schema.hpp</code>声明了一个类<code>Schema</code>，同时包含<code>ScopeDef</code>、<code>Signature</code>，<code>hash</code>，<code>ScopeTree</code>和<code>TypeTree</code>这五个结构体</li><li><code>harness.cpp</code>为生成的<code>harness</code>文件，该文件调用<code>libfuzzer</code>的接口来实现相关功能</li></ul></li></ul><h2 id="harness-cpp"><a href="#harness-cpp" class="headerlink" title="harness.cpp"></a>harness.cpp</h2><ul><li><p><code>LLVMFuzzerInitialize()</code>：</p><p>该函数为<code>libfuzzer</code>提供的接口，用于进行模糊测试前的初始化操作：</p><ul><li>for循环体内对命令行参数进行解析：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; *argc; ++i) {<br>    <span class="hljs-comment">// do something to parse cmd line</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>共有14个命令行选项：</p><table><thead><tr><th>支持的命令行选项</th><th>描述</th></tr></thead><tbody><tr><td>–graphfuzz_debug</td><td>是否启用debug</td></tr><tr><td>–graphfuzz_skip_validation</td><td>是否跳过有效性验证</td></tr><tr><td>–graphfuzz_prune_cache</td><td>是否精简缓存</td></tr><tr><td>–graphfuzz_enable_soft_execution</td><td>是否启用软执行（有点类似于forkserver）</td></tr><tr><td>–graphfuzz_ignore_invalid</td><td>是否忽略无效的模式（默认false）</td></tr><tr><td>–graphfuzz_trace_mutations</td><td>是否跟踪变异，如果启用，则会保存相关日志</td></tr><tr><td>–graphfuzz_catch=</td><td>捕获那些异常信号，值为若干个信号编号，用逗号隔开</td></tr><tr><td>–graphfuzz_scope_max_depth=</td><td>设置最大scope_max_depth，默认值为10</td></tr><tr><td>–graphfuzz_context_mutation_prob=</td><td>对上下文变量进行变异的概率，默认为0.95</td></tr><tr><td>–graphfuzz_max_nodes=</td><td>每个图最大节点数，默认为200</td></tr><tr><td>–graphfuzz_schema=</td><td>模式文件重命名，默认为”schema.json”</td></tr><tr><td>–graphfuzz_mutate_one</td><td>–graphfuzz_mutate_one &lt;seed&gt; &lt;input&gt; &lt;output&gt;<br>在初始化阶段对种子进行一次变异</td></tr><tr><td>–graphfuzz_init_corpus</td><td>–graphfuzz_init_corpus &lt;corpus&gt;<br>初始化种子</td></tr></tbody></table><ul><li><p><code>Schema::FromFile()</code>从<code>schema.json</code>中读取模式文件并保存到<code>Schema *global_schema</code>变量中</p></li><li><p>调用<code>Schema::Validate()</code>函数来验证<code>schema</code>是否有效，主要检查每个类是否包含构造或析构函数</p></li><li><p><code>register_signals()</code>：注册信号，主要为 <code>graphfuzz_catch</code> 变量指定的需要捕获的信号添加句柄函数<code>sig_handler</code>，该函数使用<code>siglongjmp()</code>函数让程序<strong>跳转到先前配置的跳转点</strong></p></li><li><p>对种子/语料库进行变异或初始化操作（二选一）</p></li><li><p><code>global_init(orig_argc, orig_argv)</code>执行<code>fuzz_exec.cpp</code>定义的相关方法，用于对参数进行初始化操作，默认情况下为空</p></li></ul></li></ul><hr><ul><li><code>MutateOne()</code>：<ul><li>调用<code>LLVMFuzzerCustomMutator()</code>对种子进行变异，然后将变异后的信息保存到<code>--graphfuzz_mutate_one</code>指定的output中</li></ul></li></ul><hr><ul><li><p><code>LLVMFuzzerCustomMutator()</code>：</p><p>该函数为<code>libfuzzer</code>提供的接口，用于进行自定义的变异：</p><ul><li><p>首先根据模式构建<code>TGraph</code>变量g，然后g读入种子数据并验证其有效性</p><ul><li>如果读入失败或无法通过有效性验证，则根据种子重新创建一个新的图</li><li>否则，则调用<code>TGraph::Mutate</code>方法进行图变异（十选一）</li></ul></li><li><p>将生成的图序列化为字符串，并将变异后的数据更新回缓冲区</p></li></ul></li></ul><hr><ul><li><p><code>LLVMFuzzerCustomCrossOver()</code>：</p><p>该函数为<code>libfuzzer</code>提供的接口，用于两个种子之间自定义交叉变异</p></li></ul><hr><ul><li><p><span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>LLVMFuzzerTestOneInput()</code>：</p><p>该函数为<code>libfuzzer</code>提供的接口，为<code>libfuzzer</code>主模糊测试模块，用于将生成的数据投喂给目标</p><ul><li><p><code>sigsetjmp()</code>函数在<code>LLVMFuzzerTestOneInput()</code>起始处设置跳转点</p></li><li><p>调用<code>shim_init()</code>函数，确保已经获得覆盖信息</p></li><li><p>构建一个<code>TGraph</code>（模板图）的变量g，然后读入生成的数据（是否成功读入），并检验其合法性（是否有构造和析构）</p></li><li><p>调用<code>TGraph</code>类的<code>GetOrderedNodes()</code>方法得到layer递增的节点序列，然后遍历每一个节点：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span> *ref[nodes.<span class="hljs-built_in">size</span>()][MAX_CONN]; <span class="hljs-comment">// 生成一个二维指针数组</span><br></code></pre></td></tr></tbody></table></figure><ul><li>首先载入输入，具体来说：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span> *in_ref[n.<span class="hljs-built_in">in_ref_size</span>()];<br><span class="hljs-comment">// ...</span><br>in_ref[i] = ref[n.<span class="hljs-built_in">index</span>()][i]; <span class="hljs-comment">// 将指针值赋值给in_ref[i]，显然默认为0</span><br></code></pre></td></tr></tbody></table></figure><ul><li>然后调用函数端点，</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">void</span> (*func)(<span class="hljs-type">void</span> **, <span class="hljs-type">void</span> **, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *) = FUZZER_SHIMS[n.<span class="hljs-built_in">type</span>()];<br><span class="hljs-built_in">func</span>(in_ref, out_ref, context); <span class="hljs-comment">// 将in_ref, out_ref和context投喂给端点</span><br></code></pre></td></tr></tbody></table></figure><ul><li>最后，将输出拷贝到结果中（注：结果在函数端点调用时已经写到out_ref中），</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n.<span class="hljs-built_in">out_ref_size</span>(); ++i) {<br>    NodeRef r = n.<span class="hljs-built_in">out_ref</span>(i);<br>    ref[r.<span class="hljs-built_in">node_idx</span>()][r.<span class="hljs-built_in">conn_idx</span>()] = out_ref[i]; <span class="hljs-comment">// 如果当前输出作为下一个连接节点的输入，那么更新ref数组</span><br>    <span class="hljs-keyword">if</span> (graphfuzz_debug) {<br>        cout &lt;&lt; <span class="hljs-string">"Got output: "</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" :: "</span> &lt;&lt; out_ref[i] &lt;&lt; endl;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><img src="/2022/07/25/GraphFuzz%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/o5.png"></p></li><li><p>调用<code>shim_finalize()</code></p></li></ul></li></ul><hr><ul><li><code>graphfuzz_try()</code>：<ul><li>用于实现软执行，在主模糊测试流程中未使用</li></ul></li></ul><h2 id="graph-hpp"><a href="#graph-hpp" class="headerlink" title="graph.hpp"></a>graph.hpp</h2><ul><li>该头文件定义了一些图相关的结构体和方法，其中最重要的是<code>Mutate()</code>方法</li></ul><hr><ul><li><p><code>Mutate()</code>：</p><p>调用链<span class="github-emoji"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> – <strong>harness.cpp</strong>：<code>MutateOne()</code> $\rightarrow$ <code>LLVMFuzzerCustomMutator()</code> $\rightarrow$ <code>TGraph::Mutate()</code></p><p>分为两类变异：</p><ul><li>上下文变异<code>MutateContext()</code>【概率：默认为0.95】</li><li>基于图变异（九选一）【具体详见论文】：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span> (mut_choice) {<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-built_in">MutateCrosslink</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">MutateTruncateDestructor</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">MutateTruncateConstructor</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">MutateLayerIndex</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">MutateSwapEquivalent</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">MutateExtendDestructor</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-built_in">MutateExtendConstructor</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">MutateSpliceIn</span>(); <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-built_in">MutateSpliceOut</span>(); <span class="hljs-keyword">break</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 存在问题：变异方法调度仅使用概率，可能存在某种harness序列上下文过度变异【同时可能会导致图变异饿死】或者上下文变异不足【导致bug遗漏，可能会在后面图变异生成相同的变异模式（或类似的变异模式？）】</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL++源码浅析</title>
    <link href="/2022/07/06/AFLplusplus%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <url>/2022/07/06/AFLplusplus%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL-源码解析"><a href="#AFL-源码解析" class="headerlink" title="AFL++源码解析"></a>AFL++源码解析</h1><h2 id="afl-fuzz-c"><a href="#afl-fuzz-c" class="headerlink" title="afl-fuzz.c"></a>afl-fuzz.c</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><strong>main函数</strong></h3><ul><li><code>rand_set_seed()</code>设置四个种子：afl-&gt;init_seed, afl-&gt;rand_seed[0-2]</li><li>while循环对选项进行判断，支持的选项有：<code>"+Ab:B:c:CdDe:E:hi:I:f:F:g:G:l:L:m:M:nNOo:p:RQs:S:t:T:UV:WXx:YZ"</code>：</li></ul><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-i dir</code></td><td>测试用例输入目录</td></tr><tr><td><code>-o dir</code></td><td>模糊测试发现的输出目录</td></tr><tr><td><code>-p schedule</code></td><td>能量调度计算一个种子表现分数：fast（默认），explore，exploit，seek，rare，mmopt，coe，lin，quad</td></tr><tr><td><code>-f file</code></td><td>目标程序读入数据的位置（默认：stdin 或 @@）</td></tr><tr><td><code>-t msec</code></td><td>每轮的超时时间（默认 1000 ms），添加’+’来自动计算超时时间</td></tr><tr><td><code>-m megs</code></td><td>子进程内存限制（0 MB，0=无限制 [默认]）</td></tr><tr><td><code>-A</code></td><td>使用仅二进制插桩（ARM CoreSight mode）</td></tr><tr><td><code>-O</code></td><td>使用仅二进制插桩（FRIDA mode）</td></tr><tr><td><code>-Q</code></td><td>使用仅二进制插桩（QEMU mode）</td></tr><tr><td><code>-U</code></td><td>使用基于unicorn的插桩（Unicorn mode）</td></tr><tr><td><code>-W</code></td><td>使用基于qemu的Wine插桩（Wine mode）</td></tr><tr><td><code>-X</code></td><td>使用VM模糊测试（NYX mode - standalone mode）</td></tr><tr><td><code>-Y</code></td><td>使用VM模糊测试（NYX mode - multiple instances mode）</td></tr><tr><td><code>-g minlength</code></td><td>设置生成模糊测试输入的最小长度（默认1）</td></tr><tr><td><code>-G maxlength</code></td><td>设置生成模糊测试输入的最大长度（默认 1*1024*1024）</td></tr><tr><td><code>-D</code></td><td>启用确定性模糊测试（一个队列仅进行一次）</td></tr><tr><td><span id="-L"><code>-L minutes</code></span></td><td>使用MOpt（imize）模式并设置进入pacemaker模式的时间限制（无新发现的时间），0=立即，-1=立即并进行正常变异</td></tr><tr><td><code>-c program</code></td><td>指定一个编译的二进制来启用CmpLog。如果使用QEMU/FRIDA或模糊测试目标已使用CmpLog编译，那么使用<code>-c 0</code>.</td></tr><tr><td><code>-l cmplog_opts</code></td><td>CmpLog配置值（如“2AT”）：1=小文件， 2=大文件（默认），3=所有文件，A=算法求解，T=transformational求解</td></tr><tr><td><code>-Z</code></td><td>序列队列选择，而不是随机权重</td></tr><tr><td><code>-N</code></td><td>不解除模糊测试文件的链接</td></tr><tr><td><code>-n</code></td><td>无插桩模糊测试（non-instrumented mode）</td></tr><tr><td><code>-x dict_file</code></td><td>模糊器字典</td></tr><tr><td><code>-s seed</code></td><td>为RNG使用一个固定的种子</td></tr><tr><td><code>-V seconds</code></td><td>模糊测试特定的时间之后结束</td></tr><tr><td><code>-E execs</code></td><td>执行一个近似多少次执行后终止模糊测试</td></tr><tr><td><code>-M/-S id</code></td><td>分布式模式，-M auto-sets -D，-Z（使用-d禁用-D）并不进行trimming</td></tr><tr><td><code>-F path</code></td><td>同步到一个外部模糊器队列目录（需要-M，最多可以指定32次）</td></tr><tr><td><code>-T text</code></td><td>在屏幕上展示text banner</td></tr><tr><td><code>-I command</code></td><td>当一个新的crash发现时，执行一个特定的命令或脚本</td></tr><tr><td><code>-C</code></td><td>crash探索模式</td></tr><tr><td><code>-b cpu_id</code></td><td>将模糊测试进程绑定到特定的CPU核心上（0-…）</td></tr><tr><td><code>-e ext</code></td><td>模糊测试输入文件的文件扩展（如果需要的话）</td></tr><tr><td><code>-h</code></td><td>展示选项信息</td></tr></tbody></table><ul><li><code>setup_signal_handlers()</code>设置信号句柄</li><li><code>check_asan_opts()</code>检查asan选项：获取环境变量<code>ASAN_OPTIONS</code>并检查相关选项设置是否正确</li><li>afl-&gt;schedule记录了afl能量调度模式，默认为fast；如果afl-schedule基于fast实现，则需要为其动态分配内存用于记录AFLFast调度信息</li><li><code>check_crash_handling()</code>确保核心转储不会进入一个程序中。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> core &gt;/proc/sys/kernel/core_pattern<br></code></pre></td></tr></tbody></table></figure><ul><li><p><code>check_cpu_governor()</code>：检查CPU governor，主要检查linux内核CPU调频是否存在问题。</p></li><li><p><code>save_cmdline()</code>：将命令行保存到afl-&gt;orig_cmdline变量中</p></li><li><p><code>check_if_tty</code>：检查是否是tty。具体通过<code>ioctl(1, TIOCGWINSZ, &amp;ws)</code>获取终端信息来判断是否为tty终端</p></li><li><p><code>get_core_count()</code>：获取CPU核心数</p></li><li><p><code>setup_dirs_fds()</code>：创建相关文件描述符</p></li><li><p><code>bind_to_free_cpu()</code>：构建绑定到核心的进程列表</p></li><li><p><code>init_count_class16()</code>：由count_class_lookup8桶构造count_class_lookup16数组</p></li><li><p><code>setup_custom_mutators()</code>：设置用户自定义的变异器，详见<a href="./AFL++%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E5%BC%82%E5%99%A8.md">AFL++自定义变异器</a></p></li><li><p><code>setup_cmdline_file()</code>：将命令行保存到default/cmdline文件中</p></li><li><p><code>read_testcases()</code>：从输入目录中读取所有测试用例，然后将其放置在队列中</p></li><li><p><code>pivot_inputs()</code>：为输出目录的输入测试用例创建硬链接，选择一个好的名字并将其转移到新队列实体中</p></li><li><p><code>setup_stdio_file()</code>：为模糊测试数据创建输入文件，默认为default/.cur_input，如果包含扩展名，则为default/.cur_input.(扩展名)</p></li><li><p><code>check_binary()</code>：对PATH路径进行搜索来寻找目标二进制，同时确保其不是一个shell脚本，同时检查其是否有一个有效的ELF头并判断是否进行了插桩（通过环境变量<code>__AFL_SHM_ID</code>进行判断）。此外，该函数还检查一些环境变量并设置相关参数</p></li><li><p><code>setup_testcase_shmem()</code>：设置模糊测试输入的共享内存，并通过环境变量<code>__AFL_SHM_FUZZ_ID</code>传递给forkserver</p></li><li><p><code>load_auto()</code>：自动载入生成的extras</p></li><li><p><code>deunicode_extras()</code>：有时候extras中的字符串在内部转化为unicode码，因此模糊测试时需要将看起来像unicode的字符串进行unicode解码操作</p></li><li><p><code>dedup_extras()</code>：从载入的extras中删除重复（在多个文件载入时可能会发生这个问题）</p></li><li><p>将<code>virgin_bits</code>、<code>virgin_tmout</code>和<code>virgin_tmout</code>数组的比特全部设置为1</p></li><li><p><code>perform_dry_run()</code>：对所有测试用例预运行以确保程序按期望那样运行。该操作仅在初始输入阶段完成并只执行一次</p></li><li><p><span id="cullqueue"><code>cull_queue()</code>：精简队列【贪心算法】，通过遍历top_rated[]中的queue实体，提取出能够发现新边的实体，并将其标记为<code>favored</code>。在下次遍历队列时，这些<code>favored</code>实体能够获得更多执行模糊测试的机会。</span></p></li><li><p><code>show_init_stats()</code>：打印出初始状态，如下图所示：</p></li></ul><p><img src="/2022/07/06/AFLplusplus%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/3.png"></p><ul><li><code>save_auto()</code>：自动保存生成的extras</li></ul><hr><h3 id="模糊测试主循环"><a href="#模糊测试主循环" class="headerlink" title="模糊测试主循环"></a>模糊测试主循环</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// main fuzzy loop</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">likely</span>(!afl-&gt;stop_soon)) {<br><span class="hljs-comment">// fuzzing stage</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p><a href="#cullqueue"><code>cull_queue()</code></a></p></li><li><p><code>afl-&gt;cycle_schedules</code>为周期更换调度算法的标志，更换调度算法后，需要重新计算队列所有实体的分数</p></li><li><p><code>runs_in_current_cycle</code>为表示当前循环的变量</p></li><li><p><code>create_alias_table()</code>：创建别名表，允许权重随机选择（开销较大）</p><ul><li><code>static inline void *afl_realloc(void **buf, size_t size_needed)</code>：<ul><li>该函数为realloc的一个wrapper，其主要是确保在调用该函数后，buf的真实大小始终 &gt; size_needed，<strong>避免频繁调用realloc</strong>。该buf size使用<strong>指数增长</strong>。</li></ul></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">afl_alloc_buf</span> {<br>  <span class="hljs-comment">/* The complete allocated size, including the header of len</span><br><span class="hljs-comment">   * AFL_ALLOC_SIZE_OFFSET */</span><br>  <span class="hljs-type">size_t</span> complete_size;<br>  <span class="hljs-comment">/* ptr to the first element of the actual buffer */</span><br>  u8 buf[<span class="hljs-number">0</span>];<br><br>};<br></code></pre></td></tr></tbody></table></figure><ul><li><code>afl-&gt;alias_table</code>、<code>afl-&gt;alias_probability</code>为<code>struct afl_alloc_buf</code>型指针，分别表示别名表和相应的概率</li><li>接下来进行一系列的概率计算，其结果更新到<code>afl-&gt;alias_probability</code>中</li></ul></li><li><p><code>select_next_queue_entry()</code>：基于别名采样算法选择下一个队列实体</p></li></ul><h4 id="fuzz-one"><a href="#fuzz-one" class="headerlink" title="fuzz_one()"></a>fuzz_one()</h4><ul><li><p>该fuzz_one()函数位于<code>afl-fuzz-one.c</code>中，该函数实际上为一个wrapper，旨在实现MOPT。原始的<code>fuzz_one()</code>函数被重命名为<code>fuzz_one_original()</code></p></li><li><p>这里使用<code>afl-&gt;limit_time_sig</code>参数值进行<code>fuzz_one()</code>函数的分流：</p><ul><li><code>afl-&gt;limit_time_sig</code>由<a href="#-L">-L参数</a>确定，-L参数的<code>minute</code>传递给<code>afl-&gt;limit_time_puppet</code>，该值仅能是0到2000000 或 -1</li><li><code>afl-&gt;limit_time_puppet == -1</code> <span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>afl-&gt;limit_time_sig = -1</code> &amp;&amp; <code>afl-&gt;limit_time_sig = 0</code>；否则 <code>afl-&gt;limit_time_sig = 1</code></li></ul><hr><ul><li><pre><code class="c++">/* 伪代码 */if (afl-&gt;limit_time_sig &lt;= 0) { // afl-&gt;limit_time_sig = 0 表示不启用 MOPT    fuzz_one_original();}if (afl-&gt;limit_time_sig != 0) { // 启用 MOPT    if (afl-&gt;limit_time_sig &lt;= 0)  pilot_fuzzing();    else if (afl-&gt;key_module == 1)  core_fuzzing();    else if (afl-&gt;key_module == 2)  pso_updating();}</code></pre></li></ul></li></ul><hr><h4 id="fuzz-one-original"><a href="#fuzz-one-original" class="headerlink" title="fuzz_one_original()"></a>fuzz_one_original()</h4><p>从队列中选择一个实体，并进行一段时间的模糊测试。返回0表示成功进行模糊测试，返回1表示跳过或放弃模糊测试</p><ul><li><p>如果设置了用户自定义的变异器，即<code>afl-&gt;custom_mutators_count = 1</code>，那么用户自定义的变异器将决定跳过哪些测试用例</p></li><li><p>根据<code>afl-&gt;pending_favored</code>标志来判断在队列中是否有新的favored、没有模糊测试过的种子，如果有且当前种子已经被模糊测试过或不是favored，那么有99%概率跳过该种子的模糊测试；如果<code>afl-&gt;pending_favored</code>标志为<code>false</code>，那么如果当前模糊测试为插桩模式、当前种子不是favored且种子队列数&gt;10，如果队列周期大于1且当前种子未进行过模糊测试（新周期内产生的种子，但不是favored的），75%的概率跳过；否则有95%的概率跳过对该种子的模糊测试</p></li><li><p><code>queue_testcase_get()</code>：首先判断是否启用缓存，如果未启用缓存，则从文件中读入数据并返回；否则，判断该测试用例是否已经缓存到内存中，如果已被缓存，则直接从内存中取出即可，否则将该测试用例缓存到内存中，返回指针<code>afl-&gt;queue_cur-&gt;testcase_buf</code>。</p><p>如果当前测试用例无法满足放入缓存的条件（超过缓存缓存大小/超过最大缓存数），则进行<strong>一个自适应缓存冲突算法</strong>，具体来说：</p><ul><li><code>afl-&gt;q_testcase_cache_size</code>：当前种子测试用例缓存大小</li><li><code>afl-&gt;q_testcase_max_cache_size</code>：能够缓存的最大种子测试用例大小</li><li><code>afl-&gt;q_testcase_cache_count</code>：当前已缓存种子个数</li><li><code>afl-&gt;q_testcase_max_cache_entries</code>：能够缓存的最大的种子数</li><li><code>afl-&gt;q_testcase_max_cache_count</code>：当目前为止的最大缓存数</li><li><code>afl-&gt;q_testcase_cache[]</code>：该数组维护了一个已缓存的种子列表</li></ul><p>一共有两种情况，<span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 【该操作只进行一次】 是缓存种子数未达到最大种子缓存数，仅仅是缓存空间不够了，那么将缓存的最大种子数<code>q_testcase_max_cache_entries</code>设置为 max(afl-&gt;q_testcase_cache_count, afl-&gt;q_testcase_max_cache_count) + 1，然后重新分配<code>afl-&gt;q_testcase_cache</code>【该数组记录被缓存的种子】的空间（当前缓存种子数/历史最大种子缓存数+2）。在这种情况下，缓存空间溢出，还需要将当前缓存空间的一个或多个缓存替换为当前种子测试用例，见<a href="#case2">情况2</a></p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 由于测试用例过大，可能不需要这么大的缓存种子数（因为较大的测试用例会很快填充缓存空间），这本身也是一种自适应的缓存配置。</p><p><span id="case2"><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </span>缓存种子数即将达到了最大种子缓存数（即仅剩下最后一个缓存空位），那么在<code>afl-&gt;q_testcase_cache</code>数组中不是空且不是指向当前种子的位置，释放该种子的缓存，即afl-&gt;q_testcase_cache[tid]<strong>-&gt;testcase_buf</strong>，并更新相关变量值。反复进行上述操作，直到缓存能够放下当前种子为止。</p><p>然后将文件二进制数据读入到<code>q-&gt;testcase_buf</code>，并更新相关变量值。</p></li><li><p><code>calibrate_case()</code>：校准一个新的测试用例，在处理输入目录时完成，以便在早期警告有问题的测试用例，同时在发现新路径时检测变量行为等</p></li><li><p><code>trim_case()</code>：如果是插桩模式、trim_done未进行过且启用了trim，则对测试用例进行修剪操作。修剪操作的目的是尽可能减少输入测试用例的大小，因为测试用例的大小会影响模糊测试的速度。该操作进行指定步长的删除操作，然后将删除后的测试用例进行运行，如果trace_bits相同（删除后的测试用例和原测试用例触发相同的程序状态，但删除后的测试用例具有更小的大小），则将该删除操作写入到测试用例文件中。注：这里需要同时更新缓存的数据。</p></li><li><p><code>calculate_score()</code>：根据执行时间、bitmap大小、handicap（后来者允许运行更长的时间）、种子深度、能量调度（决定factor）、MOPT模式的一些指标等计算种子得分</p></li><li><p><strong>确定性变异阶段</strong>：如果给定了<code>-d</code>，则跳过确定性变异阶段；如果先前已经进行了确定性变异（passed_det=1）或者种子得分满足某个条件[对该种子进行确定性变异性价比不高]，则也需要跳过确定性变异</p></li><li><p>跳过确定性变异后，先执行<strong>用户自定义的变异阶段</strong>，之后进入<strong>havoc阶段</strong>。</p></li><li><p>havoc阶段结束后，可能会进入splice阶段，该阶段由<code>afl-&gt;ready_for_splicing_count(&gt;1)</code>决定，该值在<code>add_to_queue()</code>函数中被更新，当种子大小&gt;4时，<code>afl-&gt;ready_for_splicing_count++</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>AFL++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GraphFuzz使用说明</title>
    <link href="/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="GraphFuzz使用说明"><a href="#GraphFuzz使用说明" class="headerlink" title="GraphFuzz使用说明"></a>GraphFuzz使用说明</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li><p>GraphFuzz是一个用于构建结构感知、库API模糊器的实验性框架</p></li><li><p>论文：</p><p>《GraphFuzz: Library API Fuzzing with Lifetime-aware Dataflow Graphs》</p></li><li><p>GraphFuzz包含：</p><ul><li><code>gfuzz</code>：命令行工具用来合成harness</li><li><code>libgraphfuzz</code>：一个运行时图变异引擎</li></ul></li><li><p>文档：<a href="https://hgarrereyn.github.io/GraphFuzz">hgarrereyn.github.io/GraphFuzz</a></p></li></ul><h2 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2. 工作流程"></a>2. 工作流程</h2><ul><li><p>需要创建一个模式（**<code>schema</code>**）来描述目标库API</p></li><li><p>模式使用人可读的TAML格式编写，并包含一系列需要进行模糊测试的函数、类和结构体</p><hr><p><strong>schema.yaml</strong>：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Foo:</span><br>    <span class="hljs-attr">methods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Foo()</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">~Foo()</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">foo(int</span> <span class="hljs-string">x,</span> <span class="hljs-string">int</span> <span class="hljs-string">y,</span> <span class="hljs-string">float</span> <span class="hljs-string">z)</span><br><span class="hljs-attr">Bar:</span><br>    <span class="hljs-attr">methods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Bar(Foo</span> <span class="hljs-string">*,</span> <span class="hljs-string">int)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">~Bar()</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">bar(int</span> <span class="hljs-string">x)</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在运行时，GraphFuzz将使用不同顺序和不同的参数调用库的API以生成测试用例。最重要的是，GraphFuzz将明确跟踪目标的生命周期，并确保所有测试用例都遵守由模式定义的API规范</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">{ <span class="hljs-comment">// Example 1</span><br>    Foo *v0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Foo</span>();<br>    v0-&gt;<span class="hljs-built_in">foo</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.5</span>);<br>    Bar *v1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Bar</span>(v0, <span class="hljs-number">1000</span>);<br>    v1-&gt;<span class="hljs-built_in">bar</span>(<span class="hljs-number">123</span>);<br>    del v1;<br>    del v0;<br>}<br>{ <span class="hljs-comment">// Example 2</span><br>    Foo *v0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Foo</span>();<br>    v0-&gt;<span class="hljs-built_in">foo</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.5</span>);<br>    v0-&gt;<span class="hljs-built_in">foo</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    v0-&gt;<span class="hljs-built_in">foo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.5</span>);<br>    del v0;<br>}<br>{ <span class="hljs-comment">// Example 3</span><br>    Foo *v0 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Foo</span>();<br>    v0-&gt;<span class="hljs-built_in">foo</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0.5</span>);<br>    Bar *v1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Bar</span>(v0, <span class="hljs-number">1000</span>);<br>    Bar *v2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Bar</span>(v0, <span class="hljs-number">0</span>);<br>    del v2;<br>    del v1;<br>    del v0;<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>上述的测试用例将表示为C++源代码。但在GraphFuzz内部，每个测试用例表示为一个<span style="background-color:#ffed99;font-weight:bold">数据流图</span>，该数据流图的顶点表示为函数，边表示为对象之间的依赖。通过这种方式，GraphFuzz无需代码分析或重编译便可执行测试用例；相反，它动态遍历每一个图，调用每个顶点的一个端点</p><p><img src="/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/o1.png"></p></li></ul><h2 id="3-安装GraphFuzz"><a href="#3-安装GraphFuzz" class="headerlink" title="3. 安装GraphFuzz"></a>3. 安装GraphFuzz</h2><ul><li>将源码下载到本地，并安装相关依赖：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/ForAllSecure/GraphFuzz.git<br>$ sudo apt-get install libprotobuf-dev protobuf-compiler python3-venv python3-pip<br>$ curl -sSL https://install.python-poetry.org | python3 -<br>$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>: ** the root path to poetry ** (e.g. /home/chan/.local/bin)<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>libgraphfuzz：</strong></p><ul><li>libgraphfuzz是链接到你的模糊器harness的一个运行时图变异库，其用C++编写并使用标准的CMake进行构建：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> GraphFuzz<br>$ <span class="hljs-built_in">mkdir</span> build<br>$ <span class="hljs-built_in">cd</span> build<br>$ cmake ..<br>$ make<br>$ sudo make install<br></code></pre></td></tr></tbody></table></figure><hr><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>gfuzz：</strong></p><ul><li>gfuzz是一个python命令行工具，用来构建harness文件并执行各种各样其他的功能（如图最小化）。其使用Python编写，使用Poetry来构建系统：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> .. &amp;&amp; <span class="hljs-built_in">cd</span> cli<br>$ poetry build<br>$ poetry <span class="hljs-built_in">export</span> &gt; dist/requirements.txt<br>$ python3 -m pip install -r dist/requirements.txt<br>$ python3 -m pip install ./dist/gfuzz-*.whl<br></code></pre></td></tr></tbody></table></figure><h2 id="4-基本用法"><a href="#4-基本用法" class="headerlink" title="4. 基本用法"></a><span id="basicusage">4. 基本用法</span></h2><ul><li>构建实验测试环境：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install docker-ce docker-ce-cli containerd.io<br>$ <span class="hljs-built_in">cd</span> .. &amp;&amp; <span class="hljs-built_in">cd</span> experiments<br>$ sudo ./build base<br>$ sudo ./build hello_graphfuzz<br>$ sudo ./run hello_graphfuzz<br></code></pre></td></tr></tbody></table></figure><ul><li><code>hello_graphfuzz</code>是一个简单测试项目，其中包含一个简单的C++目标文件<code>lib.h</code>、一个模式配置文件<code>schema.yaml</code></li><li>一个简单的C++目标文件<code>lib.h</code>：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Foo</span>(): <span class="hljs-built_in">buffer</span>(<span class="hljs-number">0</span>) {}<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">char</span> val)</span> </span>{<br>        buffer.<span class="hljs-built_in">push_back</span>(val);<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span> (buffer.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">4</span> &amp;&amp; \<br>            buffer[<span class="hljs-number">0</span>] == <span class="hljs-string">'F'</span> &amp;&amp; \<br>            buffer[<span class="hljs-number">1</span>] == <span class="hljs-string">'U'</span> &amp;&amp; \<br>            buffer[<span class="hljs-number">2</span>] == <span class="hljs-string">'Z'</span> &amp;&amp; \<br>            buffer[<span class="hljs-number">3</span>] == <span class="hljs-string">'Z'</span><br>        ) {<br>            __builtin_trap();<br>        }<br>    }<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;<span class="hljs-type">char</span>&gt; buffer;<br>};<br></code></pre></td></tr></tbody></table></figure><ul><li>在这个目标中，无法创建使用标准<code>LLVMFuzzerTestOneInput</code>类型的单个函数的harness。但你可以按照如下的方法构造一个事实上的API模糊器：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LLVMFuzzerTestOneInput</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Data, <span class="hljs-type">size_t</span> Size)</span> </span>{<br>    Foo foo;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Size; ++i) {<br>        foo.<span class="hljs-built_in">write</span>(Data[i]);<br>    }<br>    foo.<span class="hljs-built_in">check</span>();<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li><p>上述类型的harness构造需要一些关于API的域知识，但对模糊器的搜索空间进行了限制。例如，如果一个bug需要在Foo::check之后调用Foo::write或多次调用Foo::check才能触发，那该如何操作？因此上述<span style="background-color:#ffed99;font-weight:bold">基于标准<code>LLVMFuzzerTestOneInput</code>存在局限性</span>，主要的问题是其调用序列不变，因此不能触发更深层次的漏洞。随着API surface的扩大，函数的交互方式也呈指数级增加，生成这些“事实上”的harness变得更加困难。</p></li><li><p>在GraphFuzz中，一个驱动见解是使模糊器引擎根据覆盖率引导变异自行发现<span style="background-color:#ffed99;font-weight:bold">API使用模式</span>：通过定义一个模式，描述我们想要模糊测试的所有API端点，让模糊器构建测试用例。</p></li><li><p>schema.yaml：</p></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Foo:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">struct</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Foo</span><br>  <span class="hljs-attr">headers:</span> [<span class="hljs-string">lib.h</span>]<br>  <span class="hljs-attr">methods:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Foo()</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~Foo()</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">write(char</span> <span class="hljs-string">val)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">check()</span><br></code></pre></td></tr></tbody></table></figure><ul><li><p>该模式描述了一个库API中一个对象<code>struct Foo</code>和四个端点：</p><ul><li><p><code>Foo::Foo()</code>（一个构造函数）</p></li><li><p><code>Foo::~Foo()</code> (一个析构函数)</p></li><li><p><code>Foo::write(char)</code></p></li><li><p><code>Foo::check()</code></p></li></ul></li><li><p>在模式中，仅给出函数签名，但GraphFuzz尝试去推断语义（例如，Foo:Foo是一个构造函数而不是一个方法调用）。在大多数情况下，该推断是完美的；但也确实遇到了对参数有隐含约束的函数或非标准的API结构。因此，GraphFuzz也支持一种更粗略、更灵活的端点声明，称为自定义端点。</p></li></ul><hr><ul><li>接下来，我们使用<code>gfuzz</code>工具去合成实际的C++ harness文件：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Usage: gfuzz gen [lang] [schema] [output directory]</span><br>$ gfuzz gen cpp schema.yaml .<br></code></pre></td></tr></tbody></table></figure><ul><li>这将会产生3个文件：<ul><li><code>fuzz_exec.cpp</code>：主模糊器harness</li><li><code>fuzz_write.cpp</code>：一个镜像harness，用于将数据流图转化为源代码</li><li><code>schema.json</code>：在运行时被GraphFuzz所使用的类型元数据</li></ul></li></ul><p>:happy: 生成文件内容详见<a href="#fl1">附录</a></p><ul><li>最后，我们编译模糊器harness：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang++ -o fuzz_exec fuzz_exec.cpp -fsanitize=fuzzer -lprotobuf -lgraphfuzz<br></code></pre></td></tr></tbody></table></figure><p>注意：GraphFuzz通过hook的方式使用libFuzzer，因此我们可以使用libFuzzer的功能如 <code>user_value_profile</code>, <code>fork</code>, <code>dict</code> 等。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fuzz_exec -use_value_profile=1<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/o2.png"></p><ul><li>每个测试用例文件表示一个序列化的数据流图，因此我们查看crash是不可读的：</li></ul><p><img src="/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/o3.png"></p><ul><li>为了使其可读，我们使用<code>fuzz_write</code> harness从图中合成源代码：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clang++ -o fuzz_write fuzz_write.cpp -fsanitize=fuzzer -lprotobuf -lgraphfuzz<br></code></pre></td></tr></tbody></table></figure><ul><li>然后运行<code>fuzz_write</code>来合成harness：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./fuzz_write crash-402bbad640a94933571939f685ea1e9dc4b937f8<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"lib.h"</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE(t) static_cast<span class="hljs-string">&lt;t *&gt;</span>(calloc(sizeof(t), 1))</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GFUZZ_BUNDLE</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">void</span> *active;<br>    <span class="hljs-type">void</span> *inactive;<br>    <span class="hljs-built_in">GFUZZ_BUNDLE</span>(<span class="hljs-type">void</span> *_active, <span class="hljs-type">void</span> *_inactive): <span class="hljs-built_in">active</span>(_active), <span class="hljs-built_in">inactive</span>(_inactive) {}<br>};<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUNDLE(a,b) new GFUZZ_BUNDLE((void *)a, (void *)b)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    Foo *var_0;<br>    { <span class="hljs-comment">// begin shim_0</span><br>        var_0 = <span class="hljs-built_in">MAKE</span>(Foo);<br>        Foo ref = <span class="hljs-built_in">Foo</span>();<br>        *var_0 = ref;<br>    } <span class="hljs-comment">// end shim_0</span><br>    Foo *var_1;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_0-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">70</span>); <span class="hljs-comment">// ascii 'F'</span><br>        var_1 = var_0;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_2;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_1-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">85</span>); <span class="hljs-comment">// ascii 'U'</span><br>        var_2 = var_1;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_3;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_2-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">90</span>); <span class="hljs-comment">// ascii 'Z'</span><br>        var_3 = var_2;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_4;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_3-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">90</span>); <span class="hljs-comment">// ascii 'Z'</span><br>        var_4 = var_3;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_5;<br>    { <span class="hljs-comment">// begin shim_3</span><br>        var_4-&gt;<span class="hljs-built_in">check</span>(); <span class="hljs-comment">// __builtin_trap</span><br>        var_5 = var_4;<br>    } <span class="hljs-comment">// end shim_3</span><br>    Foo *var_6;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_5-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">5</span>);<br>        var_6 = var_5;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_7;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_6-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">0</span>);<br>        var_7 = var_6;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_8;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_7-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">0</span>);<br>        var_8 = var_7;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_9;<br>    { <span class="hljs-comment">// begin shim_3</span><br>        var_8-&gt;<span class="hljs-built_in">check</span>();<br>        var_9 = var_8;<br>    } <span class="hljs-comment">// end shim_3</span><br>    { <span class="hljs-comment">// begin shim_1</span><br>        <span class="hljs-built_in">free</span>(var_9);<br>    } <span class="hljs-comment">// end shim_1</span><br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>该crash在内部仍被表示为数据流图，我们可以使用同样的模糊器概念来进行图感知的最小化</li></ul><blockquote><p><span class="github-emoji"><span>📓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 目前libFuzzer不支持自定义minimize_crash选项，默认情况下会尝试执行字节感知的最小化，因此提供了一个图感知最小化工具作为<code>gfuzz</code>的一部分</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Usage: gfuzz min [fuzzer] [crash]</span><br>$ gfuzz min ./fuzz_exec crash-402bbad640a94933571939f685ea1e9dc4b937f8<br></code></pre></td></tr></tbody></table></figure><p>运行结果：</p><p><img src="/2022/06/24/GraphFuzz%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/o4.png"></p><ul><li>然后我们查看最小化后的测试用例：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./fuzz_write crash-402bbad640a94933571939f685ea1e9dc4b937f8.min<br></code></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"lib.h"</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE(t) static_cast<span class="hljs-string">&lt;t *&gt;</span>(calloc(sizeof(t), 1))</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GFUZZ_BUNDLE</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">void</span> *active;<br>    <span class="hljs-type">void</span> *inactive;<br>    <span class="hljs-built_in">GFUZZ_BUNDLE</span>(<span class="hljs-type">void</span> *_active, <span class="hljs-type">void</span> *_inactive): <span class="hljs-built_in">active</span>(_active), <span class="hljs-built_in">inactive</span>(_inactive) {}<br>};<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUNDLE(a,b) new GFUZZ_BUNDLE((void *)a, (void *)b)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    Foo *var_0;<br>    { <span class="hljs-comment">// begin shim_0</span><br>        var_0 = <span class="hljs-built_in">MAKE</span>(Foo);<br>        Foo ref = <span class="hljs-built_in">Foo</span>();<br>        *var_0 = ref;<br>    } <span class="hljs-comment">// end shim_0</span><br>    Foo *var_1;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_0-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">70</span>); <span class="hljs-comment">// ascii 'F'</span><br>        var_1 = var_0;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_2;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_1-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">85</span>); <span class="hljs-comment">// ascii 'U'</span><br>        var_2 = var_1;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_3;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_2-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">90</span>); <span class="hljs-comment">// ascii 'Z'</span><br>        var_3 = var_2;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_4;<br>    { <span class="hljs-comment">// begin shim_2</span><br>        var_3-&gt;<span class="hljs-built_in">write</span>(<span class="hljs-number">90</span>); <span class="hljs-comment">// ascii 'Z'</span><br>        var_4 = var_3;<br>    } <span class="hljs-comment">// end shim_2</span><br>    Foo *var_5;<br>    { <span class="hljs-comment">// begin shim_3</span><br>        var_4-&gt;<span class="hljs-built_in">check</span>(); <span class="hljs-comment">// __builtin_trap</span><br>        var_5 = var_4;<br>    } <span class="hljs-comment">// end shim_3</span><br>    { <span class="hljs-comment">// begin shim_1</span><br>        <span class="hljs-built_in">free</span>(var_5);<br>    } <span class="hljs-comment">// end shim_1</span><br>}<br></code></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 上述结果删除了冗余的代码</p><h2 id="5-端点"><a href="#5-端点" class="headerlink" title="5. 端点"></a>5. 端点</h2><ul><li>端点是一个GraphFuzz harness基本构建块（数据流图的顶点），本节主要探索完整的端点定义语法：</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Foo:</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-attr">methods:</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-comment"># Endpoint name.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">myEndpoint:</span><br>        <span class="hljs-comment"># List of "live" inputs.</span><br>        <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>, <span class="hljs-string">'Bar'</span>]<br><br>        <span class="hljs-comment"># List of "live" outputs.</span><br>        <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Bar'</span>]<br><br>        <span class="hljs-comment"># Additional fuzzable parameters.</span><br>        <span class="hljs-attr">args:</span> [<span class="hljs-string">'int'</span>, <span class="hljs-string">'char[10]'</span>]<br><br>        <span class="hljs-comment"># Endpoint code. (<span class="hljs-doctag">note:</span> "exec: |" is YAML syntax for a multiline string)</span><br>        <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            // Arbitrary C/C++ code here</span><br><span class="hljs-string">            for (int i = 0; i &lt; 10; ++i) {</span><br><span class="hljs-string">                $a1[i] &amp;= 0x7f;</span><br><span class="hljs-string">            }</span><br><span class="hljs-string">            $i1-&gt;doFunction($i0, $a0, $a1);</span><br><span class="hljs-string">            $o0 = $i1;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>可以将端点定义抽象为一个代码片段，对用法有一定的要求：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// [前提条件:]</span><br><span class="hljs-comment">// $i0 is a live Foo *</span><br><span class="hljs-comment">// $i1 is a live Bar *</span><br><span class="hljs-comment">// $a0 is an int</span><br><span class="hljs-comment">// $a1 is a char[10]</span><br>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {<br>        $a1[i] &amp;= <span class="hljs-number">0x7f</span>;<br>    }<br>    $i1-&gt;<span class="hljs-built_in">doFunction</span>($i0, $a0, $a1);<br>    $o0 = $i1;<br>}<br><span class="hljs-comment">// [前提条件:]</span><br><span class="hljs-comment">// $o0 is a live Bar *</span><br></code></pre></td></tr></tbody></table></figure><p>注：为了运行此代码，我们需要初始化多个对象，包括实时数据类型。运行此代码后，将剩下一个对象（Bar *），我们需要清理该对象</p><ul><li>模糊测试引擎将通过调用构造必要对象并析构结果对象的其他端点来自动识别如何调用此端点</li></ul><hr><ul><li>在<a href="#basicusage">基本用法</a>中，我们使用以下模式来自动生成完整的端点定义</li></ul><p><strong>schema.yaml：</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Foo:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">struct</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Foo</span><br>  <span class="hljs-attr">headers:</span> [<span class="hljs-string">lib.h</span>]<br>  <span class="hljs-attr">methods:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Foo()</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">~Foo()</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">write(char</span> <span class="hljs-string">val)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">check()</span><br></code></pre></td></tr></tbody></table></figure><ul><li>在内部，GraphFuzz生成了一个完整的模式，如下所示：</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Foo:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">struct</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Foo</span><br>  <span class="hljs-attr">headers:</span> [<span class="hljs-string">lib.h</span>]<br>  <span class="hljs-attr">methods:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Foo():</span><br>      <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $o0 = new Foo();</span><br><span class="hljs-string"></span>  <span class="hljs-bullet">-</span> <span class="hljs-string">~Foo():</span><br>      <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        delete $i0;</span><br><span class="hljs-string"></span>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">write(char</span> <span class="hljs-string">val):</span><br>      <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">args:</span> [<span class="hljs-string">'char'</span>]<br>      <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $i0-&gt;write($a0);</span><br><span class="hljs-string">        $o0 = $i0;</span><br><span class="hljs-string"></span>  <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">check():</span><br>      <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>      <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $i0-&gt;check();</span><br><span class="hljs-string">        $o0 = $i0;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>接下来一一分析端点：</li></ul><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Foo::Foo()</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">Foo():</span><br>    <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">$o0</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">Foo();</span><br></code></pre></td></tr></tbody></table></figure><ul><li>该端点无输入和上下文参数（直接省略这些字段）。因为该端点是一个构造函数，其产生一个<code>Foo</code>类型的输出。在输出中，我们编写输出对象的类型名称。在<code>exec</code>模板中，我们需要实际调用这个构造函数。因为我们指定了输出，所以我们可以访问模板变量**$o0**（第0个输出），该变量将填充为一个<code>Foo *</code>指针。</li></ul><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Foo::~Foo()</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">~Foo():</span><br>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">delete</span> <span class="hljs-string">$i0;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>该端点是一个析构函数。为了调用析构函数，我们需要一个对象的实例；因此，我们在<code>inputs</code>数组中指定一个<code>Foo</code>对象。因为我们指定了一个输入，所以我们可以访问模板变量**$i0**（第0个输入），即一个<code>Foo *</code>指针。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Foo::check()</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">check():</span><br>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $i0-&gt;check();</span><br><span class="hljs-string">        $o0 = $i0;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>该端点是一个方法调用。为了执行一个方法调用，我们需要这个对象的一个实例。在我们执行这个方法调用之后，该对象仍然有效，因此其是一个输出。我们在<code>inputs</code>和<code>outputs</code>中指定<code>Foo</code>对象。在我们执行模板时，我们可以访问<strong>$i0</strong>和<strong>$o0</strong>。当这个端点被调用时，$i0将指向一个有效的<code>Foo</code>对象并由我们负责填充**$o0**</li></ul><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>Foo::write(char)</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">write(char</span> <span class="hljs-string">val):</span><br>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Foo'</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">'char'</span>]<br>    <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $i0-&gt;write($a0);</span><br><span class="hljs-string">        $o0 = $i0;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>和<code>Foo::check()</code>一样，该端点也是一个方法调用。但是，该方法有另外一个参数：一个<code>char</code>变量将传递给我们的端点方法。<code>char</code>是一个基本类型，默认情况下，其不会作为数据流图的一部分进行跟踪。相反，在给定图中的每个端点实例包含一个此参数的单独实例，该实例可以被模糊测试。这些上下文相关的参数被指定在<code>args</code>数组中。这里我们通过模板变量**$a0**（第0个参数）来指向<code>char</code>变量。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="A-相关源代码"><a href="#A-相关源代码" class="headerlink" title="A. 相关源代码"></a><span id="fl1">A. 相关源代码</span></h3><ul><li><code>fuzz_exec.cpp</code>中核心代码块：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* CPPScope(name=(auto) Foo::Foo();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_0</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    Foo *_o0;<br>    _o0 = <span class="hljs-built_in">MAKE</span>(Foo);<br>    Foo ref = <span class="hljs-built_in">Foo</span>();<br>    *_o0 = ref;<br>    <br>                    <br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::~Foo();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_1</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    Foo *_i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;Foo *&gt;(in_ref[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">free</span>(_i0);<br>    <br>                    <br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::void write(char val);) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_2</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    Foo *_i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;Foo *&gt;(in_ref[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">char</span> _a0;<br>    <span class="hljs-built_in">memcpy</span>(&amp;_a0, context + <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<br>    Foo *_o0;<br>    _i0-&gt;<span class="hljs-built_in">write</span>(_a0);<br>    _o0 = _i0;<br>                        <br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::void check();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_3</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    Foo *_i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;Foo *&gt;(in_ref[<span class="hljs-number">0</span>]);<br>    Foo *_o0;<br>    _i0-&gt;<span class="hljs-built_in">check</span>();<br>    _o0 = _i0;<br>                        <br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br>}<br></code></pre></td></tr></tbody></table></figure><hr><ul><li><code>fuzz_write.cpp</code>核心代码：</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* CPPScope(name=(auto) Foo::Foo();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_0</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _o0 = CURR_ID++;<br>    std::cout &lt;&lt; <span class="hljs-string">"    Foo *var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">";"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    {"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"        "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">" = MAKE(Foo);\n        Foo ref = Foo();\n        *"</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">" = ref;"</span> &lt;&lt; std::endl;<br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    }"</span> &lt;&lt; std::endl;<br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::~Foo();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_1</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>&gt;(in_ref[<span class="hljs-number">0</span>]);<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    {"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"        free("</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _i0 &lt;&lt; <span class="hljs-string">");"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    }"</span> &lt;&lt; std::endl;<br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::void write(char val);) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_2</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>&gt;(in_ref[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">char</span> _a0;<br>    <span class="hljs-built_in">memcpy</span>(&amp;_a0, context + <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _o0 = CURR_ID++;<br>    std::cout &lt;&lt; <span class="hljs-string">"    Foo *var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">";"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    {"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"        "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _i0 &lt;&lt; <span class="hljs-string">"-&gt;write("</span> &lt;&lt; (<span class="hljs-type">int</span>)_a0 &lt;&lt; <span class="hljs-string">");\n        "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _i0 &lt;&lt; <span class="hljs-string">";"</span> &lt;&lt; std::endl;<br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    }"</span> &lt;&lt; std::endl;<br>}<br><br><br><span class="hljs-comment">/* CPPScope(name=(auto) Foo::void check();) */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shim_3</span><span class="hljs-params">(<span class="hljs-type">void</span> **in_ref, <span class="hljs-type">void</span> **out_ref, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *context)</span> </span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _i0 = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>&gt;(in_ref[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> _o0 = CURR_ID++;<br>    std::cout &lt;&lt; <span class="hljs-string">"    Foo *var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">";"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    {"</span> &lt;&lt; std::endl;<br><br>    std::cout &lt;&lt; <span class="hljs-string">"        "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _i0 &lt;&lt; <span class="hljs-string">"-&gt;check();\n        "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _o0 &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; <span class="hljs-string">"var_"</span> &lt;&lt; _i0 &lt;&lt; <span class="hljs-string">";"</span> &lt;&lt; std::endl;<br>    out_ref[<span class="hljs-number">0</span>] = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(_o0);<br><br>    std::cout &lt;&lt; <span class="hljs-string">"    }"</span> &lt;&lt; std::endl;<br>}<br></code></pre></td></tr></tbody></table></figure><hr><ul><li><code>schema.json</code>内容如下：</li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Foo"</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"scopes"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">{</span><br><span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"(auto) Foo::Foo();"</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"context"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">{</span><br><span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"(auto) Foo::~Foo();"</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"context"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">{</span><br><span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"(auto) Foo::void write(char val);"</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"context"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">{</span><br><span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"(auto) Foo::void check();"</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"inputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"outputs"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">"context"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">}</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="B-模式格式（-star-）"><a href="#B-模式格式（-star-）" class="headerlink" title="B. 模式格式（:star:）"></a>B. 模式格式（<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</h3><ul><li>‎一个 GraphFuzz 模式是用 YAML 编写的模式对象的键值映射：‎</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">object1:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">object1</span><br>    <span class="hljs-string">...</span><br><span class="hljs-attr">object2:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">...</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">object2</span><br>    <span class="hljs-string">...</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></tbody></table></figure><h4 id="a-可用对象"><a href="#a-可用对象" class="headerlink" title="a. 可用对象"></a>a. 可用对象</h4><h5 id="结构体-x2F-类"><a href="#结构体-x2F-类" class="headerlink" title="结构体/类"></a>结构体/类</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">struct_Foo:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">struct</span> <span class="hljs-comment"># (or type: class)</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Foo</span><br>    <span class="hljs-attr">headers:</span> [<span class="hljs-string">'foo.h'</span>]<br>    <span class="hljs-attr">methods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">Foo()</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">~Foo()</span><br>    <span class="hljs-attr">static_methods:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Foo</span> <span class="hljs-string">*</span> <span class="hljs-string">MakeFoo(int)</span><br></code></pre></td></tr></tbody></table></figure><p>属性：</p><table><thead><tr><th>name</th><th>type</th><th>default value</th><th>info</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>-</td><td><code>struct</code> 或 <code>class</code></td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>-</td><td>类的名字（如 <code>Foo</code>） 或一个模板实例的名字（如 <code>Foo&lt;int&gt;</code>）.</td></tr><tr><td><code>methods</code></td><td><code>List[endpoint]</code></td><td><code>[]</code></td><td>实例方法的列表（签名或端点对象）</td></tr><tr><td><code>static_methods</code></td><td><code>List[endpoint]</code></td><td><code>[]</code></td><td>静态方法的列表（签名或端点对象）</td></tr><tr><td><code>headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>包含所有封闭方法定义的C++头文件列表</td></tr><tr><td><code>c_headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>包含所有封闭方法定义的C头文件列表</td></tr><tr><td><code>default_destructor</code></td><td><code>bool</code></td><td><code>false</code></td><td>如果为 <code>true</code>, 则添加一个默认的析构函数端点（如 <code>void ~Foo()</code>）</td></tr><tr><td><code>alloc_with_new</code></td><td><code>bool</code></td><td><code>false</code></td><td>如果为 <code>true</code>, 通过<code>Foo *f = new Foo()</code> 来调用构造函数，而不是执行本地分配并使用一个复制构造函数</td></tr></tbody></table><hr><h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">enum_Options:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">enum</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Options</span><br>    <span class="hljs-attr">headers:</span> [<span class="hljs-string">'options.h'</span>]<br>    <span class="hljs-attr">values:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">OptA</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">OptB</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">OptC</span><br></code></pre></td></tr></tbody></table></figure><p>属性：</p><table><thead><tr><th>name</th><th>type</th><th>default value</th><th>info</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>-</td><td><code>enum</code></td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>-</td><td>枚举名称（如<code>Options</code>）</td></tr><tr><td><code>headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>该枚举所需的C++头文件</td></tr><tr><td><code>c_headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>该枚举所需的C头文件</td></tr><tr><td><code>values</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>枚举值列表</td></tr></tbody></table><hr><h5 id="Typedef"><a href="#Typedef" class="headerlink" title="Typedef"></a>Typedef</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># E.g.</span><br><span class="hljs-comment"># typedef float MyFoo;</span><br><br><span class="hljs-attr">typedef_foo:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">typedef</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">MyFoo</span><br>  <span class="hljs-attr">headers:</span> [<span class="hljs-string">'foo.h'</span>]<br>  <span class="hljs-attr">value:</span> <span class="hljs-string">float</span><br></code></pre></td></tr></tbody></table></figure><p>属性：</p><table><thead><tr><th>name</th><th>type</th><th>default value</th><th>info</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>-</td><td><code>typedef</code></td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>-</td><td>新创建类型的名称（如 <code>MyFoo</code>）</td></tr><tr><td><code>headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>使用该类型所需的C++头文件</td></tr><tr><td><code>c_headers</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>使用该类型所需的C头文件</td></tr><tr><td><code>value</code></td><td><code>string</code></td><td><code>''</code></td><td>类型的值</td></tr></tbody></table><hr><h5 id="Simple（基本数据类型）"><a href="#Simple（基本数据类型）" class="headerlink" title="Simple（基本数据类型）"></a>Simple（基本数据类型）</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">simple_float:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">simple</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">float</span><br>  <span class="hljs-attr">context_size:</span> <span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p>属性：</p><table><thead><tr><th>name</th><th>type</th><th>default value</th><th>info</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>string</code></td><td>-</td><td><code>simple</code></td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>-</td><td>内置类型的名称（如 <code>float</code>）</td></tr><tr><td><code>context_size</code></td><td><code>int</code></td><td><code>0</code></td><td>该类型字节大小</td></tr></tbody></table><h4 id="b-端点定义"><a href="#b-端点定义" class="headerlink" title="b. 端点定义"></a>b. 端点定义</h4><ul><li>端点有两种指定方式：<ol><li>（自动）提供C/C++函数签名</li><li>（手动）提供端点定义对象</li></ol></li></ul><h5 id="自动生成端点"><a href="#自动生成端点" class="headerlink" title="自动生成端点"></a>自动生成端点</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">void</span> <span class="hljs-string">doBar(Bar</span> <span class="hljs-string">*,</span> <span class="hljs-string">int)</span><br></code></pre></td></tr></tbody></table></figure><p>GraphFuzz使用下面的逻辑来决定如何解释端点签名（类似于正则匹配）：</p><table><thead><tr><th>condition</th><th>result</th></tr></thead><tbody><tr><td>in <code>methods</code> and matches <code>void &lt;name&gt;(...)</code>?</td><td>standard constructor</td></tr><tr><td>in <code>methods</code> and matches <code>void ~&lt;name&gt;(...)</code>?</td><td>destructor</td></tr><tr><td>in <code>methods</code>?</td><td>instance method</td></tr><tr><td>in <code>static_methods</code> and return type is <code>&lt;name&gt; *</code>?</td><td>static constructor</td></tr><tr><td>in <code>static_methods</code>?</td><td>static function</td></tr></tbody></table><h5 id="手动生成端点"><a href="#手动生成端点" class="headerlink" title="手动生成端点"></a>手动生成端点</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">my_endpoint:</span><br>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">'Foo'</span>, <span class="hljs-string">'Bar'</span>]<br>    <span class="hljs-attr">outputs:</span> [<span class="hljs-string">'Bar'</span>]<br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">'int'</span>]<br>    <span class="hljs-attr">exec:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        $i0-&gt;doFoo($i1, $a0);</span><br><span class="hljs-string">        $o0 = $i1;</span><br></code></pre></td></tr></tbody></table></figure><p>属性：</p><table><thead><tr><th>name</th><th>type</th><th>default value</th><th>info</th></tr></thead><tbody><tr><td><code>inputs</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>实时输入类型的列表</td></tr><tr><td><code>outputs</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>实时输出类型的列表</td></tr><tr><td><code>args</code></td><td><code>List[string]</code></td><td><code>[]</code></td><td>上下文参数列表。这里可以使用长度固定的数组，如 <code>int[10]</code> 或 <code>char[256]</code>。</td></tr><tr><td><code>exec</code></td><td><code>string</code></td><td><code>''</code></td><td>执行模板 (C/C++)。 <code>$(i/o/a)N</code> 宏分别引用第N个输入/输出/参数对象</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>模糊测试</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
